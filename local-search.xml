<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AJAX学习记录</title>
    <link href="/3210918941.html"/>
    <url>/3210918941.html</url>
    
    <content type="html"><![CDATA[<h1 id="ajax的优点"><a class="markdownIt-Anchor" href="#ajax的优点">#</a> AJAX 的优点:</h1><pre><code class="hljs">可以无需刷新页面与服务端进行通信允许根据用户事件来更新部分页面内容</code></pre><h1 id="ajax的缺点"><a class="markdownIt-Anchor" href="#ajax的缺点">#</a> AJAX 的缺点:</h1><pre><code class="hljs">没有浏览历史,无法回退存在跨域问题 (a.com向b.com发送请求 不被允许) 可以解决对SEO不友好</code></pre><h1 id="http-超文本传输协议"><a class="markdownIt-Anchor" href="#http-超文本传输协议">#</a> http 超文本传输协议</h1><p>规定了浏览器与万维网服务器之间的通信规则</p><h2 id="请求报文"><a class="markdownIt-Anchor" href="#请求报文">#</a> 请求报文:</h2><p>分为<br>请求行  <code>GET /video/BV1WC4y1b78y?p=5&amp; HTTP/1.1</code> <br> 请求头</p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">:authority:</span> api.vc.bilibili.com<br><span class="hljs-code">            :method: GET</span><br><span class="hljs-code">            :path: /dynamic_svr/v1/dynamic_svr/web_homepage?alltype_offset=0&amp;video_offset=738044689246060700&amp;article_offset=0</span><br><span class="hljs-code">            :scheme: https </span><br></code></pre></td></tr></table></figure><p>空行<br>请求体</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">如果是GET请求,请求体为空 ,如果是POST请求,请求体可以不为空   <span class="hljs-attribute">spm_id_from</span>=pageDriver&amp;vd_source=00960caa5adc68e8bc3f39732ee0e72d<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212102331156.png" alt=""><br><img src="https://image.dcaoao.com/image/202212102333845.png" alt=""></p><h2 id="响应报文"><a class="markdownIt-Anchor" href="#响应报文">#</a> 响应报文</h2><p>响应行:<br>HTTP/1.1   200 ok     //200 是响应状态码 同理还有 404  403 401 500 200   ok 与响应状态码同步<br>响应头:<br>content-type: application/json<br>cross-origin-resource-policy: cross-origin    等，与请求头一致<br>空行</p><p>响应体 :  HTML 结构  服务端返回的结果等<br> <code> </code> <br><img src="https://image.dcaoao.com/image/202212102332671.png" alt=""></p><h1 id="ajax发送get请求"><a class="markdownIt-Anchor" href="#ajax发送get请求">#</a> AJAX 发送 GET 请求</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">btnget.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>()&#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">1</span>.创建对象<br>    var xhr = new XMLHttpRequest()<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.初始化 设置请求方法和URL<br>    xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:3000/server?a=100&amp;b=200&#x27;</span>)<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">3</span>.发送<br>    xhr.send()<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">4</span>.事件绑定<br>    <span class="hljs-regexp">//</span> on when  当...的时候<br>    <span class="hljs-regexp">//</span> readyState   是xhr中的属性 表示状态 <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>     <span class="hljs-number">4</span>代表服务器完全响应  <span class="hljs-number">3</span>代表部分响应<br>    <span class="hljs-regexp">//</span> change 发生了改变<br><br>    xhr.onreadystatechange = <span class="hljs-keyword">function</span>() &#123;<br>        <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>) &#123;  <span class="hljs-regexp">//</span>当服务器完全响应<br>            <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>) &#123;   <span class="hljs-regexp">//</span>判断响应码 介于<span class="hljs-number">200</span>-<span class="hljs-number">300</span>之间的都是正常返回<br>                divget.innerHTML = xhr.response  <span class="hljs-regexp">//</span>修改标签内容<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112103726.png" alt=""></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xhr.status)     <span class="hljs-comment">//返回状态码</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xhr.statusText) <span class="hljs-comment">//返回状态字符串</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xhr.getAllResponseHeaders())      <span class="hljs-comment">//返回所有响应头</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xhr.response)   <span class="hljs-comment">//返回响应体</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112057483.png" alt=""></p><h1 id="ajax-发起post请求"><a class="markdownIt-Anchor" href="#ajax-发起post请求">#</a> AJAX 发起 POST 请求</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>设置点击事件<br>  bthpost.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>()&#123;<br>      <span class="hljs-regexp">//</span><span class="hljs-number">1</span>.创建对象<br>      var xhr = new XMLHttpRequest()<br>      <span class="hljs-regexp">//</span> <span class="hljs-number">1.1</span> 设置响应体数据的类型为json<br>      xhr.responseType = <span class="hljs-string">&#x27;json&#x27;</span><br>      <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.初始化<br>      xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:3000/json&#x27;</span>)<br><br>      <span class="hljs-regexp">//</span> <span class="hljs-number">2.2</span> 设置请求头 xhr.setRequestHeader(<span class="hljs-string">&#x27;请求头&#x27;</span>，<span class="hljs-string">&#x27;请求头内容&#x27;</span>)<br>      xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>      <span class="hljs-regexp">//</span> <span class="hljs-number">3</span>.发送,设置POST的请求体<br>      xhr.send(<span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>)<br>      <span class="hljs-regexp">//</span> <span class="hljs-number">4</span>.事件绑定<br>      xhr.onreadystatechange = <span class="hljs-keyword">function</span>() &#123;<br>          <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>              <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt;<span class="hljs-number">300</span>) &#123;<br><br>                  /* <br>                  <span class="hljs-regexp">//</span>手动将服务器发送过来的字符串转换为JSON格式<br>                  let data = JSON.parse(xhr.response)<br>                  console.log(data)<br>                  div.innerHTML = data.age<br>                   */<br><br>                   console.log(xhr.response)<br>                  div.innerHTML = xhr.response.name<br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112102611.png" alt=""><img src="https://image.dcaoao.com/image/202212112102294.png" alt=""></p><p>其中，如果服务端发送过来的是字符串形式的数据，需要将其转换为 JSON 格式</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell">//手动将服务器发送过来的字符串转换为<span class="hljs-type">JSON</span>格式<br><span class="hljs-title">let</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = <span class="hljs-type">JSON</span>.parse(<span class="hljs-title">xhr</span>.<span class="hljs-title">response</span>)</span><br></code></pre></td></tr></table></figure><p>当然，也有自动的方法，可以将数据自动转换为 JSON 格式</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">xhr.responseType</span> = <span class="hljs-string">&#x27;json&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112102460.png" alt=""></p><p>设置请求头  <code>xhr.setRequestHeader('请求头'，'请求头内容')</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">xhr.set<span class="hljs-constructor">RequestHeader(&#x27;Content-Type&#x27;,&#x27;<span class="hljs-params">application</span><span class="hljs-operator">/</span><span class="hljs-params">x</span>-<span class="hljs-params">www</span>-<span class="hljs-params">form</span>-<span class="hljs-params">urlencoded</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112101762.png" alt=""></p><h1 id="解决ie缓存问题"><a class="markdownIt-Anchor" href="#解决ie缓存问题">#</a> 解决 IE 缓存问题</h1><p>IE 浏览器的 AJAX 请求，容易被缓存，使页面无法获取到服务器返回的最新数据<br>解决方法为使请求链接不停变化，使浏览器认为这是一个新的链接请求，则就不会缓存数据<br>每一次都是不同的链接，跟随时间戳</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:3000/ie?t=&#x27;</span> + <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>())     <span class="hljs-comment">//核心点 在请求后面加上时间戳 这样每次都是不同的时间来进行请求，IE也不会缓存</span><br><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112108554.png" alt=""></p><h1 id="延时响应"><a class="markdownIt-Anchor" href="#延时响应">#</a> 延时响应</h1><p>使请求设置超时响应与断网响应，如果超出预订的时间，则按照事先写好的提示进行操作，这里服务端设置了 3 秒后进行响应</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>设置点击事件<br>bthpost.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>()&#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-number">1</span>.创建对象<br>    var xhr = new XMLHttpRequest()<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.初始化<br>    xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:3000/yanshi&#x27;</span>)     <br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2.2</span> 设置请求头<br>    xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>)<br>    <span class="hljs-regexp">//</span> <span class="hljs-number">3</span>.发送,设置POST的请求体<br>    xhr.send(<span class="hljs-string">&#x27;a=100&amp;b=200&#x27;</span>)<br><br><br>    <span class="hljs-regexp">//</span> 设置超时后的响应<br>    xhr.timeout = <span class="hljs-number">2000</span>  <span class="hljs-regexp">//</span>设定事件<span class="hljs-number">2</span>S<br>    xhr.ontimeout = <span class="hljs-keyword">function</span>()&#123;   <span class="hljs-regexp">//</span>超时后执行的函数<br>        alert(<span class="hljs-string">&#x27;链接超时&#x27;</span>)<br>    &#125;<br>    <span class="hljs-regexp">//</span>关于网络异常的回调函数<br>    xhr.onerror = <span class="hljs-keyword">function</span>() &#123;<br>        alert(<span class="hljs-string">&#x27;网络链接失败&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">4</span>.事件绑定<br>    xhr.onreadystatechange = <span class="hljs-keyword">function</span>() &#123;<br>        <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt;<span class="hljs-number">300</span>) &#123;<br>                 console.log(xhr.response)<br>                div.innerHTML = xhr.response<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112112176.gif" alt=""></p><h1 id="取消请求"><a class="markdownIt-Anchor" href="#取消请求">#</a> 取消请求</h1><p><code>abort()</code>  用于取消 AJAX 的请求</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 发送请求按钮</span><br> btns<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.onclick</span> = <span class="hljs-built_in">function</span>() &#123;<br>     x = new <span class="hljs-built_in">XMLHttpRequest</span>()<br>     x<span class="hljs-selector-class">.open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://127.0.0.1:3000/quxiao&#x27;</span>)<br>     x<span class="hljs-selector-class">.send</span>()<br> &#125;<br><br> <span class="hljs-comment">// 取消发送按钮</span><br> btns<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br>     x<span class="hljs-selector-class">.abort</span>()<br> &#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212112116001.gif" alt=""></p><h2 id="取消请求扩展-重复请求"><a class="markdownIt-Anchor" href="#取消请求扩展-重复请求">#</a> 取消请求扩展 重复请求</h2><p>如果用户多次重复请求，则会造成服务器压力过大<br>核心思想：单独标识一个变量，如果其状态为未发送状态，则提交发送请求，变更状态为发送中<br>如果再次请求发送，检测其状态，如果是发送中，则取消上一次的请求，新提交一个请求<br>请求结果返回后，将其状态变更为未发送</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><span class="hljs-keyword">let</span> x = <span class="hljs-literal">null</span><br><span class="hljs-comment">// 标识变量</span><br><span class="hljs-keyword">let</span> onlist = <span class="hljs-literal">false</span>  <span class="hljs-comment">//是否正在发送AJAX请求</span><br><br><span class="hljs-comment">// 发送请求按钮</span><br>btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span>(onlist) &#123;x.<span class="hljs-title function_">abort</span>()&#125;<br>    x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>    onlist = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//修改标识变量为发送中</span><br>    x.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:3000/quxiao&#x27;</span>);<br>    x.<span class="hljs-title function_">send</span>();<br>    x.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (x.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>            onlist = <span class="hljs-literal">false</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(onlist)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随身WIFI刷机记录</title>
    <link href="/717525190.html"/>
    <url>/717525190.html</url>
    
    <content type="html"><![CDATA[<p>来折腾一下这个随身 WIFI, 买到的没有卡槽，上一下全图 买到的型号是  <code>UFI1003_MB_VO2</code></p><p><img src="https://image.dcaoao.com/image/202211021808013.webp" alt=""></p><h2 id="连接设备"><a class="markdownIt-Anchor" href="#连接设备">#</a> 连接设备</h2><p>接下来，按住这个按钮不放手，将板子插入电脑 USB 接口内后，电脑提示音响起后，松开按钮<br><img src="https://image.dcaoao.com/image/202211021813908.webp" alt=""></p><p>电脑打开设备管理器 - 端口 查看是否有 9008<br><img src="https://image.dcaoao.com/image/202211021816756.webp" alt=""></p><p>有的话则进行下一步操作，没有则 <code>安装驱动</code></p><p>接下来打开 <code>miko</code>  按照下图依次点击 软件下载等则会在文尾<br><img src="https://image.dcaoao.com/image/202211021821906.webp" alt=""></p><p>输入下图所示的信息就代表已经链接上了<br><img src="https://image.dcaoao.com/image/202211021822598.webp" alt=""></p><h2 id="备份文件"><a class="markdownIt-Anchor" href="#备份文件">#</a> 备份文件</h2><p>折腾最重要的是留好后路，备份原始文件<br>点击下图所示开始备份<br><img src="https://image.dcaoao.com/image/202211021823168.webp" alt=""></p><p>进度条跑到 100% 就代表备份完成<br><img src="https://image.dcaoao.com/image/202211021824048.webp" alt=""></p><h2 id="开始刷机"><a class="markdownIt-Anchor" href="#开始刷机">#</a> 开始刷机</h2><p>这里我已经备份完成，开始折腾吧那就</p><p>打开 <code>MiFlash_x64.exe</code> , 点击刷新<br><img src="https://image.dcaoao.com/image/202211021832370.webp" alt=""></p><p>点击 <code>浏览</code> 选择刷机包，直接选择整个文件夹<br><img src="https://image.dcaoao.com/image/202211021914008.webp" alt=""></p><p>直接刷入<br><img src="https://image.dcaoao.com/image/202211021849383.webp" alt=""></p><p>这样就是完成了<br><img src="https://image.dcaoao.com/image/202211021854472.webp" alt=""></p><p>接着设备会自动重启，打开网络适配器选项，会发现有一个 NDIS 的网络<br><img src="https://image.dcaoao.com/image/202211021855743.webp" alt=""></p><h2 id="结束"><a class="markdownIt-Anchor" href="#结束">#</a> 结束</h2><p>浏览器内输入 <code>192.168.100.1</code>  键入密码 <code>admin</code>  即可进入管理<br>打开 <code>ARDC投屏</code> 即可查看设备，默认已经刷好了面具<br><img src="https://image.dcaoao.com/image/202211021858682.webp" alt=""></p><h2 id="另外折腾-刷机debian系统"><a class="markdownIt-Anchor" href="#另外折腾-刷机debian系统">#</a> 另外折腾 刷机 debian 系统</h2><p>首先下载刷机包<a class="btn" href="https://6l1ww5-my.sharepoint.com/:f:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EtHqVpUsMiJHiN-9VmVHjRMB86qpfYWnXHJsT2HNMRRcUQ?e=fSBFh5" title="title">下载地址</a>   <code>随身WiFi刷debian系统.zip</code></p><p>接着，继续按住文章开头的按钮，插入电脑，将设备进入到 fastboot 模式</p><p>由于我是 <code>UFI003</code>  型号，所以就解压这一版</p><p>点击文件夹内的 <code>flash.bat</code>  即可<br><img src="https://image.dcaoao.com/image/202211021928859.webp" alt=""></p><h2 id="软件下载链接"><a class="markdownIt-Anchor" href="#软件下载链接">#</a> 软件下载链接</h2><p><a class="btn" href="https://6l1ww5-my.sharepoint.com/:f:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EtHqVpUsMiJHiN-9VmVHjRMB86qpfYWnXHJsT2HNMRRcUQ?e=fSBFh5" title="title">下载地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redmi K50修补面具记录</title>
    <link href="/903904135.html"/>
    <url>/903904135.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>今天吃饱了没事干，手贱把已经修补面具了的手机加了几个模块，重启后没想到给我更新了系统版本，导致 ROOT 失效<br>那就再修补一次<br>发现从 13.0.22 的系统版本更新到了 13.0.24, 酷安内说这几个版本的 boot 好像都一样，我这是失效了，重新修补一遍</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作">#</a> 准备工作</h2><p>查看当前系统版本 去小米社区下载对应的线刷包</p><p><a class="btn" href="https://s.xiaomi.cn/c/x4QZppFE?channel=Share" title="title">传送门</a></p><p><img src="https://image.dcaoao.com/image/202210301845664.webp" alt=""></p><p>下载完成后里边还嵌套着一层压缩包，再次解压</p><p><img src="https://image.dcaoao.com/image/202210301912654.webp" alt=""></p><p><img src="https://image.dcaoao.com/image/202210301914553.webp" alt=""></p><p>进入 <code>images</code>  文件夹，找到 boot.img 把它单独揪出来</p><p>下一步将它传到手机里面，电脑再下载下面的一键修补工具</p><p class="note note-success"><a href="https://6l1ww5-my.sharepoint.com/:u:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EemLfT4c0stNuyWl9I5OpQ8Bs8HRNbSdJbWlVa9MLhTrmQ?e=auUFkO" title="title">下载地址</a></p><p>手机安装修补包内的 <code>magisk_v25.1.apk</code></p><p>打开刚刚安装的面具，点击安装<br><img src="https://image.dcaoao.com/image/202210301921860.webp" alt=""></p><p>选择并修补一个文件<br><img src="https://image.dcaoao.com/image/202210301921145.webp" alt=""></p><p>找到刚刚传入手机的 boot.img 修补它</p><p>这样就是修补成功了，红框圈出的是修补后的文件所在地<br><img src="https://image.dcaoao.com/image/202210301923319.webp" alt=""></p><p>再将修补后的 boot 文件回传到电脑，打开刚刚下载的修补包，进入其中的 <code>image</code>  文件夹，将修补后的文件拷贝进去</p><p><img src="https://image.dcaoao.com/image/202210301929235.webp" alt=""></p><p>包内有有一个 13.0.22 系统版本的 magisk.img, 如果不是这个版本的系统，将其移动出当前文件夹，再将刚刚修补的 boot 文件重命 <code>magisk.img</code></p><p>至此，准备工作就算是完成了</p><h2 id="准备刷入修补"><a class="markdownIt-Anchor" href="#准备刷入修补">#</a> 准备刷入修补</h2><p>手机打开开发者以及 USB 调试 USB 安装模式，原厂线连接上电脑，在此就不再赘述</p><p>管理员运行修补包内的  <code>Root工具箱.bat</code>  如果没装过驱动，那就先运行里边的安装驱动</p><p>然后使用重启选项进入 FASTBOOT 模式</p><p>进入 FASTBOOT 模式后 选择 <code>刷入面具</code></p><p><img src="https://image.dcaoao.com/image/202210301933745.webp" alt=""></p><p>刷入完成<br><img src="https://image.dcaoao.com/image/202210301939251.webp" alt=""></p><p>现在重启设备看看<br><img src="https://image.dcaoao.com/image/202210301944581.webp" alt=""></p><p>成功</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> 总结</h2><p>这种方式适合不用清除数据，但是前提必须已经解开了 BL 锁</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid启用Giscus评论系统</title>
    <link href="/2131702785.html"/>
    <url>/2131702785.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>想给 Hexo 博客加一个 Giscus 评论系统，使用的 Fluid 主题又刚好集成了该评论系统，水一篇博文</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作">#</a> 准备工作</h2><p>Giscus 评论系统需要一个 Github 仓库才能使用，无需自建服务，轻量化系统</p><p>首先进入仓库，点击设置<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271443147.webp" alt=""></p><p>下滑，找到  <code>Discussions </code>  将其打钩选中</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271445349.webp" alt=""></p><p>然后在 Github 内安装 Giscus 插件<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Giscus插件安装 https://github.com/apps/giscus">[2]</span></a></sup>  <a href="https://github.com/apps/giscus">插件安装</a></p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271446184.webp" alt=""></p><h2 id="官方页面生成配置信息"><a class="markdownIt-Anchor" href="#官方页面生成配置信息">#</a> 官方页面生成配置信息</h2><p>打开<a href="https://giscus.app/zh-CN"> Giscus 官方页面</a>，开始配置仓库地址：Giscus<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Giscus https://giscus.app/zh-CN">[1]</span></a></sup></p><p>在仓库选项下，输入要使用的仓库路径： <code>github用户名/仓库名</code> <br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271449711.webp" alt=""></p><p>页面 ↔️ discussion 映射关系这个按需选择最适合自己的那个，这里笔者选择了第二个<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271451880.webp" alt=""></p><p>Discussion 分类则按照官方推荐即可<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271454342.webp" alt=""></p><p>剩下的默认或者按需选择即可</p><p>此刻，giscus 已经按照你填写的内容生成了配置文件</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271457472.webp" alt=""></p><p>将其填入 fluid 配置文件即可开启使用</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271507488.webp" alt=""></p><p>评论后还有邮件通知<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271508089.webp" alt=""></p><h2 id="启用效果"><a class="markdownIt-Anchor" href="#启用效果">#</a> 启用效果:</h2><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271509444.webp" alt=""></p><h2 id="收尾"><a class="markdownIt-Anchor" href="#收尾">#</a> 收尾</h2><p>Giscus 评论系统有一个优点，但也是一个小缺点<br>评论只能登录授权 Github 后才能进行评论，无法匿名评论之类，适合开发者使用<br>而且支持 Markdown 语法，评论存储在 Github，无需服务器维护，属于是用上了就不用管了系列</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Giscus <a href="https://giscus.app/zh-CN">https://giscus.app/zh-CN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Giscus 插件安装 <a href="https://github.com/apps/giscus">https://github.com/apps/giscus</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习记录</title>
    <link href="/902688608.html"/>
    <url>/902688608.html</url>
    
    <content type="html"><![CDATA[<h2 id="10月27号-交换两个变量值笔记"><a class="markdownIt-Anchor" href="#10月27号-交换两个变量值笔记">#</a> 10 月 27 号 交换两个变量值笔记</h2><h2 id="交换思路"><a class="markdownIt-Anchor" href="#交换思路">#</a> 交换思路</h2><p>首先是交换前的思路：需要把 A1 变量值交换到 A2 变量值，A2 变量值交换到 A1 内，那就需要有个第三者来辅助这俩交换</p><h2 id="实际操作"><a class="markdownIt-Anchor" href="#实际操作">#</a> 实际操作</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#首先声明三个变量：A1,A2,kong</span><br><span class="hljs-comment"># kong变量只声明 不赋值</span><br>var <span class="hljs-built_in">A1</span> = <span class="hljs-number">1</span>,<br><span class="hljs-built_in">A2</span> = <span class="hljs-number">2</span>;<br>var kong;<br><br><br><span class="hljs-comment">#然后将A1内的值，先交换到kong内</span><br>kong = <span class="hljs-built_in">A1</span><br><span class="hljs-comment">#此时A1是空出来的状态，那就把A2塞到A1里边去</span><br><span class="hljs-built_in">A2</span> = <span class="hljs-built_in">A1</span><br><span class="hljs-comment">#现在A2空出来了 kong里边还蹲着原先A1的值，把他送进A2里边</span><br><span class="hljs-built_in">A2</span> = kong<br><br><span class="hljs-comment">#最后输出到控制台看看</span><br><br>console.log(<span class="hljs-built_in">A1</span>)<br>console.log(<span class="hljs-built_in">A2</span>)<br></code></pre></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果">#</a> 结果</h2><p>结果图：<br><img src="http://image.dcaoao.com/image/202210281458332.webp" alt=""></p><h2 id="笔记-变量名命名规范"><a class="markdownIt-Anchor" href="#笔记-变量名命名规范">#</a> 笔记 变量名命名规范:</h2><pre><code class="hljs"> 严格区分大小写 不能以数字开头 只能大写小写下划线和$ 不能是关键词或者保留字 var for之类 变量名必须有意义 实在不行用翻译网站吧 遵循驼峰命名法 首字母小写 后边的统统大写 nameTopRight name有特殊含义，尽量不要使用为什么需要变量：因为有数据需要保存变量是什么：变量是一个容器，存放数据，方便调用变量的本质是什么：申请内存中的一块空间变量怎么使用：先声明，再赋值什么是变量的初始化：声明并赋值就是初始化变量命名规范？：看上边交换两个变量的思路？，需要一个空变量来辅助，1交换到2 3交换到1 最后2交换到3来实现1和3的变量值互换</code></pre><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#JS的变量数据类型，只有在程序运行中才可以确定类型，根据变量值来确定的</span><br><br><span class="hljs-built_in">var</span> A1 = <span class="hljs-number">10</span>；  <span class="hljs-meta">#这是一个数字型</span><br><span class="hljs-built_in">var</span> A2 = <span class="hljs-string">&#x27;阿巴阿巴&#x27;</span>; <span class="hljs-meta">#这是一个字符串类型</span><br></code></pre></td></tr></table></figure><p>但是，在 JS 中，JS 是动态语言，变量的数据类型是可以变化的</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> A1 = <span class="hljs-number">10</span>；  <span class="hljs-meta">#这是一个数字型</span><br>A1 = <span class="hljs-string">&#x27;阿巴阿巴&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这样 A1 变量就会更改为字符串类型</p><h2 id="1029号笔记"><a class="markdownIt-Anchor" href="#1029号笔记">#</a> 10.29 号笔记</h2><h2 id="字符串拼接和检测字符串长度"><a class="markdownIt-Anchor" href="#字符串拼接和检测字符串长度">#</a> 字符串拼接和检测字符串长度</h2><p>首先是检测字符串的长度，使用的是  <code>length</code>  变量</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#首先声明并赋值一个变量</span><br>var my1 = <span class="hljs-string">&#x27;我的天哪,看看这句话&#x27;</span><br><span class="hljs-comment">#然后检测变量长度并输出</span><br>console.<span class="hljs-built_in">log</span> (my1.<span class="hljs-built_in">length</span>)<br><span class="hljs-comment">#这样会把这句话的字符串长度输出至控制台</span><br></code></pre></td></tr></table></figure><h2 id="字符串拼接"><a class="markdownIt-Anchor" href="#字符串拼接">#</a> 字符串拼接</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(&#x27;1&#x27; + &#x27;1&#x27;)  <span class="hljs-meta">#字符串与字符串相加,还是字符串  结果为11</span><br>console.<span class="hljs-built_in">log</span>(&#x27;1&#x27; + <span class="hljs-number">1</span>)  <span class="hljs-meta">#字符串与数字相加,还是字符串  结果为11</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)  <span class="hljs-meta">#两者都是数值型 数值型相加   结果为2</span><br>console.<span class="hljs-built_in">log</span>(&#x27;学习&#x27; + &#x27;JS&#x27;)  <span class="hljs-meta">#字符串与字符串相加 结果为学习JS</span><br>console.<span class="hljs-built_in">log</span>(&#x27;学习&#x27; + <span class="hljs-number">66</span>)  <span class="hljs-meta">#字符串与数值型数据相加,还是字符串类型 结果为 学习66</span><br></code></pre></td></tr></table></figure><p>字符串拼接小结：字符串与任何类型数据拼接，结果都是字符串类型</p><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#首先是八进制在JS中的写法,八进制在JS中默认为0开头的就是八进制数值</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">010</span>;<br>console.log(my1)   <span class="hljs-comment">#这样输出的结果为8</span><br><br><br><span class="hljs-comment">#十六进制的写法和八进制稍有不同  只要变量值为0x开头的,默认就是十六进制</span><br><span class="hljs-keyword">var</span> my2 = <span class="hljs-number">0xa</span><br>console.log(my2)  <span class="hljs-comment">#这样输出的结果为10</span><br><br><span class="hljs-comment">#JS中最大值与最小值 仅做了解</span><br>console.log(<span class="hljs-built_in">Number</span>.MAX_VALUE)  <span class="hljs-comment">#最大值</span><br>console.log(<span class="hljs-built_in">Number</span>.MIN_VALUE)  <span class="hljs-comment">#最大值</span><br><br><span class="hljs-comment">#无穷大与无穷小  Infinity</span><br>console.log(<span class="hljs-literal">Infinity</span>)  <span class="hljs-comment">#无穷大</span><br>console.log(-<span class="hljs-literal">Infinity</span>)  <span class="hljs-comment">#无穷小</span><br>console.log(<span class="hljs-string">&#x27;字符串类型&#x27;</span> - <span class="hljs-number">100</span>)  <span class="hljs-comment">#需要注意的是字符串类型与数值型数据进行计算,会得到结果 NaN 代表非数值</span><br><br><span class="hljs-comment">#判断是否非数字 isNaN</span><br>console.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">12</span>))  <span class="hljs-comment">#如果发现是数字,那就返回值false</span><br>console.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;12&#x27;</span>))  <span class="hljs-comment">#如果发现不是是数字,那就返回值true</span><br><br><span class="hljs-comment">#字符串类型</span><br><br><span class="hljs-keyword">var</span> my3 = <span class="hljs-string">&#x27;这是一个字符串类型 \n 的文字&#x27;</span>   <span class="hljs-comment">#字符串类型的文字一般使用单引号 &#x27;  或者双引号 &quot; 来包裹</span><br>                                    <span class="hljs-comment">#可以使用换行符等转义符,引号包裹内单外双,或者外双内单</span><br><br><span class="hljs-comment">#转义符：</span><br>    <span class="hljs-comment">#换行符：\n</span><br>    <span class="hljs-comment">#斜杠：\\</span><br>    <span class="hljs-comment">#单引号：\&#x27;</span><br>    <span class="hljs-comment">#双引号:\&quot;</span><br>    <span class="hljs-comment">#TAB缩进：\t</span><br>    <span class="hljs-comment">#空格:\b </span><br><br><span class="hljs-comment">#一个小案例</span><br> alert(<span class="hljs-string">&#x27;酷热难耐\n 审视四周\n豪气冲天\n“收狗，收大狗，收大猫&quot;\n&quot;收鸡，收鸭，收鹅，收扁嘴&quot;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>案例结果:<br><img src="https://image.dcaoao.com/image/202210292014727.webp" alt=""></p> <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">##接下来就是true和false</span><br>var my1 = <span class="hljs-literal">true</span>  <span class="hljs-meta">#声明true和false两个变量值</span><br>var my2 = <span class="hljs-literal">false</span><br><br><span class="hljs-meta">#在JS计算当中,true的值默认为1 false的值默认为0</span><br>console.<span class="hljs-built_in">log</span>(my1+ <span class="hljs-number">1</span>)  <span class="hljs-meta">#结果为2</span><br>console.<span class="hljs-built_in">log</span>(my2+ <span class="hljs-number">1</span>)  <span class="hljs-meta">#结果为1</span><br><br><span class="hljs-meta">#null 存储为空</span><br>var my3 = <span class="hljs-literal">null</span><span class="hljs-comment">;</span><br>console.<span class="hljs-built_in">log</span> (my3 + <span class="hljs-number">1</span>)   <span class="hljs-meta">#空值与+相加 结果为1</span><br><span class="hljs-meta">#如果是字符串与空值相加,那还是字符串</span><br><span class="hljs-meta">#同理,与上方true相加的话,结果为2</span><br><br><span class="hljs-meta">#只声明 不赋值 也是空值</span><br>var my5<span class="hljs-comment">;</span><br>console.<span class="hljs-built_in">log</span>(my5)  <span class="hljs-meta">#这样输出的结果为undefined</span><br>console.<span class="hljs-built_in">log</span>(my5 + <span class="hljs-string">&#x27;拼接&#x27;</span>)  <span class="hljs-meta">#这样输出的结果为 undefined拼接 因为是字符串与空值拼接</span><br>console.<span class="hljs-built_in">log</span>(my5 + <span class="hljs-number">1</span>)  <span class="hljs-meta">#至于空值与数值型数据相加 那就会返回结果为 NaN 非数值</span><br></code></pre></td></tr></table></figure><h2 id="获取变量的数据类型-typeof"><a class="markdownIt-Anchor" href="#获取变量的数据类型-typeof">#</a> 获取变量的数据类型 typeof</h2><p>使用 <code>typeof</code>  来判断数据类型</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">10</span> ) <span class="hljs-comment">#输出 number 数值型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;10&#x27;</span>) <span class="hljs-comment">#输出 string 字符串类型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">#输出 boolean 布尔型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment"># 空值还是输出空值 undefined</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>)  <span class="hljs-regexp">//</span>输出 objest  这个<span class="hljs-literal">null</span>比较特殊<br></code></pre></td></tr></table></figure><p>结果:<br><img src="https://image.dcaoao.com/image/202210292114372.webp" alt=""></p><p>需要注意的是  <code>prompt</code>  输入过来的数据，默认是字符串类型的</p><p>控制台输出的数据颜色代表着不同的数据类型，可以通过控制台数据不同颜色来判断数据的类型<br>控制台输出的颜色<br>浅蓝色：数值型<br>黑色：字符串型<br>蓝色：布尔型<br>灰色：空值<br><img src="https://image.dcaoao.com/image/202210292118055.webp" alt=""></p><h2 id="变量数据的类型转换"><a class="markdownIt-Anchor" href="#变量数据的类型转换">#</a> 变量数据的类型转换</h2><h3 id="数值型转换为字符串"><a class="markdownIt-Anchor" href="#数值型转换为字符串">#</a> 数值型转换为字符串</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta"># 使用变量 .toString  需要严格遵守大小写</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">1</span>;  <span class="hljs-meta">#现在它是数值型</span><br><span class="hljs-keyword">var</span> my1 = my1.toString();   <span class="hljs-meta">#现在就不是了,被残忍的更改为了字符串类型</span><br><br><span class="hljs-meta">#或者使用 String();  可强制转换为字符串类型</span><br>console.log(<span class="hljs-keyword">String</span>(my1))<br><br><span class="hljs-meta">#再或者使用拼接字符串的特性,字符串与任何数据拼接都是字符串类型</span><br>console.log(my1 + <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-meta">#直接拼接一个空的字符串</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202210292126988.webp" alt=""><br>之前学习过，数值型在控制台的颜色是浅蓝色，现在是灰色，证明是字符串类型</p><h3 id="将字符串转换为数值型"><a class="markdownIt-Anchor" href="#将字符串转换为数值型">#</a> 将字符串转换为数值型</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#1.使用变量parseInt</span><br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;<span class="hljs-number">123</span>px阿巴阿巴&#x27;)) #输出<span class="hljs-number">120</span>,只能取整数<br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27;)) #如果带有小数,则只输出<span class="hljs-number">123</span> 小数直接舍弃,不四舍五入<br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;a123.<span class="hljs-number">6</span>&#x27;)) #如果是字母开头那就拉胯了,不会取值 直接输出结果为 NaN 非数值<br><br><span class="hljs-comment">#2.使用变量parseFloat 也是需要注意大小写</span><br><span class="hljs-attribute">console</span>.log(parseFloat(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27;))  #输出结果<span class="hljs-number">123</span>.<span class="hljs-number">6</span><br><span class="hljs-comment">#使用结果与parseInt几乎相同,不同的地方就是可以输出小数 浮点数</span><br><br><span class="hljs-comment">#3.使用Number() </span><br><span class="hljs-attribute">console</span>.log(Number(<span class="hljs-number">123</span>.<span class="hljs-number">6</span>))  #可以完整输出小数浮点数<br><br><span class="hljs-comment">#4.使用算数运算符来隐形更改为数值型</span><br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; - <span class="hljs-number">0</span>)    #添加运算符后,会被转换为数值型<br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; * <span class="hljs-number">1</span>)    #减法使用<span class="hljs-number">0</span>即可,乘法和除法使用<span class="hljs-number">1</span><br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; / <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="1030号笔记"><a class="markdownIt-Anchor" href="#1030号笔记">#</a> 10.30 号笔记</h2><h3 id="将字符串转换为布尔型"><a class="markdownIt-Anchor" href="#将字符串转换为布尔型">#</a> 将字符串转换为布尔型</h3><p>使用函数 Boolean () 代表空的值 否定的值都会被转换为 false 其他的都会被转换为 true</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#空值会被输出为false<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(NaN))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(null))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(undefined))<br><br>#只要有数据,就会被转换为true<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;123&#x27;</span>))<br><br>#小案例<br><br><span class="hljs-selector-tag">var</span> my2 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的姓名&#x27;</span>)<br><span class="hljs-selector-tag">var</span> my3 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的性别&#x27;</span>)<br><span class="hljs-selector-tag">var</span> my5 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">( <span class="hljs-string">&#x27;您的姓名是:&#x27;</span> + my2 + <span class="hljs-string">&quot;\n您的年龄是:&quot;</span> + my5 + <span class="hljs-string">&quot;\n您的性别是:&quot;</span> + my3 )</span></span><br>    <br></code></pre></td></tr></table></figure><h2 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符">#</a> 算数运算符</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#算数运算符 遵循先乘除 后加减,优先括号内的原则</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 2</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> - <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 0</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> * <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 1</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> / <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 1</span><br><br><span class="hljs-meta">#取余操作  除法运算后余下的数</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">8</span> % <span class="hljs-number">4</span>)  <span class="hljs-meta">#0</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">8</span> % <span class="hljs-number">7</span>)  <span class="hljs-meta">#1</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">7</span> % <span class="hljs-number">8</span>)  <span class="hljs-meta">#7</span><br><br><span class="hljs-comment">// 浮点数 算数运算中的小数奇数运算会有问题 JS中小数最高精度为17位</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>)  <span class="hljs-comment">//0.30000000000000004</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>) <span class="hljs-comment">//7.000000000000001</span><br><br><span class="hljs-comment">//比较  不能拿浮点数进行比较 尽量避免</span><br>var my1 = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;<br>console.<span class="hljs-built_in">log</span>(my1 ==<span class="hljs-number">0.3</span>)  <span class="hljs-comment">//询问my1是否等于0.3  答案是false</span><br><br></code></pre></td></tr></table></figure><h3 id="表达式和返回值"><a class="markdownIt-Anchor" href="#表达式和返回值">#</a> 表达式和返回值</h3><p>表达式就是由数字 运算符 变量等组成的式子叫表达式<br>在程序中，结果在左，表达式在右</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)<br><span class="hljs-comment">//在程序中，结果在左，表达式在右</span><br><span class="hljs-keyword">var</span> my2 = <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="前置自增运算符"><a class="markdownIt-Anchor" href="#前置自增运算符">#</a> 前置自增运算符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先是传统的做法</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">1</span><br>my1 = my1 + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my1)  <span class="hljs-comment">//结果等于2</span><br><br></code></pre></td></tr></table></figure><p>这样的写法不仅麻烦还繁琐</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 前置自增运算符   先自加1，后出结果</span><br><span class="hljs-keyword">var</span> my5 = <span class="hljs-number">1</span><br>++my5;  <span class="hljs-comment">//与上方的my1 = my1+1效果相同   这里等于my5 = my5 + 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my5)  <span class="hljs-comment">//结果为2</span><br>--my5;   <span class="hljs-comment">//这是前置递减用法，用法与前置递增相同</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my5)<br><br><span class="hljs-comment">//小例子</span><br><span class="hljs-keyword">var</span> my6 = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(++my6 + <span class="hljs-number">10</span>)  <span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h3 id="后置自增运算符"><a class="markdownIt-Anchor" href="#后置自增运算符">#</a> 后置自增运算符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//后置自增运算符 先返回原值，在自加1</span><br><span class="hljs-keyword">var</span> my7 = <span class="hljs-number">1</span><br>my7++;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my7)  <span class="hljs-comment">//此时,结果为2</span><br><br><span class="hljs-comment">//但是如果参与了运算</span><br><br>    <span class="hljs-keyword">var</span> my8 = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my8++ + <span class="hljs-number">10</span>)  <span class="hljs-comment">//这样的结果为11 因为先返回了原值 1</span><br></code></pre></td></tr></table></figure><p>自增运算符案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//前置自增案例</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>++a;      <span class="hljs-comment">//前置自增,当前a等于11</span><br><span class="hljs-keyword">var</span> b = ++a + <span class="hljs-number">2</span>  <span class="hljs-comment">//a再次自增  ++a当前为 12   12+2=14</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)    <span class="hljs-comment">//结果为14</span><br><br><span class="hljs-comment">//后置自增案例</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">10</span>;<br>c++;        <span class="hljs-comment">//后置自增 ,当前值为11</span><br><span class="hljs-keyword">var</span> d = c++ + <span class="hljs-number">2</span>;   <span class="hljs-comment">//再次后置自增  先输出原值:11  11+2 结果为13</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(d)      <span class="hljs-comment">//13</span><br><br><br><span class="hljs-comment">//综合案例</span><br><span class="hljs-keyword">var</span> e = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> f = e++ + ++e;  <span class="hljs-comment">//先后置自增, e++输出原值:10 加上前置自增,到++e时原值已经变为11 再次+1   ++e输出值为12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(f)      <span class="hljs-comment">//输出结果 10+12=22</span><br><br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符">#</a> 比较运算符</h2><p>比较运算符只会输出布尔值 true 与 false</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">大于 &gt;<br>小于 &lt;<br>大于等于 &gt;=<br>小于等于 &lt;=<br>不等于 !=<br>等于 ==      <span class="hljs-comment">//有隐形转换,会将字符串类型转换为数值型</span><br>全等于 ===   <span class="hljs-comment">//意思是数据类型与数值需要完全相等</span><br><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &gt;= <span class="hljs-number">5</span>)  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &lt;= <span class="hljs-number">5</span>)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-number">3</span>)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-number">5</span>)  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">//true  判断是否相等有隐形转换 将字符串类型转换为数值型</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> != <span class="hljs-number">3</span>)  <span class="hljs-comment">//判断3是否不等于3 返回false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> === <span class="hljs-number">3</span>)  <span class="hljs-comment">//全等于 要求数据类型 数值完全相同</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> === <span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;吴彦祖&#x27;</span> == <span class="hljs-string">&#x27;刘德华&#x27;</span>) <span class="hljs-comment">//false</span><br><br><br><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">var</span> num1 =<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> res1 = num1 &gt; num2;   <span class="hljs-comment">//输出false</span><br><span class="hljs-keyword">var</span> res2 = num1 == <span class="hljs-number">11</span>;    <span class="hljs-comment">//输出false</span><br><span class="hljs-keyword">var</span> res3 = num1 != num2;   <span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h2><p>逻辑运算符与比较运算符一样，只会输出布尔值</p><h3 id="逻辑与"><a class="markdownIt-Anchor" href="#逻辑与">#</a> 逻辑与</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">//逻辑与  &amp;&amp;  一假全假，全真为真<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">false</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="逻辑或"><a class="markdownIt-Anchor" href="#逻辑或">#</a> 逻辑或</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">//逻辑或 ||  一真全真 全假则假<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> || <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> || <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">true</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> || <span class="hljs-number">0</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> || <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="逻辑非"><a class="markdownIt-Anchor" href="#逻辑非">#</a> 逻辑非</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//逻辑非 not ！   取反符，布尔值的</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(!<span class="hljs-literal">true</span>);    <span class="hljs-comment">//不是true  输出结果为false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(!<span class="hljs-literal">false</span>);    <span class="hljs-comment">//同理 不是false 输出true</span><br></code></pre></td></tr></table></figure><h2 id="1031笔记"><a class="markdownIt-Anchor" href="#1031笔记">#</a> 10.31 笔记</h2><h2 id="短路运算-逻辑中断"><a class="markdownIt-Anchor" href="#短路运算-逻辑中断">#</a> 短路运算 逻辑中断</h2><h3 id="短路运算-逻辑与"><a class="markdownIt-Anchor" href="#短路运算-逻辑与">#</a> 短路运算 逻辑与</h3><p>在逻辑与的短路运算中，如果表达式 1 为真，则返回表达式 2</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>)  <span class="hljs-comment">//这样的结果是false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>)  <span class="hljs-comment">//这样的结果是456</span><br></code></pre></td></tr></table></figure><p>如果表达式 1 为假，则返回表达式 1，空值同理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span>)  //返回<span class="hljs-number">0</span><br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">132</span> * <span class="hljs-number">456</span> - <span class="hljs-number">789</span>)  //这样的结果也是<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="短路运算-逻辑或"><a class="markdownIt-Anchor" href="#短路运算-逻辑或">#</a> 短路运算 逻辑或</h3><p>逻辑或的短路运算  如果表达式 1 为真，则直接返回表达式 1，后面的表达式不参与运算<br>如果表达式 1 为假，那后面的表达式则参与运算，返回表达式 2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">123</span> || <span class="hljs-number">456</span>)  //结果<span class="hljs-number">123</span><br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> || <span class="hljs-number">456</span> + <span class="hljs-number">1</span>)  //结果<span class="hljs-number">457</span><br></code></pre></td></tr></table></figure><p>逻辑或短路运算案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span> || my1++)  <span class="hljs-comment">//因为表达式1为真，则表达式2直接不参与运算，此时输出123</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my1)            <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符">#</a> 赋值运算符</h2><p>自增运算符，每次自增只能自增 1<br>my1++   ++my1 之类</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var my1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;  #这个叫直接赋值</span><br></code></pre></td></tr></table></figure><p>设定赋值运算符，可以做到每次 + - * / 后再赋值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> my2 = <span class="hljs-number">1</span>;<br><br><span class="hljs-attribute">my2</span> += <span class="hljs-number">5</span>;         #自增<span class="hljs-number">5</span>   my2 = my2 + <span class="hljs-number">5</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">6</span><br><span class="hljs-attribute">my2</span> -= <span class="hljs-number">5</span>          #自减<span class="hljs-number">5</span>  my2 = my2 -<span class="hljs-number">5</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">1</span><br><span class="hljs-attribute">my2</span> *= <span class="hljs-number">6</span>;         #每次乘<span class="hljs-number">6</span>后赋值 my2 = my2 * <span class="hljs-number">6</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">6</span><br><span class="hljs-attribute">my2</span> /=<span class="hljs-number">2</span>;          #每次除<span class="hljs-number">2</span>   my2 = my2 / <span class="hljs-number">2</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">3</span><br><span class="hljs-attribute">my2</span> %=<span class="hljs-number">2</span>;          #以<span class="hljs-number">2</span>取余  my2 = my2 % <span class="hljs-number">2</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h2 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级">#</a> 运算符优先级</h2><p>简单来说还是先乘除 后加减 括号优先 逻辑与在前 逻辑或在后</p><p><img src="https://image.dcaoao.com/image/202210311303456.webp" alt=""></p><p>运算符优先级</p><ol><li>小括号  <code>()</code> <br> 2. 一元运算符   <code>++ -- !</code> <br>3. 算数运算符  先  <code>* / % </code> 后  <code>+ -</code> <br>4. 关系运算符   <code>&gt; &gt;= &lt; &lt;=num</code> <br>5. 相等运算符   <code>== != === !==</code> <br>6. 逻辑运算符  先  <code>&amp;&amp;</code>  后 <code> ||</code> <br>7. 赋值运算符   <code>=</code> <br>8. 逗号运算符   <code>, </code></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 运算符优先级案例</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">false</span> ||         <span class="hljs-literal">true</span>     &amp;&amp;         <span class="hljs-literal">true</span>    &amp;&amp; <span class="hljs-literal">true</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span> &gt;= <span class="hljs-number">6</span> || <span class="hljs-string">&#x27;人&#x27;</span> != <span class="hljs-string">&#x27;阿凡达&#x27;</span> &amp;&amp; !(<span class="hljs-number">12</span> * <span class="hljs-number">2</span> ==<span class="hljs-number">144</span>) &amp;&amp; <span class="hljs-literal">true</span>)  <span class="hljs-comment">//结果为true，因为逻辑与优先级比逻辑或高</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">5</span> == num / <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-number">2</span> + <span class="hljs-number">2</span> * num).toString() === <span class="hljs-string">&#x27;22&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(   <span class="hljs-literal">true</span>      &amp;&amp;             <span class="hljs-literal">true</span>                 )      <span class="hljs-comment">//结果为true</span><br></code></pre></td></tr></table></figure><h2 id="if语法的结构"><a class="markdownIt-Anchor" href="#if语法的结构">#</a> IF 语法的结构</h2><p>if 语句中 如果表达式为真，则运行 if 大括号内的语句<br>如果表达式为假，则直接跳过该 if 语句内的表达式运行<br> if 语句后面可以跟一个 else 语句，意思是 if 表达式为否时，改语句执行</p><h3 id="if与else"><a class="markdownIt-Anchor" href="#if与else">#</a> if 与 else</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">var</span> <span class="hljs-variable">age</span> = <span class="hljs-function"><span class="hljs-title">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">age</span> &gt;= <span class="hljs-number">18</span>) &#123;    <span class="hljs-comment">//如果 age大于等于18</span><br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;恭喜您,允许进入网吧&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> &#123;        <span class="hljs-comment">//else的意思是 否则</span><br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;未成年不准进入网吧&#x27;</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1101笔记"><a class="markdownIt-Anchor" href="#1101笔记">#</a> 11.01 笔记</h2><h3 id="if-else-if"><a class="markdownIt-Anchor" href="#if-else-if">#</a> if else if</h3><p>如果第一个 if 没有满足条件，则跳过这个 if 语句，去执行下一个，如果还是不满足，则继续下一个 if</p><p>多选一的关系<br>如果条件表达式 1 不满足，则检查条件表达式 2, 如果条件表达式 2 也不满足，则执行条件表达式 3</p><p>如果所有条件表达式都不满足，那执行结尾的 else</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-number">1</span> == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;1不等于2&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-number">2</span> == <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;2等于2&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;都不满足&#x27;</span>)</span><br>&#125; <br><br></code></pre></td></tr></table></figure><h2 id="三元表达式"><a class="markdownIt-Anchor" href="#三元表达式">#</a> 三元表达式</h2><p>三元表达式中的条件判断如果为 true 则返回表达式 1 , 如果判断为 false 则返回表达式 2<br> 也是多选一的关系</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> res <span class="hljs-built_in">num</span> &gt; <span class="hljs-number">5</span> ? <span class="hljs-string">&#x27;是的&#x27;</span> : <span class="hljs-string">&#x27;不是&#x27;</span><br>alert (res)    <span class="hljs-comment">//因为num大于10,结果为true 所以返回  是的</span><br><br></code></pre></td></tr></table></figure><h2 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句">#</a> Switch 语句</h2><p>Switch 语句也是多选一的关系，但是适合条件比较多的时候<br>如果 switch 中的值与 case 后的结果符合，则执行符合的那一条表达式<br>如果都不符合，则执行最后的 default<br>switch 表达式的值与 case 的值为全等的关系 === 也就是说数据类型和内容必须完全相等才可以<br>如果没有写 break 来进行结束，则会连带执行下一条表达式，不管符不符合<br>在实际开发中，switch 表达式一般单独写成一个值</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> my1 = prompt(<span class="hljs-string">&#x27;请输入水果名称&#x27;</span>)<br><span class="hljs-keyword">switch</span> (my1) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;苹果&#x27;</span>:<br>        alert (<span class="hljs-string">&#x27;苹果一块大批发啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;香蕉&#x27;</span>: <br>        alert(<span class="hljs-string">&#x27;香蕉包邮到家门口啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;菠萝&#x27;</span>:<br>        alert(<span class="hljs-string">&#x27;菠萝白送啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> a1:<br>        alert(<span class="hljs-string">&#x27;这是一个al&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:alert(<span class="hljs-string">&#x27;没有符合条件的,下次一定&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行效果<br><img src="https://image.dcaoao.com/image/202211012203507.gif" alt=""></p><h2 id="for循环"><a class="markdownIt-Anchor" href="#for循环">#</a> for 循环</h2><p 循环体="">循环分为四大部分<br> for (初始化变量；条件表达式；操作表达式)</p><p>初始化变量：在循环中只会执行一次，使用 var 声明的一个普通变量 一般作为计数器使用<br>条件表达式：决定每一次循环后，循环是否会继续执行，也就是结束条件<br>操作表达式：每次循环都会执行一次，注意是每次循环，配合初始化变量进行更新 (一般递增或递减)</p><p>执行顺序:<br>1. 首先执行一次 <code>初始化变量</code> <br> 2. 检查 <code>条件表达式</code> 来确定是否要执行循环<br> 3. 如果 <code>条件表达式</code> 符合条件，则执行一次 <code>循环体</code> <br> 4. 执行过 <code>循环体</code> 后，再去执行一次 <code>操作表达式</code> <br> 5. 一套循环已经完成，接下来继续检查 <code>条件表达式</code> 是否满足条件，满足条件则继续循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//解析 执行i等于1 然后检查i是否小于等于100</span><br><span class="hljs-comment">//如果小于100 执行一次控制台输出123 </span><br><span class="hljs-comment">//然后再为i变量后置自增一次 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>;i++) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for循环案例"><a class="markdownIt-Anchor" href="#for循环案例">#</a> for 循环案例</h3><p>做一个学生成绩查询的案例，需要最后输出班级人数，班级总分数，班级平均分</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先要求用户输入班级总人数</span><br><span class="hljs-keyword">var</span> total = prompt (<span class="hljs-string">&#x27;请输入班级总人数&#x27;</span>)<br><span class="hljs-comment">//然后使用for循环弹出相应的输入框要求输出每个人的成绩</span><br><span class="hljs-comment">//然后声明一个总成绩空值</span><br><span class="hljs-keyword">var</span> totalresults = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= total ;i++) &#123;<br>    <span class="hljs-keyword">var</span> results = prompt (<span class="hljs-string">&#x27;请输入第&#x27;</span> + i +<span class="hljs-string">&#x27;个学生的成绩&#x27;</span>)<br>    <span class="hljs-comment">//然后总成绩将每次循环的成绩相加保存,但是prompt输入过来的字符是字符串格式,还需要转换为数值</span><br>    totalresults += <span class="hljs-built_in">Number</span>(results)<br>&#125; <br><br><span class="hljs-comment">// 然后输出平均分,总成绩,班级人数</span><br>alert(<span class="hljs-string">&#x27;班级的总人数是&#x27;</span> + total + <span class="hljs-string">&#x27;人&#x27;</span>)<br>alert(<span class="hljs-string">&#x27;班级的总成绩是&#x27;</span> + totalresults + <span class="hljs-string">&#x27;分&#x27;</span>)<br>alert(<span class="hljs-string">&#x27;班级的平均分是&#x27;</span> + totalresults / total + <span class="hljs-string">&#x27;分&#x27;</span>)<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://image.dcaoao.com/image/202211082124607.gif" alt=""></p><h2 id="1107记录"><a class="markdownIt-Anchor" href="#1107记录">#</a> 11.07 记录</h2><h2 id="for循环执行不同的代码"><a class="markdownIt-Anchor" href="#for循环执行不同的代码">#</a> for 循环执行不同的代码</h2><p>for 循环可以使用 if else 来执行不同的代码，输出不同的值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">100</span> ; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是第1圈循环&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是第100圈循环&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;循环次数&#x27;</span> + i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双重for循环"><a class="markdownIt-Anchor" href="#双重for循环">#</a> 双重 for 循环</h2><p>for 循环可以嵌套，外层循环一次，内层循环全部</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">10</span> ;i++) &#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span> ;k &lt;= <span class="hljs-number">10</span> ; k++) ( <br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;内层的输出&#x27;</span>)<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>结果就是，内层循环先在控制台输出十遍 <code>内层的输出</code> ，然后再回到外循环，然后再输出十遍 <code>内层的输出</code> ，往返 10 次，直到外层循环完成</p><h3 id="双重for循环案例"><a class="markdownIt-Anchor" href="#双重for循环案例">#</a> 双重 for 循环案例</h3><h4 id="案例输出五行五列的星星符号"><a class="markdownIt-Anchor" href="#案例输出五行五列的星星符号">#</a> 案例，输出五行五列的星星符号</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先定义一个空值</span><br><span class="hljs-keyword">var</span> xing = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">//外循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span> ;i++) &#123;<br>    <span class="hljs-comment">//内循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span>;k &lt;= <span class="hljs-number">5</span> ; k++ ) &#123;<br>        xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>    &#125;<br>    xing += <span class="hljs-string">&#x27;\n&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xing)<br><br></code></pre></td></tr></table></figure><p>解读：首先看内循环，内循环因为 for 双重循环的特性，外循环执行一次，内循环就要执行五次<br>现在内循环给出的是一颗 <code>☆</code> , 循环五次过后变为  <code>☆☆☆☆☆</code>  也就是一行<br>那继续执行下去，外循环执行五次后，得到了 25 颗星星，但是效果不对<br><img src="https://image.dcaoao.com/image/202211082041137.webp" alt=""><br>要求的是五行五列，但是现在为一列，说明缺少换行符号<br>那就在内循环出五颗星星后，在其后方添加一个换行符<br> <code>xing = xing + '\n'</code> <br> <code>xing += '\n'</code> <br> 两者皆可，最后在循环外输出结果，得到想要的答案<br><img src="https://image.dcaoao.com/image/202211082044473.webp" alt=""></p><h4 id="案例输出倒三角的星星图案"><a class="markdownIt-Anchor" href="#案例输出倒三角的星星图案">#</a> 案例，输出倒三角的星星图案</h4><p>首先是示例图<br><img src="https://image.dcaoao.com/image/202211082046226.webp" alt=""><br>第一层十颗星星，第二层九颗星星，以此类推</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//声明空值,方便调用</span><br><span class="hljs-keyword">var</span> xing = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ;i &lt;= <span class="hljs-number">10</span> ;i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = i ;k &lt;= <span class="hljs-number">10</span>; k++) &#123;<br>                    xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>                &#125;<br>                xing += <span class="hljs-string">&#x27;\n&#x27;</span><br>            &#125;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (xing)<br></code></pre></td></tr></table></figure><p>解读：第一层需要十颗星，那就叫内层循环首次循环直接输出一排十颗的星星，所以 <code>k &lt;= 10</code> <br> 内层循环的 <code>k</code>  值是取外层循环的 <code>i</code>  值，也就是说，外层第一次循环，内层会循环十遍，也就输出一排 10 颗星，在内循环其后面添加一句 <code>xing += '\n'</code>  达到每次内循环完成后换行的目的</p><p>外层第二次循环后，i 值变为了 2, 那内循环的 <code>k</code>  值是取的 <code>i</code> , 则内循环这次会循环九次，输出九颗 <code>☆</code> , 再次换行，以此类推</p><p>至于正三角的话更简单，首次内循环只可循环一次，然后按照循环次数增加<br>将内循环更改为</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span> ;k &lt;= i; k++) &#123;<br>    xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样内循环首次循环时，一次便会停止，外循环第二次循环后，内循环便会循环两次，以此类推<br><img src="https://image.dcaoao.com/image/202211082108719.webp" alt=""></p><h2 id="1110记录"><a class="markdownIt-Anchor" href="#1110记录">#</a> 11.10 记录</h2><h2 id="while循环-与-do-while循环"><a class="markdownIt-Anchor" href="#while循环-与-do-while循环">#</a> while 循环 与 do while 循环</h2><h3 id="while循环"><a class="markdownIt-Anchor" href="#while循环">#</a> while 循环</h3><p><code>while</code>  循环与 for 循环稍有不同<br> <code>while</code>  的循环，先声明一个 <code>计数器</code> ，循环停止条件在小括号内，计数器循环写在循环内<br>当条件表达式为 <code>true</code> , 则执行循环，如果为 <code>false</code> , 则退出循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;输出语句&#x27;</span>)<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>while 循环案例，可以执行判断条件比较复杂的语句</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入前端二字&#x27;</span>)<br>while (<span class="hljs-selector-tag">a</span> !== <span class="hljs-string">&#x27;前端&#x27;</span>) &#123;<br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入前端二字&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#x27;好滴很&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="do-while循环"><a class="markdownIt-Anchor" href="#do-while循环">#</a> do while 循环</h3><p><code>do while</code>  会先执行一次循环体，然后再判断条件表达式，<br> 如果为 <code>true</code> , 则继续循环，如果为 <code>false</code> , 则退出循环<br>格式:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (<span class="hljs-string">&#x27;这是循环体&#x27;</span>)<br>    a++<br>&#125; <span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>do while 案例 打印 1-100 的整数和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span><br><span class="hljs-keyword">do</span> &#123;<br>   c += b<br>   b++;<br>&#125; <span class="hljs-keyword">while</span> (b &lt;= <span class="hljs-number">100</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (c)<br></code></pre></td></tr></table></figure><h2 id="continue跳出当前循环"><a class="markdownIt-Anchor" href="#continue跳出当前循环">#</a> continue 跳出当前循环</h2><p>continue, 只要出现，则跳过本次循环，执行下一次循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> ) &#123;  <span class="hljs-comment">//使用IF语句，表明只要i等于3的时候，就跳出当前循环</span><br>        continue;   <span class="hljs-comment">//跳出当前循环，执行下一次循环</span><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (<span class="hljs-string">&#x27;这是第&#x27;</span> + i + <span class="hljs-string">&#x27;次循环&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：第三次循环被跳过，直接执行第四次循环<br><img src="https://image.dcaoao.com/image/202211111913091.webp" alt=""></p><h3 id="continue-跳出循环案例"><a class="markdownIt-Anchor" href="#continue-跳出循环案例">#</a> continue 跳出循环案例</h3><p>案例，求 1-100 之间，除了能被 7 整除以外的整数和<br>使用 if 语句，如果取余 7 结果后为 0 的，一律跳过当前循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span>;k &lt;= <span class="hljs-number">100</span>;k++) &#123;<br>    <span class="hljs-keyword">if</span> (k % <span class="hljs-number">7</span> ==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">num</span> += k;<br>&#125;<br>console.log(<span class="hljs-built_in">num</span>)<br></code></pre></td></tr></table></figure><h2 id="break-跳出整个循环"><a class="markdownIt-Anchor" href="#break-跳出整个循环">#</a> break 跳出整个循环 ##</h2><p>直接跳出整个循环，不在执行下一次的循环，整个循环直接结束</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;a &lt;= <span class="hljs-number">5</span> ;a++) &#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//当a等于3,直接退出整个循环,不再执行循环任务</span><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;循环&#x27;</span> + a + <span class="hljs-string">&#x27;次&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：只循环了两次<br><img src="https://image.dcaoao.com/image/202211111916830.webp" alt=""></p><h2 id="数组的使用"><a class="markdownIt-Anchor" href="#数组的使用">#</a> 数组的使用</h2><p>数组，是一组数据的集合，可将多个数据储存在单个变量下<br>创建数组有两种方式 new 与数组字面量</p><h3 id="创建数组"><a class="markdownIt-Anchor" href="#创建数组">#</a> 创建数组</h3><p>使用 new 创建数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();  <span class="hljs-comment">//创建一个空数组,A要大写,使用Array</span><br></code></pre></td></tr></table></figure><p>使用数组字面量创建数组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var abb <span class="hljs-operator">=</span> []<span class="hljs-comment">;  //使用方括号</span><br></code></pre></td></tr></table></figure><p>声明数组并赋值被称为数组的初始化</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> abb = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;字符串类型&#x27;</span>,<span class="hljs-literal">true</span>];  <span class="hljs-comment">//数组内和存在多个不同的值，被称为数组元素，使用逗号分隔</span><br></code></pre></td></tr></table></figure><h3 id="获取数组内的元素"><a class="markdownIt-Anchor" href="#获取数组内的元素">#</a> 获取数组内的元素</h3><p>格式  <code>console.log(数组名[数组索引号])</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">0</span>])  <span class="hljs-comment">//会输出数组内第一个值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">1</span>])  <span class="hljs-comment">//会输出数组内第二个值，以此类推，索引号从0开始</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">3</span>])  <span class="hljs-comment">//会输出数组内第三个值，以此类推，索引号从0开始</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">5</span>])  <span class="hljs-comment">//因为没有这个值，所以会输出空值</span><br></code></pre></td></tr></table></figure><h3 id="遍历数组将数组内的元素全部输出出来"><a class="markdownIt-Anchor" href="#遍历数组将数组内的元素全部输出出来">#</a> 遍历数组，将数组内的元素全部输出出来</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> acc = [<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-string">&#x27;张飞&#x27;</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-string">&#x27;马超&#x27;</span>,<span class="hljs-string">&#x27;赵云&#x27;</span>,<span class="hljs-string">&#x27;诸葛亮&#x27;</span>,<span class="hljs-string">&#x27;吕蒙&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">7</span> ; i++)&#123;  <span class="hljs-comment">//因为数组索引从0开始，所以i = 0，因为从0开始，输出小于7的，所以 &lt; 7 </span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(acc[i])<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111934846.webp" alt=""></p><h3 id="动态获取数组内的元素长度个数"><a class="markdownIt-Anchor" href="#动态获取数组内的元素长度个数">#</a> 动态获取数组内的元素长度 / 个数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> add = [<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-string">&#x27;张飞&#x27;</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-string">&#x27;马超&#x27;</span>,<span class="hljs-string">&#x27;赵云&#x27;</span>,<span class="hljs-string">&#x27;诸葛亮&#x27;</span>,<span class="hljs-string">&#x27;吕蒙&#x27;</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(add.<span class="hljs-built_in">length</span>)  <span class="hljs-comment">//输出为7</span><br><span class="hljs-comment">//数组的长度是元素格式，并非元素索引号，而且可以动态检测数组的元素个数</span><br></code></pre></td></tr></table></figure><h3 id="案例求数组元素的和及其平均值"><a class="markdownIt-Anchor" href="#案例求数组元素的和及其平均值">#</a> 案例，求数组元素的和及其平均值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> aee = [<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;a &lt; aee.<span class="hljs-built_in">length</span> ;a++) &#123;<br>    num += aee[a]<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组和:&#x27;</span> + num)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组平均值:&#x27;</span> + num / aee.<span class="hljs-built_in">length</span>) <br><span class="hljs-comment">//如果想要输出多个变量，使用逗号分隔即可</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num,num / aee.<span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935787.webp" alt=""></p><h3 id="案例求数组中的最大值"><a class="markdownIt-Anchor" href="#案例求数组中的最大值">#</a> 案例，求数组中的最大值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> aff = [<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">66</span>,<span class="hljs-number">33</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">69</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = aff[<span class="hljs-number">0</span>] <span class="hljs-comment">//首先声明数组内第一个值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>; b &lt; aff.<span class="hljs-built_in">length</span> ; b++) &#123;<br>    <span class="hljs-keyword">if</span> (aff[b] &gt; <span class="hljs-built_in">max</span> ) &#123;<br>        <span class="hljs-built_in">max</span> = aff[b]<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组内最大值为&#x27;</span> + <span class="hljs-built_in">max</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935706.webp" alt=""></p><h3 id="案例将数组转换为字符串类型并且使用-符号分隔"><a class="markdownIt-Anchor" href="#案例将数组转换为字符串类型并且使用-符号分隔">#</a> 案例，将数组转换为字符串类型，并且使用 | 符号分隔</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">//首先声明一个空值用来存储</span><br><span class="hljs-keyword">var</span> aee = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;skyblue&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>;c &lt; aee.<span class="hljs-built_in">length</span> ;c++) &#123;<br>str += aee[c]  + <span class="hljs-string">&#x27;|&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935583.webp" alt=""></p><h3 id="新增数组元素"><a class="markdownIt-Anchor" href="#新增数组元素">#</a> 新增数组元素</h3><p>有两种方法 修改 length 的长度与修改索引号<br> 1. 修改 length 长度</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> agg = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>]</span><br>agg<span class="hljs-selector-class">.length</span> = <span class="hljs-number">5</span><br>console<span class="hljs-selector-class">.log</span>(agg<span class="hljs-selector-attr">[3]</span>)  <span class="hljs-comment">//会输出空值 undefined</span><br></code></pre></td></tr></table></figure><p>2. 修改索引号</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> ahh = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>]</span><br>ahh<span class="hljs-selector-attr">[3]</span> = <span class="hljs-string">&#x27;李&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(ahh<span class="hljs-selector-attr">[3]</span>)   <span class="hljs-comment">//数组内没有索引号为3的，追加过后出现了</span><br><br><span class="hljs-comment">//注意，如果直接给数组或者已有的数组索引赋值，则原有数据会被覆盖</span><br>ahh<span class="hljs-selector-attr">[3]</span> = <span class="hljs-string">&#x27;秦&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(ahh<span class="hljs-selector-attr">[3]</span>)  <span class="hljs-comment">//输出：秦</span><br></code></pre></td></tr></table></figure><h3 id="案例-数组使用循环存放1-100的数值"><a class="markdownIt-Anchor" href="#案例-数组使用循环存放1-100的数值">#</a> 案例 数组使用循环存放 1-100 的数值</h3><p>核心原理：使用 for 循环来追加数组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var aii <span class="hljs-operator">=</span> []<br>for (var d <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;d &lt; 101;d++) &#123;</span><br>    aii[d] <span class="hljs-operator">=</span> d<br>&#125;<br>console.log(aii)<br></code></pre></td></tr></table></figure><p>结果:<br><img src="https://image.dcaoao.com/image/202211122103158.webp" alt=""></p><p>追加 筛选大于 10 的数放入新数组</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> ajj = []<br><span class="hljs-keyword">var</span> h = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> f = <span class="hljs-number">0</span> ; f &lt; aii.length ;f++) &#123;<br>    <span class="hljs-keyword">if</span> (aii[f] &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ajj[h] = aii[f]  <span class="hljs-comment">//数组需要从0开始，循环外声明一个新值 h ，依次递增</span><br>        h++<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211122116897.webp" alt=""></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//筛选方法2</span><br><span class="hljs-keyword">var</span> ajj = []<br>       <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> f = <span class="hljs-number">0</span> ; f &lt; aii.<span class="hljs-built_in">length</span> ;f++) &#123;<br>    <span class="hljs-keyword">if</span> (aii[f] &lt; <span class="hljs-number">10</span>) &#123;<br>        continue;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ajj[ajj.<span class="hljs-built_in">length</span>] = aii[f] <span class="hljs-comment">//不使用新数值，直接使用新数组的length长度，从0开始</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ajj)<br></code></pre></td></tr></table></figure><h3 id="案例-数组去除指定重复值-要求去掉重复值-0"><a class="markdownIt-Anchor" href="#案例-数组去除指定重复值-要求去掉重复值-0">#</a> 案例 数组去除指定重复值 要求去掉重复值 0</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> akk = [<span class="hljs-number">66</span>,<span class="hljs-number">33</span>,<span class="hljs-number">88</span>,<span class="hljs-number">0</span>,<span class="hljs-number">55</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">56</span>,<span class="hljs-number">96</span>,<span class="hljs-number">58</span>,<span class="hljs-number">96</span>,<span class="hljs-number">36</span>,<span class="hljs-number">0</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">all</span> = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span> ;k &lt; akk.<span class="hljs-built_in">length</span> ; k++) &#123;<br>    <span class="hljs-keyword">if</span> (akk[k] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">all</span>[<span class="hljs-built_in">all</span>.<span class="hljs-built_in">length</span>] = akk[k]<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">all</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211122116695.webp" alt=""></p><h3 id="案例-将数组翻转倒序显示"><a class="markdownIt-Anchor" href="#案例-将数组翻转倒序显示">#</a> 案例 将数组翻转 / 倒序显示</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> akk = [<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>]<br><span class="hljs-keyword">var</span> amm = []  <span class="hljs-comment">//声明一个空数组</span><br><span class="hljs-keyword">var</span> k1 = akk.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span> ;k &lt; akk.<span class="hljs-built_in">length</span>;k++) &#123;<br>    amm[k] = akk[k1]<br>    k1--;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(amm)<br></code></pre></td></tr></table></figure><p>翻转另一种写法 简练</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> akk = [<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>,<span class="hljs-string">&#x27;李&#x27;</span>,<span class="hljs-string">&#x27;铠甲勇士&#x27;</span>,<span class="hljs-string">&#x27;豌豆射手&#x27;</span>]<br><span class="hljs-keyword">var</span> ann = [] <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> l = akk.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>;l &gt;= <span class="hljs-number">0</span>;l--) &#123;<br>    ann[ann.<span class="hljs-built_in">length</span>] = akk[l]<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ann)<br></code></pre></td></tr></table></figure><p>结果:<img src="https://image.dcaoao.com/image/202211122115609.webp" alt=""></p><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序">#</a> 冒泡排序</h3><p>冒泡排序是指将数值从大到小 / 从小到大排列起来</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> amm = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> m = <span class="hljs-number">0</span>;m &lt;= amm.<span class="hljs-built_in">length</span> <span class="hljs-number">-1</span> ;m++) &#123;  <span class="hljs-comment">//外层的循环需要比数组的个数少一次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> m1 = <span class="hljs-number">0</span> ;m1 &lt;= amm.<span class="hljs-built_in">length</span> - m - <span class="hljs-number">1</span>;m1++) &#123;  <span class="hljs-comment">//内层的循环数依次递减并减1</span><br>        <span class="hljs-comment">//开始交换两个变量值</span><br>        <span class="hljs-keyword">if</span> (amm[m1] &lt; amm[m1 + <span class="hljs-number">1</span>]) &#123;  <span class="hljs-comment">//这里控制是从小到大还是从大到小</span><br>            <span class="hljs-keyword">var</span> temp = amm[m1]<br>            amm[m1] = amm[m1 + <span class="hljs-number">1</span>]<br>            amm[m1 + <span class="hljs-number">1</span>] = temp<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(amm)<br></code></pre></td></tr></table></figure><h2 id="函数的使用"><a class="markdownIt-Anchor" href="#函数的使用">#</a> 函数的使用</h2><p>函数的封装将一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的接口<br>函数的使用分为两步 声明函数与调用函数、<br>作用：重复执行的代码可重复利用，减少重复率</p><p>使用步骤:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.声明函数<br>         <span class="hljs-keyword">function</span> 函数名 ( ) &#123;<br>            条件表达式<br>         &#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.调用函数 格式 ： 函数名（）<br></code></pre></td></tr></table></figure><h3 id="函数的参数"><a class="markdownIt-Anchor" href="#函数的参数">#</a> 函数的参数</h3><p>函数的参数分为形参与实参</p><p>原理 实参的值会传递给形参，然后进行函数调用输出，实参可以任意改变<br>作用：在函数内部不固定，可以通过参数在调用函数的时候将不同的值传递进去<br>参数与参数之间需要用逗号与空格隔开</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-comment">// 1.先声明函数  格式：function can (形参)</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">can</span> (<span class="hljs-params">say</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (say)<br> &#125;<br><br> <span class="hljs-comment">//2.调用函数 格式 can（&#x27;实参&#x27;）  </span><br> can (<span class="hljs-string">&#x27;66&#x27;</span>)<br><br><br> <span class="hljs-comment">//函数案例 求两个数的累加和</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Sum</span> (<span class="hljs-params">one1, one2</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(one1 + one2)<br> &#125;<br> <span class="hljs-built_in">Sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br><br><br><br><span class="hljs-comment">//函数案例 求两个数之间的累加和</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span> (<span class="hljs-params">start, end</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = start;a &lt;= end;a++) &#123;<br>        <span class="hljs-built_in">sum</span> += a<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>)<br> &#125;<br> getSum(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment">//求1到100之间的累加和</span><br> getSum(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)   <span class="hljs-comment">//求1到10之间的</span><br></code></pre></td></tr></table></figure><p>如果形参与实参个数不相等<br>实参 = 形参  结果正常输出<br>实参 &gt; 形参  只输出形参的数量<br>实参 &lt; 形参  缺少的形参为 undefined<br> 所以，两者数量要尽量匹配</p><h3 id="函数的返回值"><a class="markdownIt-Anchor" href="#函数的返回值">#</a> 函数的返回值</h3><p>上面缩写的函数封装，条件表达式都写在了封装内，这样是不合适的，需要将封装后的函数结果，直接输出到函数的调用处，方便取值使用<br>这里使用  <code>return</code>  只要函数遇到它，就会将函数的结果，返回给函数的调用者</p><p>案例:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">he</span> (<span class="hljs-params">he1, he2</span>) &#123;<br>   <span class="hljs-keyword">return</span> he1 + he2;  <span class="hljs-comment">//使用return</span><br>&#125;<br><span class="hljs-comment">//使用return后,封装的函数会将结果输出到调用处</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(he(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">//输出结果为3</span><br></code></pre></td></tr></table></figure><p>需要注意的是 return 也有结束的含义，在其后面的代码将不会被执行，并且返回其后面的值<br> return 只能返回一个值，如果有多个值，则以最后一个值为准，如果雀食要返回多个值，可以使用数组<br>如果函数内没有 return 则返回的是空值</p><h3 id="1113笔记"><a class="markdownIt-Anchor" href="#1113笔记">#</a> 11.13 笔记</h3><h3 id="案例-return返回多个值-数组-求两个数的加减乘除结果"><a class="markdownIt-Anchor" href="#案例-return返回多个值-数组-求两个数的加减乘除结果">#</a> 案例 return 返回多个值 数组  求两个数的加减乘除结果</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">day1</span> (<span class="hljs-params">num1,num2</span>) &#123;<br>   <span class="hljs-keyword">return</span> [num1 + num2,num1 - num2,num1 * num2,num1 / num2]<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = day1(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">day</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211132023679.webp" alt=""></p><p>可以直接返回数组，数组默认被看做为一个值</p><h3 id="函数案例-任意两个数的算数运算"><a class="markdownIt-Anchor" href="#函数案例-任意两个数的算数运算">#</a> 函数案例 任意两个数的算数运算</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function mya (mya1,mya2) &#123;<br>            return <span class="hljs-built_in">Number</span>(mya1) + <span class="hljs-built_in">Number</span>(mya2)<br>         &#125;<br>         <span class="hljs-selector-tag">var</span> mya1 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入第一个数&#x27;</span>)<br>         <span class="hljs-selector-tag">var</span> mya2 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入第二个数&#x27;</span>)<br>         <span class="hljs-built_in">alert</span>(<span class="hljs-built_in">mya</span>(mya1,mya2)) <br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211132027902.gif" alt=""></p><h3 id="函数案例-输入任意两个数求最大值弹出运算结果"><a class="markdownIt-Anchor" href="#函数案例-输入任意两个数求最大值弹出运算结果">#</a> 函数案例 输入任意两个数，求最大值，弹出运算结果</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myb</span> (<span class="hljs-params">myb1,myb2</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (myb1 &gt; myb2) &#123;<br>        <span class="hljs-built_in">max</span> = myb1<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">max</span> = myb2<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span><br>&#125;<br>alert(myb(prompt(<span class="hljs-string">&#x27;请输入第一个值&#x27;</span>),prompt(<span class="hljs-string">&#x27;请输入第二个值&#x27;</span>)))<br><br><span class="hljs-comment">//另一种写法</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">myb</span>(<span class="hljs-params">myb1, myb2</span>) &#123;<br>         <span class="hljs-keyword">if</span> (myb1 &gt; myb2) &#123;<br>            <span class="hljs-keyword">return</span> myb1;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> myb2<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> myb1 = prompt(<span class="hljs-string">&#x27;请输入第一个数&#x27;</span>)<br>      <span class="hljs-keyword">var</span> myb2 = prompt(<span class="hljs-string">&#x27;请输入第二个数&#x27;</span>)<br>      alert(myb(myb1, myb2))<br></code></pre></td></tr></table></figure><h3 id="函数案例-输入三个不同数字的最大值"><a class="markdownIt-Anchor" href="#函数案例-输入三个不同数字的最大值">#</a> 函数案例 输入三个不同数字的最大值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myc</span>(<span class="hljs-params">myc1</span>) &#123;<br>   <span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = myc1[<span class="hljs-number">0</span>] <span class="hljs-comment">//声明一个数组第一位的值</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; myc1.<span class="hljs-built_in">length</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (myc1[i] &gt; <span class="hljs-built_in">max</span>) &#123;  <span class="hljs-comment">//如果数组值大于了数组第一位,则将大于的值赋值于自身,然后循环下去,第二位,第三位...</span><br>         <span class="hljs-built_in">max</span> = myc1[i]<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span><br>&#125;<br><span class="hljs-keyword">var</span> ra = myc([prompt(<span class="hljs-string">&#x27;请输入第一个数&#x27;</span>), prompt(<span class="hljs-string">&#x27;请输入第二个数&#x27;</span>), prompt(<span class="hljs-string">&#x27;请输入第三个数&#x27;</span>)])  <span class="hljs-comment">//prompt来进行取值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ra)<br></code></pre></td></tr></table></figure><h3 id="函数对象-arguments-的使用"><a class="markdownIt-Anchor" href="#函数对象-arguments-的使用">#</a> 函数对象  <code>arguments</code>  的使用</h3><p>1. <code>arguments</code>  为函数内置的对象，只有 <code>函数</code> 才可以使用<br> 2. 使用  <code>arguments</code>  存储了所有传递过来的实参，适用于 <code>不确定到底多少个实参</code> 时使用<br> 3. 使用 <code>伪数组</code> 的方式进行存储，可以使用 <code>arguments[0]</code>  之类来进行取值使用<br> 4. 也具有 <code>length</code>  属性，但并不是真正意义上的数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myd</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments)  <span class="hljs-comment">//输出实参值</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments.<span class="hljs-built_in">length</span>)  <span class="hljs-comment">//可输出数组长度/个数</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arguments[<span class="hljs-number">3</span>])<br>&#125;<br>myd(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>结果:<br><img src="https://image.dcaoao.com/image/202211132047866.webp" alt=""></p><h3 id="arguments-案例-求任意个数数值的最大值"><a class="markdownIt-Anchor" href="#arguments-案例-求任意个数数值的最大值">#</a>  <code>arguments</code>  案例 求任意个数数值的最大值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mye</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">var</span> myemax = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (myemax &lt; <span class="hljs-variable language_">arguments</span>[i]) &#123;<br>         myemax = <span class="hljs-variable language_">arguments</span>[i]<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> myemax<br>&#125;<br><br><span class="hljs-keyword">var</span> saymye = <span class="hljs-title function_">mye</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(saymye)<br></code></pre></td></tr></table></figure><h3 id="案例-利用函数翻转任意数组"><a class="markdownIt-Anchor" href="#案例-利用函数翻转任意数组">#</a> 案例 利用函数翻转任意数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">array</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">var</span> yarra = [] <span class="hljs-comment">//空数组</span><br>   <span class="hljs-keyword">var</span> arri = arguments.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>  <span class="hljs-comment">//声明要翻转数组的计数器</span><br>   <span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arri; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      yarra[yarra.<span class="hljs-built_in">length</span>] = arguments[i]  <span class="hljs-comment">//声明数组的第0个变量等于旧数组的最后一个变量</span><br>      k++<br>   &#125;<br>   <span class="hljs-keyword">return</span> yarra<br>&#125;<br><span class="hljs-keyword">var</span> sayarray = <span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sayarray)<br></code></pre></td></tr></table></figure><h3 id="案例-函数判断是否闰年"><a class="markdownIt-Anchor" href="#案例-函数判断是否闰年">#</a> 案例 函数判断是否闰年</h3><p>判断闰年的条件是：能被 4 整除，与不能被 100 整除，或者能被 400 整除<br>这里使用逻辑与运算 一假全假，全真为真    和 逻辑或运算 一真全真 全假则假</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">year</span>(<span class="hljs-params">years</span>) &#123;<br>   <span class="hljs-keyword">var</span> falses = <span class="hljs-literal">false</span><br>      <span class="hljs-comment">//能被4整除与整除100不等于0,或者除以400为0</span><br>   <span class="hljs-keyword">if</span> (years % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; years % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || years % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果为真,则执行if内语句,如果为假,则不执行,导致falses = false</span><br>      falses = <span class="hljs-literal">true</span><br>   &#125;<br>   <span class="hljs-keyword">return</span> falses<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">year</span>(<span class="hljs-number">2000</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">year</span>(<span class="hljs-number">1999</span>))  <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="函数可以互相调用"><a class="markdownIt-Anchor" href="#函数可以互相调用">#</a> 函数可以互相调用</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arcade">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">//2.输出fn1内的 1</span><br>         fn2()    <span class="hljs-comment">//3.然后去找fn2函数 输出fn2喊数内的 2和666</span><br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">//4.然后回到fn1函数内 返回3</span><br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<br>         <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;666&#x27;</span>)<br>      &#125;<br>      fn1()<span class="hljs-comment">//1.先回去找fn1函数</span><br><br><br><span class="hljs-comment">//判断是否闰年</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">year</span>(<span class="hljs-params">years</span>) &#123;<br>         <span class="hljs-keyword">var</span> falses = <span class="hljs-literal">false</span><br>            <span class="hljs-comment">//能被4整除与整除100不等于0,或者除以400为0</span><br>         <span class="hljs-keyword">if</span> (years % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; years % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || years % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果为真,则执行if内语句,如果为假,则不执行,导致falses = false</span><br>            falses = <span class="hljs-literal">true</span><br>         &#125;<br>         <span class="hljs-keyword">return</span> falses<br>      &#125;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">year</span>(<span class="hljs-number">2000</span>))  <span class="hljs-comment">//true</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">year</span>(<span class="hljs-number">1999</span>))  <span class="hljs-comment">//false</span><br><br>      <span class="hljs-comment">//函数互相调用案例 输入年份,通过是否闰年来告知2月份天数</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">backDay</span> (<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-keyword">var</span> backyear = prompt(<span class="hljs-string">&#x27;请输入年份&#x27;</span>)<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">year</span>(backyear)) &#123;  <span class="hljs-comment">//调用上方判断闰平年函数,必须要加小括号在内</span><br>            alert(<span class="hljs-string">&#x27;当前年份为闰年,2月天数为29天&#x27;</span>)<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            alert(<span class="hljs-string">&#x27;当前年份为平年,2月天数为28天&#x27;</span>)<br>         &#125;<br>      &#125;<br>      backDay()<br>      <br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211152126085.gif" alt=""></p><h3 id="函数表达式"><a class="markdownIt-Anchor" href="#函数表达式">#</a> 函数表达式</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//函数表达式案例</span><br><span class="hljs-keyword">var</span> hanshu = <span class="hljs-keyword">function</span>(<span class="hljs-params">hanshu1</span>)&#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(hanshu1)<br>&#125;<br><br><span class="hljs-comment">//输出 hanshu 内的值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(hanshu(<span class="hljs-number">666</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="js的作用域"><a class="markdownIt-Anchor" href="#js的作用域">#</a> JS 的作用域</h2><p>作用域的作用是代码名字在某个范围内起作用和效果，目的是提高程序的可靠性，减少命名冲突<br> s 作用域分为全局作用域和局部作用域<br>全局作用域：整个 script 标签内 或者是一个单独的 js 文件</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span> <span class="hljs-comment">//这就是全局作用域</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)  <span class="hljs-comment">//输出1</span><br></code></pre></td></tr></table></figure><p>局部作用域：在函数内部就是局部作用域 整个代码的名字只在函数内部起效果<br>函数的形参也可以看做是局部变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> fn () &#123;<br>       <span class="hljs-regexp">//</span>局部作用域<br>       var num = <span class="hljs-number">2</span> <br>       <br>       console.log(num) <span class="hljs-regexp">//</span>输出<span class="hljs-number">2</span>  只能在函数内部调用<br><br>       var num3 = <span class="hljs-number">3</span>   <span class="hljs-regexp">//</span>局部作用域 只能在函数内部调用<br>       num5 = <span class="hljs-number">5</span><br>       <span class="hljs-regexp">//</span>需要注意的是，在函数内部，没有声明，直接赋值的函数，也属于全局变量<br>   &#125;<br>   num5 = <span class="hljs-number">5</span><br>   <span class="hljs-regexp">//</span>console.log(num3)  <span class="hljs-regexp">//</span>因为在函数内部调用局部作用域,会报错<br>   console.log(num5)  <span class="hljs-regexp">//</span>输出<span class="hljs-number">5</span> 因为函数内部,没有声明,直接赋值的函数,属于全局变量<br></code></pre></td></tr></table></figure><p>#### 作用域 小结 ####<br>全局变量: <code>任何地方地方</code> 都可以使用，但是只有在浏览器关闭时才会被销毁，比较 <code>占内存</code> <br>局部变量：只能在 <code>函数内部</code> 使用 代码执行时会被初始化，代码结束后会被销毁，更加 <code>节省内存</code></p><h3 id="作用域链-就近原则"><a class="markdownIt-Anchor" href="#作用域链-就近原则">#</a> 作用域链 就近原则</h3><p>内部函数可以访问外部函数的值，内部函数寻找值，先去上一级寻找是否有符合条件的值，如果没有，则继续向上一级取值<br>直到找到符合条件的值为止</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fnn</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (num)<br>        <span class="hljs-keyword">return</span> num<br>    &#125;<br>    fnn()<br>&#125;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">666</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fn())  <span class="hljs-comment">//因为就近原则,所以还是输出 1</span><br></code></pre></td></tr></table></figure><h2 id="js预解析"><a class="markdownIt-Anchor" href="#js预解析">#</a> JS 预解析</h2><p>js 引擎分为两步运行 js 预解析 代码执行<br> <code>预解析</code> ：预解析会将 js 内的所有 var 和 function 提升到当前作用域的最前面<br>比如说  <code>var = num</code> <br> <code>function aum () &#123;&#125;</code> <br> 然后就开始进行代码执行，按照书写顺序从上到下执行</p><p>预解析分为 变量预解析 <code>(变量提升)</code>  和 函数预解析 <code>(函数提升)</code> <br> 1. 变量提升：把所有的 <code>变量声明</code> 提升到当前作用域的最前面<br> 2. 函数提升：把所有 <code>函数的声明</code> 提升到当前作用域的最前面<br> 3. 然后赋值操作 <code>留在原来的位置</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)  <span class="hljs-comment">//输出空值 undefined</span><br>        <span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span><br>        <span class="hljs-comment">//相当于执行了</span><br>        <span class="hljs-keyword">var</span> num;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)<br>        num = <span class="hljs-number">1</span><br><br><br>        say()   <span class="hljs-comment">//会报错 ,没有这个函数</span><br>        <span class="hljs-keyword">var</span> say = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;说&#x27;</span>)<br>        &#125;<br><br>        <span class="hljs-comment">//相当于执行了</span><br>        <span class="hljs-keyword">var</span> say;<br>        say()<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;说&#x27;</span>)<br>        &#125;<br><br><br><br>        <span class="hljs-comment">//预解析案例1</span><br>        <span class="hljs-keyword">var</span> my1 = <span class="hljs-number">10</span><br>        fun();<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span><br>        &#125;<br><br>        <span class="hljs-comment">// 相当于执行了</span><br>        <span class="hljs-keyword">var</span> my1;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> num;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num)<br>            num = <span class="hljs-number">20</span><br>        &#125;<br><br>        fun();  <span class="hljs-comment">//输出空值 undefined</span><br>        my1 = <span class="hljs-number">10</span><br><br><br>        <span class="hljs-comment">//预解析案例2</span><br>        <span class="hljs-keyword">var</span> my2 = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my2)<br>            <span class="hljs-keyword">var</span> my2 = <span class="hljs-number">20</span>;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my2)<br>        &#125;<br>        fn()<br><br>        <span class="hljs-comment">//相当于执行了</span><br>        <span class="hljs-keyword">var</span> my2;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> my2<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my2)  <span class="hljs-comment">//输出空值 undefined</span><br>            my2 = <span class="hljs-number">20</span>;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my2)  <span class="hljs-comment">//作用域链,就近原则, 输出20</span><br><br>        &#125;<br>        fn()<br>        my2 = <span class="hljs-number">10</span><br><br><br>        <span class="hljs-comment">//预解析案例3</span><br>        fn1();<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c)<br>        &#125;<br><br>        <span class="hljs-comment">//相当于执行了</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;   <span class="hljs-comment">//函数提升</span><br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">9</span><br>            b = <span class="hljs-number">9</span><br>            c = <span class="hljs-number">9</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)  <span class="hljs-comment">//9</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)  <span class="hljs-comment">//9</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c)  <span class="hljs-comment">//9</span><br>        &#125;<br><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)  <span class="hljs-comment">//报错  </span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)  <span class="hljs-comment">//9</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c)  <span class="hljs-comment">//9</span><br>        fn1();<br></code></pre></td></tr></table></figure><h2 id="创建对象"><a class="markdownIt-Anchor" href="#创建对象">#</a> 创建对象</h2><p>创建函数有两种方法:  <code>利用对象字面量创建对象&#123;&#125;</code>    <code>使用 new Object();</code></p><p>利用对象字面量创建对象:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">uname</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对象里的属性或者方法采用键值对的方法   键 属性名：属性值  值   值可以是任何数据，布尔，字符串，数值<br>多个属性使用逗号分隔，不然会报错</p><p>使用 new Object () 创建对象</p><p>利用等号赋值，使用分号分隔结束</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> Object();   <span class="hljs-comment">//创建一个空对象</span><br>        obj1.uname = <span class="hljs-string">&#x27;鸣人&#x27;</span>;<br>        obj1.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>        obj1.age = <span class="hljs-string">&#x27;19&#x27;</span><br>        obj1.skill = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;影分身&#x27;</span>)<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;瞬闪&#x27;</span>)<br>        &#125;<br></code></pre></td></tr></table></figure><p>调用对象里的属性</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//第一种方法</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;姓名:&#x27;</span> + obj.uname)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;年龄:&#x27;</span> + obj.age)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;性别:&#x27;</span> + obj.sex)<br><span class="hljs-comment">//第二种方法</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;姓名:&#x27;</span> + obj[<span class="hljs-string">&#x27;uname&#x27;</span>])<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211152147923.webp" alt=""></p><p>调用对象里的方法  对象名。方法名 ()    方法可以看做就是函数</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">obj.sayHi<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><p>总结<br>变量：单独赋值，单独使用<br>属性：对象里边的变量称为属性，不需要声明<br>函数：单独存在，通过 函数名 () 来调用<br>方法：对象里面的函数称为方法，不需要声明  对象名。方法名 ()  来调用</p><h3 id="创建对象练习"><a class="markdownIt-Anchor" href="#创建对象练习">#</a> 创建对象练习</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> dog = &#123;<br>    name:<span class="hljs-string">&#x27;可可&#x27;</span>,<br>    type:<span class="hljs-string">&#x27;阿拉斯加犬&#x27;</span>,<br>    age:<span class="hljs-string">&#x27;5岁&#x27;</span>,<br>    <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;棕红色&#x27;</span>,<br>    skill:<span class="hljs-built_in">function</span>() &#123;<br>        console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;汪汪汪&#x27;</span>)<br>        console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;演电影&#x27;</span>)<br>    &#125;<br>&#125;<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;姓名:&#x27;</span> + dog<span class="hljs-selector-class">.name</span> +<span class="hljs-string">&#x27; 品种:&#x27;</span> +  dog<span class="hljs-selector-class">.type</span> + <span class="hljs-string">&#x27; 年龄:&#x27;</span> + dog<span class="hljs-selector-class">.age</span> +<span class="hljs-string">&#x27; 颜色:&#x27;</span> + dog<span class="hljs-selector-class">.color</span> )<br>dog<span class="hljs-selector-class">.skill</span>()<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211152149890.webp" alt=""></p><h2 id="构造函数创建对象"><a class="markdownIt-Anchor" href="#构造函数创建对象">#</a> 构造函数创建对象</h2><p>创建构造函数：格式</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">//构造函数名字首字母要大写</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.属性 = 值;<br>            <span class="hljs-keyword">this</span>.方法 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>调用：调用构造函数必须使用 new，而且不需要 return</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type"></span>构造函数名()<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Four</span> (<span class="hljs-params">uname,age,sex</span>) &#123;<br>    this.uname = uname<br>    this.age = age<br>    this.sex = sex<br>    this.sing = <span class="hljs-keyword">function</span>(<span class="hljs-params">music</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(music)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> san = <span class="hljs-keyword">new</span> Four(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>)  <span class="hljs-comment">//使用声明的方式生成函数</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(san.uname)  <span class="hljs-comment">//取声明的函数内的值  输出正三</span><br>san.sing (<span class="hljs-string">&#x27;大风车&#x27;</span>)  <span class="hljs-comment">//调用构造函数内的方法</span><br><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">typeof</span>(san))  <span class="hljs-comment">//返回object</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">new</span> Four(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;男&#x27;</span>))<br><br><br><span class="hljs-comment">//构造函数案例</span><br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">Wang</span>(<span class="hljs-params">name,xue,xing</span>) &#123;<br>    this.name = name<br>    this.xue = xue<br>    this.xing = xing<br>    this.gong = <span class="hljs-keyword">function</span> (<span class="hljs-params">gong</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(gong)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> lianpo = <span class="hljs-keyword">new</span> Wang(<span class="hljs-string">&#x27;廉颇&#x27;</span>,<span class="hljs-string">&#x27;500血&#x27;</span>,<span class="hljs-string">&#x27;力量型&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(lianpo)<br>lianpo.gong(<span class="hljs-string">&#x27;近战&#x27;</span>)<br><br><span class="hljs-keyword">var</span> houyi = <span class="hljs-keyword">new</span> Wang(<span class="hljs-string">&#x27;后羿&#x27;</span>,<span class="hljs-string">&#x27;100血&#x27;</span>,<span class="hljs-string">&#x27;射手型&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(houyi)<br>houyi.gong(<span class="hljs-string">&#x27;远程&#x27;</span>)  <br></code></pre></td></tr></table></figure><p name:="" 廉颇,="" xue:="" 500血,="" xing:="" 力量型="">1. 构造函数 ：泛指某一大类 类似 java 里的 class<br>2. 对象： 特指 是一个具体的事物  廉颇 ==</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> lianpo = <span class="hljs-keyword">new</span> Wang(<span class="hljs-string">&#x27;廉颇&#x27;</span>,<span class="hljs-string">&#x27;500血&#x27;</span>,<span class="hljs-string">&#x27;力量型&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(lianpo)<br></code></pre></td></tr></table></figure><p>3. 利用构造函数创建对象的过程称为对象的实例化</p><p>关于 new 调用构造函数 执行的过程<br> 1.new 构造函数 可以在内存中创建一个空的对象<br> 2.this 就会指向刚才创建的空对象<br> 3. 执行构造函数里的代码 给这个空对象添加属性和方法<br> 4. 然后即可返回这个对象，所以不需要 return</p><h2 id="for-in循环遍历对象"><a class="markdownIt-Anchor" href="#for-in循环遍历对象">#</a> for in 循环遍历对象</h2><p>首先创建一个对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade">        <span class="hljs-keyword">var</span> my = &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;名字&#x27;</span>,<br>            <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span>,<br>            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;未知&#x27;</span>,<br>            <span class="hljs-attr">fn</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br>            &#125;<br>        &#125;<br><br><br><span class="hljs-comment">//平常输出对象内的属性值</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my.name)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my.age)<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my.sex)<br>        my.fn()<br><br><span class="hljs-comment">//使用for in 遍历 my 对象  但是 很少用来遍历方法 因为遍历方法会输出很奇怪,如下图</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k in my) &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k)    <span class="hljs-comment">//单独输出k,得到的是变量内的属性名</span><br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my[k])    <span class="hljs-comment">//对象名[变量名]  得到的是变量内的属性值</span><br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182249927.webp" alt=""></p><p>小结<br>对象可以使代码结构更清晰<br>对象复杂数据类型是 object<br> 本质：对象就是一组无序相关属性的方法的集合<br>构造函数泛指某一大类，苹果，不管红苹果还是绿苹果<br>对象实例特指某一事物 比如这个苹果，这个人<br> for in 语句用于遍历对象的属性，进行循环操作</p><h2 id="js对象"><a class="markdownIt-Anchor" href="#js对象">#</a> JS 对象</h2><p>JS 中，对象分为三种：自定义对象，内置对象，浏览器对象</p><h3 id="内置对象"><a class="markdownIt-Anchor" href="#内置对象">#</a> 内置对象</h3><p>内置对象指 JS 语言自带的一些对象，供开发者使用，提供了一些基本而且必要的功能 (属性和方法)<br> 内置对象的最大优点就是快速开发<br>提供了多个对象 :Math Date Array String<br><a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a><br> 内置对象调用时不需要 new 直接使用属性和方法即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a16 = Math.max(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)  //求最大值<br>       <span class="hljs-attribute">console</span>.log(a16)<br></code></pre></td></tr></table></figure><p>封装数学对象 求 PI   最大值 最小值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> myMate = &#123;<br>           <span class="hljs-attr">PI</span>: <span class="hljs-number">3.1415929</span>,<br>           <span class="hljs-attr">max</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = arguments[<span class="hljs-number">0</span>]<br>               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>; a &lt; arguments.<span class="hljs-built_in">length</span>; a++) &#123;<br>                   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">max</span> &lt; arguments[a]) &#123;<br>                       <span class="hljs-built_in">max</span> = arguments[a]<br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span><br>           &#125;,<br>           <span class="hljs-attr">min</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>               <span class="hljs-keyword">var</span> <span class="hljs-built_in">min</span> = arguments[<span class="hljs-number">0</span>]<br>               <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>; a &lt; arguments.<span class="hljs-built_in">length</span>; a++) &#123;<br>                   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">min</span> &gt; arguments[a]) &#123;<br>                       <span class="hljs-built_in">min</span> = arguments[a]<br>                   &#125;<br>               &#125;<br>               <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span><br>           &#125;,<br><br>       &#125;<br><br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMate.<span class="hljs-literal">PI</span>)<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMate.<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(myMate.<span class="hljs-built_in">min</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>输出结果:<br><img src="https://image.dcaoao.com/image/202211182252776.webp" alt=""></p><h3 id="取绝对值"><a class="markdownIt-Anchor" href="#取绝对值">#</a> 取绝对值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-number">1</span>))  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-number">-1</span>))  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;-1&#x27;</span>))  <span class="hljs-comment">//隐式转换，会转变为数字型绝对值1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">abs</span>(<span class="hljs-string">&#x27;这是嘛&#x27;</span>))  <span class="hljs-comment">//无法转换 NaN</span><br></code></pre></td></tr></table></figure><h3 id="向下取整"><a class="markdownIt-Anchor" href="#向下取整">#</a> 向下取整</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">floor</span>(<span class="hljs-number">1.1</span>))   <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">floor</span>(<span class="hljs-number">2.9</span>))   <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="向上取整"><a class="markdownIt-Anchor" href="#向上取整">#</a> 向上取整</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.1</span>)) <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.9</span>)) <span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><h3 id="四舍五入"><a class="markdownIt-Anchor" href="#四舍五入">#</a> 四舍五入</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.1</span>))  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.5</span>))  <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">-1.5</span>))  <span class="hljs-comment">//-1  需要注意的是负值 5 会想向大值取值</span><br></code></pre></td></tr></table></figure><h3 id="案例-去两数之间的随机整数"><a class="markdownIt-Anchor" href="#案例-去两数之间的随机整数">#</a> 案例 去两数之间的随机整数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomInt</span>(<span class="hljs-params">min, max</span>) &#123;  <span class="hljs-comment">//封装函数,给予开始与结束值</span><br>    <span class="hljs-built_in">min</span> = Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">min</span>);  <span class="hljs-comment">//使用构造函数,并将两个值进行取整 最小值向下取整</span><br>    <span class="hljs-built_in">max</span> = Math.<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">max</span>); <span class="hljs-comment">//最大值向上取整</span><br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span>)) + <span class="hljs-built_in">min</span>; <span class="hljs-comment">//不含最大值，含最小值</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getRandomInt(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><h3 id="案例-随机点名器"><a class="markdownIt-Anchor" href="#案例-随机点名器">#</a> 案例 随机点名器</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> banji = [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;李六&#x27;</span>,<span class="hljs-string">&#x27;六七&#x27;</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(banji[getRandomInt(<span class="hljs-number">0</span>,banji.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>)])<br></code></pre></td></tr></table></figure><h3 id="案例-踩数字"><a class="markdownIt-Anchor" href="#案例-踩数字">#</a> 案例 踩数字</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> shuzi = getRandomInt(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(shuzi)<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <span class="hljs-comment">//死循环</span><br>    <span class="hljs-keyword">var</span> cai = prompt(<span class="hljs-string">&#x27;请输入您猜测的数字,在1-10之间&#x27;</span>)<br>    <span class="hljs-keyword">if</span> (shuzi &gt; cai) &#123;<br>        alert(<span class="hljs-string">&#x27;猜小了&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shuzi &lt; cai) &#123;<br>        alert(<span class="hljs-string">&#x27;猜大了&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        alert(<span class="hljs-string">&#x27;刚刚好&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//满足条件 退出循环</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="案例-踩数字2"><a class="markdownIt-Anchor" href="#案例-踩数字2">#</a> 案例 踩数字 2</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><br><span class="hljs-comment">//要求用户猜出1-50之间的数字 只能猜10次</span><br><span class="hljs-keyword">var</span> shuzi50 = getRandomInt(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(shuzi50)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span> ;i++) &#123; <br>    <span class="hljs-comment">//console.log(i)</span><br>    <span class="hljs-keyword">var</span> shengyu =   <span class="hljs-built_in">Number</span>(<span class="hljs-number">11</span>) - <span class="hljs-built_in">Number</span>(i)  <span class="hljs-comment">//获取剩余循环次数</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;您还有&#x27;</span> + shengyu +  <span class="hljs-string">&#x27;次机会&#x27;</span>)<br>    <span class="hljs-keyword">var</span> cai = prompt(<span class="hljs-string">&#x27;请输入您猜测的数字,在1-10之间&#x27;</span> + <span class="hljs-string">&#x27;\n&#x27;</span> + <span class="hljs-string">&#x27;您还有&#x27;</span> + shengyu +  <span class="hljs-string">&#x27;次机会&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">10</span>) &#123;  <span class="hljs-comment">//限定循环十次就退出</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (shuzi50 &gt; cai) &#123;<br>        alert(<span class="hljs-string">&#x27;猜小了&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shuzi50 &lt; cai) &#123;<br>        alert(<span class="hljs-string">&#x27;猜大了&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        alert(<span class="hljs-string">&#x27;刚刚好&#x27;</span>)<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//满足条件 退出循环</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="date-日期对象"><a class="markdownIt-Anchor" href="#date-日期对象">#</a> Date 日期对象</h2><p>输出时间使用 new Date 对象，</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();  <span class="hljs-comment">//当前时间</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time)<br><br><span class="hljs-keyword">var</span> time2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019-10-1 8:8:8&#x27;</span>);  <span class="hljs-comment">//输出这个时间</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time2)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182307533.webp" alt=""><br>日期对象的使用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> time3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getFullYear())  <span class="hljs-comment">//返回日期当前年份</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getMonth())  <span class="hljs-comment">//返回日期当前月份当前是11月份 会返回10 因为从0开始的 0-11</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getMonth() + <span class="hljs-number">1</span>)  <span class="hljs-comment">//  直接+1即可正常获取月份</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getDate())  <span class="hljs-comment">// 获取号数 几号 </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getDay())  <span class="hljs-comment">// 获取周几 周一返回1 周六返回6 但周日返回0 </span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getHours())  <span class="hljs-comment">//时</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getMinutes())  <span class="hljs-comment">//分</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getSeconds())  <span class="hljs-comment">//秒</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182307174.webp" alt=""></p><p>返回当前时间案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade">    <span class="hljs-comment">//年</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span> = time3.getFullYear()<br>    <span class="hljs-comment">//月</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">month</span> = time3.getMonth()<br>    <span class="hljs-comment">//日</span><br>    <span class="hljs-keyword">var</span> data = time3.getDate()<br>    <span class="hljs-comment">//周几</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = time3.getDay()<br>    <span class="hljs-keyword">var</span> zhou = [<span class="hljs-string">&#x27;星期日&#x27;</span>,<span class="hljs-string">&#x27;星期一&#x27;</span>,<span class="hljs-string">&#x27;星期二&#x27;</span>,<span class="hljs-string">&#x27;星期三&#x27;</span>,<span class="hljs-string">&#x27;星期四&#x27;</span>,<span class="hljs-string">&#x27;星期五&#x27;</span>,<span class="hljs-string">&#x27;星期六&#x27;</span>]<br><br>    <span class="hljs-comment">//最后输出</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;当前时间为: &#x27;</span> + <span class="hljs-built_in">year</span> + <span class="hljs-string">&#x27;年&#x27;</span> + <span class="hljs-built_in">month</span> + <span class="hljs-string">&#x27;月&#x27;</span> + data + <span class="hljs-string">&#x27;日 &#x27;</span> + zhou[<span class="hljs-built_in">day</span>])<br><br><br><span class="hljs-comment">//输出时分秒</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">shijian</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> time3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>        <span class="hljs-keyword">var</span> s = time3.getHours()<br>        <span class="hljs-keyword">var</span> f = time3.getMinutes()<br>        <span class="hljs-keyword">var</span> m = time3.getSeconds()<br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span>) &#123;   <span class="hljs-comment">//使1 2 3 变为 01 02 03</span><br>            m = <span class="hljs-string">&#x27;0&#x27;</span> + m<br>        &#125;<br>        <span class="hljs-keyword">return</span> s  + <span class="hljs-string">&#x27;:&#x27;</span> + f + <span class="hljs-string">&#x27;:&#x27;</span> + m<br>    &#125;<br><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(shijian())<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182306998.webp" alt=""></p><p>获取时间戳  时间戳的意义是 1970 年 1 月 1 号至今过了多少毫秒数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.valueOf())  <span class="hljs-comment">//时间戳</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(time3.getTime())  <span class="hljs-comment">//时间戳</span><br><br><span class="hljs-comment">//简写</span><br><span class="hljs-keyword">var</span> date1 = +<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(date1)<br><span class="hljs-comment">//H5新增的</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>())<br></code></pre></td></tr></table></figure><p>倒计时案例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//倒计时案例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">time</span>) &#123;<br>    <span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()  <span class="hljs-comment">//获取当前时间戳</span><br>    <span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time)  <span class="hljs-comment">//获取用户输入的时间戳</span><br>    <span class="hljs-keyword">var</span> timeMiao = (inputTime - nowTime)  / <span class="hljs-number">1000</span>;   <span class="hljs-comment">//获取倒计时时间,并由毫秒转换为秒 </span><br>    <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">parseInt</span>(timeMiao / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>) <span class="hljs-comment">//天</span><br>    <span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(timeMiao / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>) <span class="hljs-comment">//时</span><br>    <span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(timeMiao / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>) <span class="hljs-comment">//分</span><br>    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(timeMiao % <span class="hljs-number">60</span>) <span class="hljs-comment">//秒</span><br>    <span class="hljs-keyword">return</span> d + <span class="hljs-string">&#x27;天&#x27;</span> + h + <span class="hljs-string">&#x27;时&#x27;</span> + m + <span class="hljs-string">&#x27;分&#x27;</span> + s + <span class="hljs-string">&#x27;秒&#x27;</span>  <span class="hljs-comment">//输出倒计时</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;2022-11-18 23:07:00&#x27;</span>))<br></code></pre></td></tr></table></figure><p>记录一下当前时间：1668783992332<br> 结果:<img src="https://image.dcaoao.com/image/202211182306813.webp" alt=""></p><h2 id="数组对象"><a class="markdownIt-Anchor" href="#数组对象">#</a> 数组对象</h2><h3 id="创建数组-2"><a class="markdownIt-Anchor" href="#创建数组-2">#</a> 创建数组</h3><p>1. 字面量创建数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr = <span class="hljs-selector-attr">[1, 2, 3]</span><br>console<span class="hljs-selector-class">.log</span>(arr<span class="hljs-selector-attr">[0]</span>)<br></code></pre></td></tr></table></figure><p>2.new Array () 创建数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() <span class="hljs-comment">//创建空数组</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">//创建长度为2的数组</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">//等价于 var arr1 = [2,3]</span><br></code></pre></td></tr></table></figure><h3 id="判断是否为数组"><a class="markdownIt-Anchor" href="#判断是否为数组">#</a> 判断是否为数组</h3><p>3.1 参数名 instanceof Array</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1 instanceof <span class="hljs-built_in">Array</span>)   <span class="hljs-comment">//如果是数组，则返回true，如果不是数组 则返回false</span><br></code></pre></td></tr></table></figure><p>3.2 Array.isArray (参数)</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.isArray(<span class="hljs-number">123</span>))  <span class="hljs-comment">//返回同上，返回true或者false</span><br></code></pre></td></tr></table></figure><h3 id="添加数组元素的方法"><a class="markdownIt-Anchor" href="#添加数组元素的方法">#</a> 添加数组元素的方法</h3><p>老办法:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr2 = <span class="hljs-selector-attr">[1, 2, 3, 4, 5]</span><br><span class="hljs-selector-tag">var</span> arr2<span class="hljs-selector-attr">[5]</span> = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>新方法:</p><h4 id="在末尾添加一个或者多个数组元素-push"><a class="markdownIt-Anchor" href="#在末尾添加一个或者多个数组元素-push">#</a> 在末尾添加一个或者多个数组元素 ：  <code>push() </code></h4><p>1.push 可以为数组尾部添加新的数组元素<br> 2.push () 括号内直接写新增的数组元素即可<br> 3.push 返回的结果是新数组的长度<br> 4. 原数组也会发生变化</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr2.<span class="hljs-built_in">push</span>(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;这啥啊名记不住&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2) <span class="hljs-comment">//输出数组12345678这啥啊名记不住</span><br><br>        <span class="hljs-comment">//push() 也有返回值</span><br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr2.<span class="hljs-built_in">push</span>(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;这啥啊名记不住&#x27;</span>))  <span class="hljs-comment">// 13  返回的是新数组的长度</span><br><br><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182311679.webp" alt=""></p><h4 id="在数组前方添加数组元素-使用-unshift-其他的与push相同"><a class="markdownIt-Anchor" href="#在数组前方添加数组元素-使用-unshift-其他的与push相同">#</a> 在数组前方添加数组元素 使用  <code>unshift()</code>   其他的与 <code>push()</code>  相同</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr3 = <span class="hljs-selector-attr">[1, 2, 3]</span><br>arr3<span class="hljs-selector-class">.unshift</span>(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;啊这样不就记住了&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(arr3)  <span class="hljs-comment">//返回数组 [4, 5, &#x27;啊这样不就记住了&#x27;, 1, 2, 3]</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182313896.webp" alt=""></p><h3 id="删除数组元素的方法"><a class="markdownIt-Anchor" href="#删除数组元素的方法">#</a> 删除数组元素的方法</h3><h4 id="删除数组末尾的数组元素-pop"><a class="markdownIt-Anchor" href="#删除数组末尾的数组元素-pop">#</a> 删除数组末尾的数组元素   <code>pop()</code></h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr5.<span class="hljs-built_in">pop</span>()  <span class="hljs-comment">//返回值为被删掉的值，每次只能删掉一个</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr5)   <span class="hljs-comment">//3会被删掉，只剩下1和2 </span><br></code></pre></td></tr></table></figure><h4 id="删除数组开头的数组元素-shift"><a class="markdownIt-Anchor" href="#删除数组开头的数组元素-shift">#</a> 删除数组开头的数组元素   <code>shift()</code></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr5 = <span class="hljs-selector-attr">[1, 2, 3]</span><br>arr5<span class="hljs-selector-class">.shift</span>()  <span class="hljs-comment">//返回值为被删掉的值，每次只能删掉一个</span><br>console<span class="hljs-selector-class">.log</span>(arr5)   <span class="hljs-comment">//1会被删掉，只剩下2和3</span><br></code></pre></td></tr></table></figure><h3 id="数组元素案例-筛选出小于2000的数值大于2000的删除"><a class="markdownIt-Anchor" href="#数组元素案例-筛选出小于2000的数值大于2000的删除">#</a> 数组元素案例 筛选出小于 2000 的数值，大于 2000 的删除</h3><p>核心思想：声明一个空数组，如果小于 2000, 则把这个数添加到新数组当中，使用 push 从尾部添加</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> shu = [<span class="hljs-number">1500</span>,<span class="hljs-number">1600</span>,<span class="hljs-number">1700</span>,<span class="hljs-number">1800</span>,<span class="hljs-number">1900</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">2100</span>,<span class="hljs-number">1300</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">Shu</span> = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt; shu.length;i++) &#123;<br>    <span class="hljs-keyword">if</span> (shu[i] &lt; <span class="hljs-number">2000</span>) &#123;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">Shu</span>.push(shu[i])<br>    &#125;<br>&#125;<br>console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Shu</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182315704.webp" alt=""></p><h3 id="翻转数组-reverse"><a class="markdownIt-Anchor" href="#翻转数组-reverse">#</a> 翻转数组  <code>reverse</code></h3><p>使用格式 数组名.reverse</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr6 =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr6</span>.reverse()<br><span class="hljs-attribute">console</span>.log(arr6)//[<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h3 id="数组排序简易版冒泡排序"><a class="markdownIt-Anchor" href="#数组排序简易版冒泡排序">#</a> 数组排序 (简易版冒泡排序)</h3><p>这个写法比较固定，记住即可</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr7 = [<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">66</span>,<span class="hljs-number">33</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">666</span>,<span class="hljs-number">8</span>]<br>arr7.<span class="hljs-built_in">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>) &#123;<br>    <span class="hljs-comment">// return a - b;  //升序</span><br>    <span class="hljs-keyword">return</span> b - a;  <span class="hljs-comment">//降序序</span><br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr7)<br></code></pre></td></tr></table></figure><h3 id="返回数组元素索引号查找指定数组元素的索引号"><a class="markdownIt-Anchor" href="#返回数组元素索引号查找指定数组元素的索引号">#</a> 返回数组元素索引号，查找指定数组元素的索引号</h3><p>格式:<br> <code>数组名.indexOf()</code>  从头查抄<br> <code>数组名.lastIndexOf()</code>  从尾部查抄<br>只返回第一个满足的值，如果没有找到则返回 - 1</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> arr8 = <span class="hljs-selector-attr">[1,2,3,4,5,6]</span><br>console<span class="hljs-selector-class">.log</span>(arr8<span class="hljs-selector-class">.indexOf</span>(<span class="hljs-number">6</span>),<span class="hljs-selector-attr">[0]</span>)  <span class="hljs-comment">//从前方第0个索引号的开始查找 返回 5   两者的起始位置参数都可以省略</span><br>console<span class="hljs-selector-class">.log</span>(arr8<span class="hljs-selector-class">.lastIndexOf</span>(<span class="hljs-number">1</span>),<span class="hljs-selector-attr">[5]</span>)  <span class="hljs-comment">//从后方索引号为5的开始查找 返回 1 </span><br></code></pre></td></tr></table></figure><h3 id="案例-筛选重复值"><a class="markdownIt-Anchor" href="#案例-筛选重复值">#</a> 案例 筛选重复值</h3><p>核心算法 ：遍历旧数组，拿旧数组元素去查询新数组，如果该元素在新数组没出现过，就添加</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span></span>(chongfu)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">chongfu</span> = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;a &lt; chongfu.length;a++) &#123;  <span class="hljs-comment">//首先遍历旧数组</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span><span class="hljs-type">chongfu</span>.indexOf(chongfu[a]) === <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//如果新数组中没有旧数组内的第a个值，则在新数组后方添加该值</span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">chongfu</span>.push(chongfu[a])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">chongfu</span><br>&#125;<br><span class="hljs-comment">// var repeat = unique([&#x27;a&#x27;,&#x27;a&#x27;,&#x27;b&#x27;])</span><br><span class="hljs-keyword">var</span> repeat = unique([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">66</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>])<br>console.log(repeat)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182322969.webp" alt=""></p><h2 id="字符串元素"><a class="markdownIt-Anchor" href="#字符串元素">#</a> 字符串元素</h2><h3 id="将数组转换为字符串"><a class="markdownIt-Anchor" href="#将数组转换为字符串">#</a> 将数组转换为字符串</h3><p>1. 使用 toString ()</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr9 =<span class="hljs-meta"> [1,2,3,4,5,6]</span><br><span class="hljs-attribute">console</span>.log(arr9)  //此刻输出，为字符串类型<br><span class="hljs-attribute">console</span>.log(arr9.toString())  //输出<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>字符串<br></code></pre></td></tr></table></figure><p>2. 使用 join (‘分隔符)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> arr10 =<span class="hljs-meta"> [1,2,3,4,5,6]</span><br><span class="hljs-attribute">console</span>.log(arr10.join(&#x27;-&#x27;))  //join()内的分隔符需要使用字符串符号包裹  <span class="hljs-number">1</span>-<span class="hljs-number">2</span>-<span class="hljs-number">3</span>-<span class="hljs-number">4</span>-<span class="hljs-number">5</span>-<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182321758.webp" alt=""></p><h3 id="案例-查找字符串内某一字符出现的位置以及次数"><a class="markdownIt-Anchor" href="#案例-查找字符串内某一字符出现的位置以及次数">#</a> 案例 查找字符串内某一字符出现的位置以及次数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my12 = <span class="hljs-string">&#x27;sokjashdsfuayweuokjsdfuiheasoirfhw&#x27;</span>  <span class="hljs-comment">//声明字符串</span><br><span class="hljs-keyword">var</span> index = my12.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;s&#x27;</span>)  <span class="hljs-comment">//声明要查找的字符第一次出现的位置</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (index !== <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(index)   <span class="hljs-comment">//输出每次字符串所在的位置</span><br>    index = my12.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;s&#x27;</span>,index + <span class="hljs-number">1</span>)  <span class="hljs-comment">//设定index下一次循环的位置，在每个查找的字符后面 +1 防止死循环</span><br>    num++  <span class="hljs-comment">//保存循环次数，循环次数等于出现次数</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;字符出现了&#x27;</span> + num + <span class="hljs-string">&#x27;次&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211182324172.webp" alt=""></p><h3 id="根据索引号位置返回字符"><a class="markdownIt-Anchor" href="#根据索引号位置返回字符">#</a> 根据索引号位置返回字符</h3><p>格式 <code>变量名.charAt(索引号)</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my15 = <span class="hljs-string">&#x27;dcaoao&#x27;</span><br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my15.charAt(<span class="hljs-number">2</span>))  <span class="hljs-comment">//返回索引号为2的值 a</span><br>       <span class="hljs-comment">//使用charAt遍历整个字符</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;a &lt; my15.<span class="hljs-built_in">length</span>;a++) &#123;<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my15.charAt(a))<br>       &#125;<br>       <span class="hljs-comment">//使用 变量名[]   H5新增元素,需要考虑兼容性</span><br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my15[<span class="hljs-number">0</span>])  <span class="hljs-comment">//返回d</span><br></code></pre></td></tr></table></figure><h3 id="根据索引号返回改字符的ascii码"><a class="markdownIt-Anchor" href="#根据索引号返回改字符的ascii码">#</a> 根据索引号返回改字符的 ASCII 码</h3><p>格式:  <code>变量名.charCodeAt(索引号)</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my16 = <span class="hljs-string">&#x27;dcaoao&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my16.charCodeAt(<span class="hljs-number">0</span>))  <span class="hljs-comment">//返回my16中索引号0的值的ASCII值</span><br></code></pre></td></tr></table></figure><h3 id="判断对象内是否拥有某一属性"><a class="markdownIt-Anchor" href="#判断对象内是否拥有某一属性">#</a> 判断对象内是否拥有某一属性</h3><p>格式:  <code>对象['属性名']</code>   内部单引号可带和不带，看数据格式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my17 = &#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span><br>&#125;<br><span class="hljs-keyword">if</span> (my17[<span class="hljs-string">&#x27;age&#x27;</span>]) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;有该属性名&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;没有该属性名&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211192224227.webp" alt=""></p><h3 id="案例-判断一个字符串内出现次数最多的字符-并统计出现次数"><a class="markdownIt-Anchor" href="#案例-判断一个字符串内出现次数最多的字符-并统计出现次数">#</a> 案例 判断一个字符串内出现次数最多的字符，并统计出现次数</h3><p>核心：首先使用 charAt () 遍历这个字符串，把每个字符都存储给对象，如果对象没有这个值，则这个值就为 1, 如果对象内已经存在这个值，则将这个值 + 1</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my18 = <span class="hljs-string">&#x27;clkjsmeoitjrolksrjpwojroksdgj&#x27;</span>  <span class="hljs-comment">//字符串</span><br><span class="hljs-keyword">var</span> my18_1 = &#123;&#125;         <span class="hljs-comment">//声明一个空对象用于存放出现次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; my18.<span class="hljs-built_in">length</span>;i++) &#123;<br>    <span class="hljs-keyword">var</span> bianli = my18.charAt(i)  <span class="hljs-comment">//遍历字符串</span><br>    <span class="hljs-comment">//如果遍历的字符串在新对象中没有,则赋值为1次,如果在新对象中存在,则在原有的基础上+1</span><br>    <span class="hljs-keyword">if</span> (my18_1[bianli]) &#123;<br>        my18_1[bianli]++      <span class="hljs-comment">//原有基础上+1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        my18_1[bianli] = <span class="hljs-number">1</span>    <span class="hljs-comment">//直接赋值</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my18_1)  <span class="hljs-comment">//输出新对象看看</span><br><span class="hljs-comment">//然后使用for in 来进行遍历对象,来查询出现最多的字符以及次数</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span> <span class="hljs-comment">//声明一个空值用来存放最大值</span><br><span class="hljs-keyword">var</span> max_name = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">//声明一个空值用来存放最大值的名字</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a in my18_1) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">max</span> &lt; my18_1[a]) &#123;<br>        <span class="hljs-built_in">max</span> = my18_1[a]<br>        max_name = a<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;最大循环次数为&#x27;</span> + <span class="hljs-built_in">max</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;出现最多的字符为为&#x27;</span> + max_name)<br></code></pre></td></tr></table></figure><p>(这个要多练习)<br><img src="https://image.dcaoao.com/image/202211192245951.webp" alt=""></p><h2 id="字符串操作方法"><a class="markdownIt-Anchor" href="#字符串操作方法">#</a> 字符串操作方法</h2><h3 id="拼接字符串"><a class="markdownIt-Anchor" href="#拼接字符串">#</a> 拼接字符串</h3><p>格式: <code>concat('字符串1','字符串2',......)</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> my19 = &#x27;<span class="hljs-number">123</span>&#x27;<br><span class="hljs-attribute">console</span>.log(my19.concat(&#x27;<span class="hljs-number">456</span>&#x27;,&#x27;<span class="hljs-number">789</span>&#x27;))  //把字符串<span class="hljs-number">123</span>拼接<span class="hljs-number">456</span>和<span class="hljs-number">789</span>  输出<span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure><h3 id="截取字符串"><a class="markdownIt-Anchor" href="#截取字符串">#</a> 截取字符串</h3><p>格式:<br> <code>substr('截取的起始位置的索引号,截取多少个字符')</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> my20 = &#x27;<span class="hljs-number">123456789</span>&#x27;<br><span class="hljs-attribute">console</span>.log(my20.substr(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>))  //从索引号为<span class="hljs-number">3</span>开始截取<span class="hljs-number">5</span>个<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211192247788.webp" alt=""></p><h3 id="替换字符串"><a class="markdownIt-Anchor" href="#替换字符串">#</a> 替换字符串</h3><p>格式:  <code>replace('被替换的字符串','要替换的字符串')</code>   // 但是它只会替换第一个字符，多次替换可以上循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my21 = <span class="hljs-string">&#x27;aabaavesf&#x27;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my21.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>))  <span class="hljs-comment">//6abaavesf</span><br></code></pre></td></tr></table></figure><p>把全部 a 替换为 6, 上循环  方法 1</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; my21.<span class="hljs-built_in">length</span>;i++) &#123;<br>    my21 = my21.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my21)<br></code></pre></td></tr></table></figure><p>方法 2 :</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my22 = <span class="hljs-string">&#x27;aabaavesf&#x27;</span><br><span class="hljs-keyword">while</span> (my22.<span class="hljs-built_in">indexOf</span>(<span class="hljs-string">&#x27;a&#x27;</span>) !== <span class="hljs-number">-1</span>) &#123;<br>    my22 = my22.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my22)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211192250971.webp" alt=""></p><h3 id="将字符转换为数组"><a class="markdownIt-Anchor" href="#将字符转换为数组">#</a> 将字符转换为数组</h3><p>格式:  <code>split('分隔符')</code>   与 <code>join</code>  将数组转换为字符串相对应</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> my23 = &#x27;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#x27;<br><span class="hljs-attribute">var</span> my25 = &#x27;<span class="hljs-number">1</span>&amp;<span class="hljs-number">2</span>&amp;<span class="hljs-number">3</span>&amp;<span class="hljs-number">4</span>&amp;<span class="hljs-number">5</span>&amp;<span class="hljs-number">6</span>&#x27;<br><span class="hljs-attribute">console</span>.log(my23.split(&#x27;,&#x27;))  //[&#x27;<span class="hljs-number">1</span>&#x27;, &#x27;<span class="hljs-number">2</span>&#x27;, &#x27;<span class="hljs-number">3</span>&#x27;, &#x27;<span class="hljs-number">4</span>&#x27;, &#x27;<span class="hljs-number">5</span>&#x27;, &#x27;<span class="hljs-number">6</span>&#x27;]<br><span class="hljs-attribute">console</span>.log(my25.split(&#x27;&amp;&#x27;))  //[&#x27;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#x27;]<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211192251924.webp" alt=""></p><pre><code class="hljs">    //案例 给定一个字符串,做出以下操作    //1.获取字符串的长度    //2.去除指定位置的字符,如0,3,5,9    //3.查找指定字符是否在字符串中存在 i,v,b等    //4.替换指定的字符 g替换为22    //5.截取指定开始位置到结束位置的字符串    //6.找出以上字符串中出现最多的字符和次数</code></pre><h2 id="堆和栈的理解与区别"><a class="markdownIt-Anchor" href="#堆和栈的理解与区别">#</a> 堆和栈的理解与区别</h2><p>1. 栈 用于存储简单数据类型，里面直接开辟一个空间，存放值<br> <code>var age = 18  //存放18</code> <br>2. 堆 用于存储复杂类型（对象） 用 new 创建的之类<br>首先在栈里面存放地址，十六进制地址，地址指向堆中的数据<br><img src="https://image.dcaoao.com/image/202211192204264.webp" alt=""></p><h3 id="复杂数据类型传参"><a class="markdownIt-Anchor" href="#复杂数据类型传参">#</a> 复杂数据类型传参 ###</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.首先两个函数，不调用不执行<br><span class="hljs-keyword">function</span> Person(name) &#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-number">3</span>.p函数接收 <span class="hljs-string">&#x27;刘德华&#x27;</span> 参数，此刻p.name输出为 <span class="hljs-string">&#x27;刘德华&#x27;</span><br>    this.name = name;<br>&#125;<br><span class="hljs-keyword">function</span> f1(x) &#123;<br>    console.log(x.name)  <span class="hljs-regexp">//</span><span class="hljs-number">6</span>.此刻输出还为刘德华<br>    x.name = <span class="hljs-string">&#x27;张学友&#x27;</span>   <span class="hljs-regexp">//</span><span class="hljs-number">7</span>.修改了p的形参内容为 <span class="hljs-string">&#x27;张学友&#x27;</span> <br>    console.log(x.name) <span class="hljs-regexp">//</span><span class="hljs-number">8</span>.输出张学友<br>&#125;<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.此处调用了Person函数，并且传递参数 <span class="hljs-string">&#x27;刘德华&#x27;</span><br>var p = new Person(<span class="hljs-string">&#x27;刘德华&#x27;</span>)<br>console.log(p.name)  <span class="hljs-regexp">//</span><span class="hljs-number">4</span>.输出刘德华<br>f1(p)   <span class="hljs-regexp">//</span><span class="hljs-number">5</span>.此刻又调用了f1函数,并且传参为p  这么看 p = f1函数内的形参x<br>console.log(p.name)  <span class="hljs-regexp">//</span><span class="hljs-number">9</span>.输出张学友<br></code></pre></td></tr></table></figure><h2 id="dom树"><a class="markdownIt-Anchor" href="#dom树">#</a> DOM 树</h2><p>文档：一个页面就是一个文档，DOM 中使用 <code>document</code>  表示<br>元素：页面中所有的标签都是元素，DOM 中使用 e <code>lement</code>  表示<br>节点：网页中所有的内容都是节点 (标签 属性 文本 注释等),DOM 中使用 <code>node</code>  表示</p><p>html:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- getElementById根据id来获取元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--getElementsByTagName 根据标签名来获取元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 获取某个父元素内指定标签名的子元素 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ol_id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;leiName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="getelementbyid根据id来获取元素"><a class="markdownIt-Anchor" href="#getelementbyid根据id来获取元素">#</a> getElementById (’’) 根据 id 来获取元素</h3><p>getElementById (’’) 的参数是大小写敏感的字符串，严格区分<br> getElementById 可以找到这个元素，通过 id 获取，必须以 document 开头  文档里的某个元素<br>使用方法: <code>document.getElementById('ID名')</code></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> <span class="hljs-keyword">timer</span> = document.getElementById(&#x27;time&#x27;)   <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">timer</span>)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">timer</span>)   <span class="hljs-comment">//返回结果是一个元素对象</span><br><span class="hljs-comment">//console.dir()  打印我们返回的元素对象，更好的查看里面的属性和方法</span><br>console.<span class="hljs-keyword">dir</span>(<span class="hljs-keyword">timer</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202040446.webp" alt=""></p><h3 id="getelementsbytagname-根据标签名获取元素"><a class="markdownIt-Anchor" href="#getelementsbytagname-根据标签名获取元素">#</a> getElementsByTagName (’’) 根据标签名获取元素</h3><p>使用方法: <code>document.getElementsByTagName('li')</code> <br> 1. 根据标签名来获取元素  使用伪数组来存储，所以可以使用数组的索引号来输出<br> 2. 返回获取到的元素是对象的集合<br> 3. 得到的元素是动态的，跟随 html 变化而变化，可以遍历里面的元素对象<br> 4. 如果页面中只有一个符合条件的标签，返回的还是伪数组<br> 5. 如果没有符合条件的标签，返回的是一个空的伪数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> list = document<span class="hljs-selector-class">.getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>        console<span class="hljs-selector-class">.log</span>(list)  <span class="hljs-comment">//HTMLCollection(5) [li, li, li, li, li]</span><br>        console<span class="hljs-selector-class">.log</span>(list<span class="hljs-selector-attr">[1]</span>)   <span class="hljs-comment">//&lt;li&gt;2&lt;/li&gt;</span><br><br>        <span class="hljs-comment">//获取某个父元素内指定标签名的子元素</span><br>                <span class="hljs-comment">//document.getElementById(&#x27;父元素ID&#x27;)</span><br>        <span class="hljs-selector-tag">var</span> olde = document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;ol_id&#x27;</span>)   <span class="hljs-comment">//文档中的ol,确定父元素名字,必须是指定的单个元素</span><br>                <span class="hljs-comment">//父元素变量名.getElementsByTagName(&#x27;要获取的子元素标签&#x27;)  可以看做是ol内的.li</span><br>        console<span class="hljs-selector-class">.log</span>(olde<span class="hljs-selector-class">.getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202044777.webp" alt=""></p><h3 id="documentgetelementsbyclassname-根据类名获取元素"><a class="markdownIt-Anchor" href="#documentgetelementsbyclassname-根据类名获取元素">#</a> document.getElementsByClassName (’’) 根据类名获取元素</h3><p>使用方法:  <code>document.getElementsByClassName('类名')</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> lei = document.getElementsByClassName(<span class="hljs-string">&#x27;leiName&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(lei)  <br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202046497.webp" alt=""></p><h3 id="h5新增的选择器一选择器多用"><a class="markdownIt-Anchor" href="#h5新增的选择器一选择器多用">#</a> H5 新增的选择器，一选择器多用</h3><p>H5 新增  <code>document.querySelector('选择器类型')</code>    只能返回指定选择器的 <code>第一个对象</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> red = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;.red&#x27;</span>)  <span class="hljs-comment">//.类名 是类选择器</span><br><span class="hljs-keyword">var</span> ol_id = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#ol_id&#x27;</span>)  <span class="hljs-comment">//#ID 是ID选择器</span><br><span class="hljs-keyword">var</span> li_biaoqian = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;li&#x27;</span>)  <span class="hljs-comment">//直接写,是标签选择器,只会返回第一个</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202048568.webp" alt=""></p><p>H5 新增 返回指定选择器的 <code>所有元素</code> 对象的集合，是一种伪数组</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> all = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202049302.webp" alt=""></p><h3 id="获取特殊标签-body与html"><a class="markdownIt-Anchor" href="#获取特殊标签-body与html">#</a> 获取特殊标签 body 与 html</h3><p>获取 <code>body</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> bodyELe = document.body   <span class="hljs-comment">//返回body元素对象</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(bodyELe)<br><span class="hljs-built_in">console</span>.dir(bodyELe)<br></code></pre></td></tr></table></figure><p>获取 <code>html</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> htmlEle = document.documentElement;  <span class="hljs-comment">//返回html元素对象</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(htmlEle)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211202050390.webp" alt=""></p><h3 id="事件三要素"><a class="markdownIt-Anchor" href="#事件三要素">#</a> 事件三要素</h3><p>事件由三部分组成 事件源 事件类型 事件处理程序 被称为事件三要素<br> 1. 事件源：事件被触发的对象， 谁 按钮<br> <code>var bthid = document.getElementById('btn')</code> <br> 2. 事件类型：如何触发，什么时间 比如是鼠标点击 (onclick) 还是鼠标经过，或者键盘按下<br> 3. 事件处理程序 通过一个函数赋值的方式完成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//ID为btn的按钮被点击后，弹出提示框</span><br>bthid<span class="hljs-selector-class">.onclick</span> = function () &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;这个按钮被点击了&#x27;</span>)<br>&#125;<br><br><br><br><span class="hljs-comment">//点击div，控制台输出 &#x27;我被选中了&#x27;</span><br><span class="hljs-comment">//1.获取事件源</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-comment">//2.绑定事件 3.添加时事件处理程序</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.onclick</span> = function () &#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;我被选中了&#x27;</span>)<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;被选中了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>常见的鼠标事件<br> <code>onclick </code> 鼠标点击左键触发<br> <code>onmouseover </code>  鼠标经过自身或者子盒子都会触发<br> <code>onmouseout</code>   鼠标离开触发<br> <code>mouseenter</code>    鼠标经过自身盒子触发<br> <code>mouseleave</code>    鼠标离开自身盒子触发<br> <code>onfocus</code>      获得鼠标焦点触发<br> <code>onblur </code>      失去鼠标焦点触发<br> <code>onmousemove </code> 鼠标移动触发<br> <code>onmouseup </code>   鼠标弹起触<br> <code>onmousedown</code>  鼠标按下触发</p><h3 id="改变元素标签内内容"><a class="markdownIt-Anchor" href="#改变元素标签内内容">#</a> 改变元素 (标签内) 内容</h3><ol><li>element.innerText  改变从起始到终止的内容，但是它不识别 html 标签，同时空格与换行也被去掉</li><li>element.innerHtml  改变从起始到终止的内容，识别 html 标签，空格与换行被保留</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">button</span> class=<span class="hljs-string">&quot;xianshi&quot;</span>&gt;显示当前系统时间&lt;/button&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;time&quot;</span>&gt;某个时间&lt;/div&gt;<br>&lt;p&gt;&lt;/p&gt;<br>&lt;script&gt;<br>    <span class="hljs-comment">//改变元素(标签内)内容</span><br>    <span class="hljs-comment">//1. element.innerText  改变从起始到终止的内容,但是它不识别html标签,同时空格与换行也被去掉</span><br>    <span class="hljs-comment">//2. element.innerHtml  改变从起始到终止的内容,识别 html标签,空格与换行被保留</span><br><br><br>    <span class="hljs-comment">//1.获取元素</span><br>    <span class="hljs-selector-tag">var</span> btn = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.xianshi&#x27;</span>)<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">time</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.time&#x27;</span>)<br>    <span class="hljs-comment">//2.添加事件</span><br>    btn<span class="hljs-selector-class">.onclick</span> = function () &#123;<br>        <span class="hljs-comment">//xianshi按钮被点击后，改变time标签内的值</span><br>        <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.innerText</span> = <span class="hljs-built_in">shijian</span>()<br>    &#125;<br><br>    <span class="hljs-comment">//封装一个时间函数</span><br>    function <span class="hljs-built_in">shijian</span>() &#123;<br>        <span class="hljs-selector-tag">var</span> time3 = new <span class="hljs-built_in">Date</span>()<br>        <span class="hljs-selector-tag">var</span> n = time3<span class="hljs-selector-class">.getFullYear</span>()  <span class="hljs-comment">//年</span><br>        <span class="hljs-selector-tag">var</span> y = time3<span class="hljs-selector-class">.getMonth</span>()    <span class="hljs-comment">//月</span><br>        <span class="hljs-selector-tag">var</span> r = time3<span class="hljs-selector-class">.getDate</span>()     <span class="hljs-comment">//日</span><br>        <span class="hljs-selector-tag">var</span> s = time3<span class="hljs-selector-class">.getHours</span>()    <span class="hljs-comment">//时</span><br>        <span class="hljs-selector-tag">var</span> f = time3<span class="hljs-selector-class">.getMinutes</span>()  <span class="hljs-comment">//分</span><br>        <span class="hljs-selector-tag">var</span> m = time3<span class="hljs-selector-class">.getSeconds</span>()  <span class="hljs-comment">//秒</span><br>        <span class="hljs-selector-tag">var</span> z = time3<span class="hljs-selector-class">.getDay</span>()  <span class="hljs-comment">//周</span><br>        <span class="hljs-selector-tag">var</span> zhou = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;星期日&#x27;</span>, <span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;星期二&#x27;</span>, <span class="hljs-string">&#x27;星期三&#x27;</span>, <span class="hljs-string">&#x27;星期四&#x27;</span>, <span class="hljs-string">&#x27;星期五&#x27;</span>, <span class="hljs-string">&#x27;星期六&#x27;</span>]</span><br>        <span class="hljs-selector-tag">var</span> day = zhou<span class="hljs-selector-attr">[z]</span><br>        <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span>) &#123;   <span class="hljs-comment">//使1 2 3 变为 01 02 03</span><br>            m = <span class="hljs-string">&#x27;0&#x27;</span> + m<br>        &#125;<br>        return <span class="hljs-string">&#x27;当前时间为&#x27;</span> + n + <span class="hljs-string">&#x27;年&#x27;</span> + y + <span class="hljs-string">&#x27;月&#x27;</span> + r + <span class="hljs-string">&#x27;日&#x27;</span> + s + <span class="hljs-string">&#x27;时&#x27;</span> + f + <span class="hljs-string">&#x27;分&#x27;</span> + m + <span class="hljs-string">&#x27;秒 &#x27;</span> + day<br>    &#125;<br><br><br>    <span class="hljs-comment">//元素可以不添加事件直接使用  这样的效果就是p标签在页面被加载的时候就显示当前时间</span><br>    <span class="hljs-selector-tag">var</span> timer = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>)<br>    timer<span class="hljs-selector-class">.innerText</span> = <span class="hljs-built_in">shijian</span>()<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211212033513.webp" alt=""></p><h3 id="innertext与innerhtml的区别"><a class="markdownIt-Anchor" href="#innertext与innerhtml的区别">#</a> innerText 与 innerHtml 的区别</h3><p>innerText 会直接输出  <code>&lt;b&gt;这是一段文字&lt;/b&gt;</code>   不识别 html 标签<br> innerHtml 会输出 这是一段文字 并且加粗，是识别 html 标签的<br>在实际开发中，innerHtml 使用的比较多</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">a1</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">a2</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">p</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">a3</span>&quot;&gt;<br>    第一行<br>    &lt;<span class="hljs-symbol">b</span>&gt;第二行&lt;/<span class="hljs-symbol">b</span>&gt;<br>&lt;/<span class="hljs-symbol">p</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> a1 = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.a1&#x27;</span>)<br><span class="hljs-selector-tag">var</span> a2 = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.a2&#x27;</span>)<br>a1<span class="hljs-selector-class">.innerText</span> = <span class="hljs-string">&#x27;&lt;b&gt;这是一段文字&lt;/b&gt;&#x27;</span>   <span class="hljs-comment">//innerText会直接输出 &lt;b&gt;这是一段文字&lt;/b&gt;  不识别html标签</span><br>a2<span class="hljs-selector-class">.innerHTML</span> = <span class="hljs-string">&#x27;&lt;b&gt;这是一段文字&lt;/b&gt;&#x27;</span>   <span class="hljs-comment">//innerHtml会输出 这是一段文字 并且加粗,是识别html标签的</span><br><span class="hljs-comment">//innerText与innerHtml可读可写，可以获取其中的内容</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">p</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.a3&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">p</span>.innerText)<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">p</span>.innerHTML)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211212034387.webp" alt=""></p><h3 id="案例-使用按钮切换两张图片"><a class="markdownIt-Anchor" href="#案例-使用按钮切换两张图片">#</a> 案例 使用按钮切换两张图片</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 案例,操作元素 修改元素属性  使用按钮切换两张图片 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a5&quot;</span>&gt;</span>第一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a6&quot;</span>&gt;</span>第二张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202211211301097.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;这是第一张图片&quot;</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a5 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a5&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a6 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a6&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.img&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//2.注册事件  处理程序</span></span><br><span class="language-javascript">    a6.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://image.dcaoao.com/image/202211211301077.webp&#x27;</span></span><br><span class="language-javascript">        img.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;这是第二张图片&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    a5.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://image.dcaoao.com/image/202211211301097.webp&#x27;</span></span><br><span class="language-javascript">        img.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;这是第一张图片&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 可供更改的元素属性由很多 src href id alt title innerText与innerHtml改变元素内容</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211212037110.gif" alt=""></p><h3 id="操作元素-表单的属性设置"><a class="markdownIt-Anchor" href="#操作元素-表单的属性设置">#</a> 操作元素 表单的属性设置</h3><p><code>元素名.表单属性</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;genggai&quot;</span>&gt;</span>更改表单默认值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jinyong&quot;</span>&gt;</span>禁用此按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;jiechu&quot;</span>&gt;</span>解除禁用按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;biaodan&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;这是一个表单&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> genggai = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.genggai&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> jinyong = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.jinyong&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> jiechu = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.jiechu&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> biaodan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.biaodan&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//添加事件</span></span><br><span class="language-javascript">    genggai.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        biaodan.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;这个默认值被更改了&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    jinyong.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        jinyong.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">        jinyong.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;啊我被禁用了&#x27;</span></span><br><span class="language-javascript">        jiechu.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;有按钮被禁用&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    jiechu.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//需要注意的是，函数内使用this 效果也是一样的</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;啊我被你救了,感谢你&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;已经解除禁用按钮&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211212040766.gif" alt=""></p><h3 id="操作元素-修改样式属性"><a class="markdownIt-Anchor" href="#操作元素-修改样式属性">#</a> 操作元素 修改样式属性</h3><p>可以更改颜色，大小，字体，字体大小等等等等…<br> 格式<br> <code>element.style</code>      行内样式操作<br> <code>element.className</code>  类名样式操作</p><p><code>element.style</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 需要这个div的颜色可以点击来回切换 */</span></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 格式 </span></span><br><span class="language-javascript">    <span class="hljs-comment">// element.style       行内样式操作</span></span><br><span class="language-javascript">    <span class="hljs-comment">// element.className   类名样式操作</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//2.注册事件与处理程序</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> flag = <span class="hljs-number">0</span></span><br><span class="language-javascript">    div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//采用驼峰命名法</span></span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;300px&#x27;</span></span><br><span class="language-javascript">            flag = <span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;skyblue&#x27;</span></span><br><span class="language-javascript">            flag = <span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 这样修改的style样式,产生的是行内样式,权重较高</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211212043232.gif" alt=""></p><p><code>element.className</code></p><p><code>element.className</code>  适用于修改样式比较繁琐复杂的时候使用<br>首先需要在 CSS 中写好需要更改的样式<br> <code>element.className</code>  会直接更改元素的类名，会覆盖掉之前的类名<br>如果需要保留原先的类名样式，可以使用  <code>this.className = 'a1 a2'</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 这是原先的样式 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.a1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-comment">/* 这是变换的样式 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.a2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: teal;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//首先获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a1&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//注册事件</span></span><br><span class="language-javascript">    a1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//使用className更换为变换样式类名即可</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;a2&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211221244444.png" alt=""></p><h3 id="案例-开关灯"><a class="markdownIt-Anchor" href="#案例-开关灯">#</a> 案例 开关灯</h3><p>要求：按钮控制页面颜色，并且在切换颜色后切换开灯关灯选项</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;body&gt;<br>    &lt;button&gt;关灯&lt;/button&gt;<br>&lt;/body&gt;<br>&lt;script&gt;<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">button</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">body</span> = document<span class="hljs-selector-class">.body</span><br>    <span class="hljs-selector-tag">var</span> flag = <span class="hljs-number">0</span><br>    <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.onclick</span> = function () &#123;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.backgroundColor</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>            <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.innerHTML</span> = <span class="hljs-string">&#x27;开灯&#x27;</span><br>            flag = <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-selector-tag">body</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.backgroundColor</span> = <span class="hljs-string">&#x27;#fff&#x27;</span><br>            <span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.innerHTML</span> = <span class="hljs-string">&#x27;关灯&#x27;</span><br>            flag = <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211222234739.gif" alt=""></p><h3 id="排他思想算法"><a class="markdownIt-Anchor" href="#排他思想算法">#</a> 排他思想 (算法)</h3><p>首先是操作演示:<img src="https://image.dcaoao.com/image/202211222236106.gif" alt=""><br> 思路：点击按钮的同时先将所有的按钮去除掉颜色，然后为点击的按钮上颜色<br>所有的按钮获取事件使用 <code>for</code>  循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先获取所有按钮，得到的是一个伪数组</span><br>    <span class="hljs-keyword">var</span> btns = document.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>)<br>    <span class="hljs-comment">//然后使用for循环将所有按钮添加事件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; btns.<span class="hljs-built_in">length</span>;i++) &#123;<br>        btns[i].onclick = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>            <span class="hljs-comment">// 变色之前,去除所有按钮的颜色,使其恢复默认</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; btns.<span class="hljs-built_in">length</span>;i++) &#123;<br>                <span class="hljs-comment">//这里使用 btns[i] 是为了去除所有按钮颜色</span><br>                btns[i].style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>            <span class="hljs-comment">//然后使被点击的按钮变为red颜色</span><br>            <span class="hljs-comment">//这里使用this是为了选中那个被点击的按钮</span><br>            this.style.backgroundColor = <span class="hljs-string">&#x27;red&#x27;</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="案例-密码框验证"><a class="markdownIt-Anchor" href="#案例-密码框验证">#</a> 案例 密码框验证</h3><p>这是案例:<br><img src="https://image.dcaoao.com/image/202211222245046.gif" alt=""><br> 思路：输入框获得焦点时，显示提示文本，失去焦点时，判断文本是否符合要求，如果符合要求则显示正确，如果不符合要求则显示错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.wenzi_dui</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#11aa66</span> ;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.wenzi_cuo</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#d81e06</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;span&gt;请输入密码&lt;/span&gt; --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;imgs&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202211221153736.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wenzi&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.获取事件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.input&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.imgs&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> wenzi = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.wenzi&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//2.处理程序</span></span><br><span class="language-javascript">    <span class="hljs-comment">//获得焦点,显示要求文本</span></span><br><span class="language-javascript">    input.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        imgs.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;inline&#x27;</span></span><br><span class="language-javascript">        imgs.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://image.dcaoao.com/image/202211221153736.png&#x27;</span></span><br><span class="language-javascript">        wenzi.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;请输入6~16位密码,区分大小写&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//失去焦点,判断密码是否符合,使用if语句</span></span><br><span class="language-javascript">    input.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (input.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span> || input.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">18</span>) &#123;</span><br><span class="language-javascript">            imgs.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://image.dcaoao.com/image/202211221214145.png&#x27;</span></span><br><span class="language-javascript">            wenzi.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;请输入至少6-18位的密码&#x27;</span></span><br><span class="language-javascript">            wenzi.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;wenzi_cuo&#x27;</span></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            imgs.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://image.dcaoao.com/image/202211221232480.png&#x27;</span></span><br><span class="language-javascript">            wenzi.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;密码符合规范&#x27;</span></span><br><span class="language-javascript">            wenzi.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;wenzi_dui&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="h5新增-获取属性值"><a class="markdownIt-Anchor" href="#h5新增-获取属性值">#</a> H5 新增 获取属性值</h3><p>获取元素的属性值:<br> 有两种办法<br> 1. <code>Element.属性</code>  这种只能获取到 <code>内置属性</code> ，id,value, 之类<br> 2. <code>Element.getAttribute('属性')</code>  这种可以获取到 <code>自定义属性</code> 的值，也就是程序员自己添加的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">data-list</span>=<span class="hljs-string">&quot;自定义属性值List&quot;</span> <span class="hljs-attr">data-get-name</span>=<span class="hljs-string">&quot;自定义属性getName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 1.Element.属性 这种只能获取到内置属性,id,value,之类</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">id</span>)  <span class="hljs-comment">//返回id值  a1</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 2.Element.getAttribute(&#x27;属性&#x27;) 这种可以获取到自定义属性的值,也就是程序员自己添加的属性</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>))  <span class="hljs-comment">//返回index自定义属性值</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>自定义属性值 需要注意的是，自定义属性值规范以 data 开头，方便辨认<br> data-index  data-list 等<br>获取自定义属性值有两种方法，<br>第一种是上方的 Element.getAttribute (‘自定义属性值’)，兼容性较好<br>第二种为 Element.dataset. 自定义属性值  只能取 data 开头的自定义属性，兼容性只在 IE11 开始支持</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.dataset</span>.list)  <span class="hljs-comment">//取data-list的自定义属性值</span><br></code></pre></td></tr></table></figure><p>如果碰上 data-get-name 这种较长的属性名  后面需要遵循驼峰命名法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.dataset</span>.getName)<br></code></pre></td></tr></table></figure><h3 id="h5新增-修改属性值"><a class="markdownIt-Anchor" href="#h5新增-修改属性值">#</a> H5 新增 修改属性值</h3><p>修改元素的属性值<br> 1. <code>Element.属性 = '属性值'</code> <br>2. <code>Element.setAttribute('属性','要修改的属性值')</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.Element.属性 = <span class="hljs-string">&#x27;属性值&#x27;</span><br>a.id = <span class="hljs-string">&#x27;a2&#x27;</span>   <span class="hljs-regexp">//</span>直接赋值,只能修改内置属性<br>a.className = <span class="hljs-string">&#x27;b&#x27;</span>  <span class="hljs-regexp">//</span>className这个比较特殊<br>console.log(a.id)   <span class="hljs-regexp">//</span>返回a2<br><br>    <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>.Element.setAttribute(<span class="hljs-string">&#x27;属性&#x27;</span>,<span class="hljs-string">&#x27;要修改的属性值&#x27;</span>)<br>  <span class="hljs-regexp">//</span>可以修改自定义属性,也可以修改内置属性<br>a.setAttribute(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-regexp">//</span> console.log(a.getAnimations(<span class="hljs-string">&#x27;index&#x27;</span>))<br>console.log(a.getAttribute(<span class="hljs-string">&#x27;index&#x27;</span>))<br></code></pre></td></tr></table></figure><p>移除元素的属性 removeAttribute (属性)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a.removeAttribute(<span class="hljs-string">&#x27;index&#x27;</span>)  //index属性被移除  &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;a2&quot;</span> class=<span class="hljs-string">&quot;b&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="节点操作"><a class="markdownIt-Anchor" href="#节点操作">#</a> 节点操作</h3><p>节点操作一般比较方便</p><h4 id="获取父节点"><a class="markdownIt-Anchor" href="#获取父节点">#</a> 获取父节点</h4><p>父节点操作使用 :  <code>parentNode</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- 获取父节点  parentNode --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>//获取父节点  parentNode<br>//首先声明一个子节点用于&#x27;定位&#x27;<br>var erweima = document.querySelector(&#x27;.erweima&#x27;)<br>//然后获取最近的父节点<br>console.log(erweima.parentNode)<br>// 返回父级div标签  如果找不到父级节点，则 返回为空<br><br></code></pre></td></tr></table></figure><h4 id="获取子节点"><a class="markdownIt-Anchor" href="#获取子节点">#</a> 获取子节点</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul内的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul内的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul内的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul内的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>ul内的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="hljs-comment">//获取子节点  </span><br><span class="hljs-comment">//1.childNodes 可获取到所有的子节点 元素节点 文本节点等，一般不提倡使用，获取的数据需要单独处理</span><br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">childNodes</span>)  <span class="hljs-comment">//明明ul内只有五个li,却获取到了11个节点,因为换行符等也包括在内</span><br><span class="hljs-comment">//2.children 获取所有子元素节点 兼容性较好  返回伪数组样式</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">children</span>)  <span class="hljs-comment">//[li, li, li, li, li]  五个li被全部获取</span><br></code></pre></td></tr></table></figure><h4 id="获取第一个子元素和最后一个子元素"><a class="markdownIt-Anchor" href="#获取第一个子元素和最后一个子元素">#</a> 获取第一个子元素和最后一个子元素</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;ol&gt;<br>    &lt;li&gt;ol内第一个&lt;/li&gt;<br>    &lt;li&gt;ol内的li2&lt;/li&gt;<br>    &lt;li&gt;ol内的li3&lt;/li&gt;<br>    &lt;li&gt;ol内的li4&lt;/li&gt;<br>    &lt;li&gt;ol内最后一个&lt;/li&gt;<br>&lt;/ol&gt;<br><br><br><span class="hljs-comment">//1.firstChild 与lastChild  获取的是 第一个/最后一个 子节点，不管是文本还是元素节点 </span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">ol</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span>.firstChild)  <span class="hljs-comment">//返回第一个子节点，不论类型</span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span>.lastChild)  <span class="hljs-comment">//返回最后一个子节点，不论类型</span><br><span class="hljs-comment">//2. firstElementChild 与 lastElementChild 获取第一个元素节点与最后一个元素节点</span><br><span class="hljs-comment">//兼容性需要注意，IE9才开始支持 </span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span>.firstElementChild)<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span>.lastElementChild)<br><span class="hljs-comment">//获取开头与结尾的实际开发写法 没有兼容性问题 使用children伪数组获取</span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.children</span><span class="hljs-selector-attr">[0]</span>)  <span class="hljs-comment">//获取开头</span><br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.children</span><span class="hljs-selector-attr">[ol.children.length - 1]</span>)  <span class="hljs-comment">//获取结尾</span><br></code></pre></td></tr></table></figure><h4 id="获取兄弟节点"><a class="markdownIt-Anchor" href="#获取兄弟节点">#</a> 获取兄弟节点</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;div class=<span class="hljs-string">&quot;xiongdi&quot;</span>&gt;兄弟一号&lt;/div&gt;<br>&lt;span&gt;兄弟二号&lt;/span&gt;<br><br><br><span class="hljs-keyword">var</span> xiongdi = document.querySelector(<span class="hljs-string">&#x27;.xiongdi&#x27;</span>)<br><span class="hljs-comment">//1. nextSibling 获取下一个兄弟节点 包含元素节点与文本节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xiongdi.nextSibling)  <span class="hljs-comment">//返回文本节点</span><br><span class="hljs-comment">//2.previousSibling 获取上一个兄弟节点 包含元素节点与文本节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xiongdi.previousSibling)<br><span class="hljs-comment">//3. nextElementSibling  获取下一个兄弟元素节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xiongdi.nextElementSibling)  <span class="hljs-comment">//返回 &lt;span&gt;兄弟二号&lt;/span&gt;</span><br><span class="hljs-comment">//4.previousElementSibling 获取上一个兄弟元素节点</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xiongdi.previousElementSibling)  <span class="hljs-comment">//同上</span><br><span class="hljs-comment">//需要注意的是,3和4有兼容性问题需要注意,在IE9才开始支持,如果需要考虑兼容性问题获取兄弟元素,可以封装一个兼容性函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">xiongdi</span>(<span class="hljs-params">canshu</span>)&#123;<br>    <span class="hljs-keyword">while</span> (canshu = canshu.nextSibling) &#123;<br>        <span class="hljs-comment">//如果节点类型等于1 那就输出这个节点  元素节点的类型为1</span><br>        <span class="hljs-keyword">if</span>(canshu.nodeType === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> canshu<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建元素节点"><a class="markdownIt-Anchor" href="#创建元素节点">#</a> 创建元素节点</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">ul</span> class=<span class="hljs-string">&quot;chuangjian&quot;</span>&gt;&lt;/ul&gt;<br><br>    <span class="hljs-comment">// 如果想要在页面中添加新元素,分两步  1.创建元素  2.添加元素</span><br>    <span class="hljs-comment">//1.创建元素子节点  document.createElement(&#x27;标签&#x27;)</span><br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">li</span> = document<span class="hljs-selector-class">.createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> = document<span class="hljs-selector-class">.createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    <br>    <span class="hljs-comment">//2.添加节点 node.appendChild(child)    node为父级元素  child为刚刚创建的子级元素  在其最后方追加元素</span><br>    <span class="hljs-selector-tag">var</span> chuangjian = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;.chuangjian&#x27;</span>)  <span class="hljs-comment">//声明父节点</span><br>    chuangjian<span class="hljs-selector-class">.appendChild</span>(li)<br>    chuangjian<span class="hljs-selector-class">.appendChild</span>(div)<br><br>    <span class="hljs-comment">//3.在指定位置前面添加字元素 node.insertBefore(child,指定元素)</span><br>    <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">span</span> = document<span class="hljs-selector-class">.createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>)<br>    chuangjian<span class="hljs-selector-class">.insertBefore</span>(<span class="hljs-selector-tag">span</span>,chuangjian<span class="hljs-selector-class">.children</span><span class="hljs-selector-attr">[1]</span>)  <span class="hljs-comment">//在div前面添加了span标签</span><br><br>    <span class="hljs-comment">//innerHTML创建多个元素效率更高，采用数组形式</span><br>    <span class="hljs-comment">// createElement() 创建多个元素效率稍微低一点点,但是结构更加清晰</span><br></code></pre></td></tr></table></figure><p>需要注意的是，创建一个元素节点，只能插入一次，如果需要多个，则使用 for 循环</p><h4 id="删除元素节点"><a class="markdownIt-Anchor" href="#删除元素节点">#</a> 删除元素节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;delan&quot;</span>&gt;删除按钮&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>熊大<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>熊二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>光头强<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>又来砍树<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>咧<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><br><br><br><span class="hljs-comment">//node.removeChild(child)   父节点.removeChild(要删除的子节点)  </span><br><span class="hljs-keyword">var</span> del = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.del&#x27;</span>)<br><span class="hljs-keyword">var</span> delan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.delan&#x27;</span>)  <span class="hljs-comment">//获取删除按钮</span><br>delan.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//添加if判断是否还有空余字段 如果没有则禁用按钮并且提示</span><br>    <span class="hljs-keyword">if</span> (del.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;<br>        delan.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;没得可以删的了&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        del.<span class="hljs-title function_">removeChild</span>(del.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复制节点"><a class="markdownIt-Anchor" href="#复制节点">#</a> 复制节点</h4><p><code>node.cloneNode()</code>    <code>要复制的节点.cloneNode()  </code> <br>如果 cloneNode () 内的值为空或者为 false 则是浅拷贝 仅克隆节点本身，不克隆里面的内容以及子节点<br>如果 cloneNode () 内参数为 true 则是深拷贝 会复制节点本身以及里面所有的子节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- 复制节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copyf&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><br>var copy = document.querySelector(&#x27;.copy&#x27;)<br>var copyf = document.querySelector(&#x27;.copyf&#x27;)<br>copyf.appendChild(copy.cloneNode())  //浅拷贝,仅拷贝了li标签<br>copyf.appendChild(copy.cloneNode(true))  //深拷贝,连带li的内容一起拷贝<br></code></pre></td></tr></table></figure><h3 id="dom重点核心"><a class="markdownIt-Anchor" href="#dom重点核心">#</a> DOM 重点核心</h3><p>DOM 主要就是 创建 增 删 改 查 属性操作 事件操作</p><h4 id="创建"><a class="markdownIt-Anchor" href="#创建">#</a> 创建:</h4> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">document.<span class="hljs-built_in">write</span><br>innerHTML<br>createElement<br></code></pre></td></tr></table></figure><h4 id="增"><a class="markdownIt-Anchor" href="#增">#</a> 增:</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">appendChild</span><br><span class="hljs-attribute">insertBefore</span><br></code></pre></td></tr></table></figure><h4 id="删"><a class="markdownIt-Anchor" href="#删">#</a> 删:</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-comment">removeChild</span><br></code></pre></td></tr></table></figure><h4 id="改"><a class="markdownIt-Anchor" href="#改">#</a> 改:</h4><p>主要修改 dom 的元素属性，dom 元素的内容 属性，表单的值<br>修改元素属性 ： <code>src</code>   <code>href</code>   <code>title</code> <br> 修改普通元素内容：  <code>innerHTML</code>   <code>innerText</code> <br> 修改表单元素：  <code>value</code>   <code>type</code>   <code>disabled</code> <br> 修改元素样式：  <code>style</code>   <code>className</code></p><h4 id="查"><a class="markdownIt-Anchor" href="#查">#</a> 查:</h4><p>主要获取查询 DOM 元素<br> DOM 提供的 API 方法  <code>getElementById</code>     <code>getElementByTagName</code>     用法古老不推荐<br> H5 新增的方法：  <code>querySelector</code>    <code>querySelectorAll</code>    提倡<br>利用节点操作获取元素  父 <code>(parenNode)</code>  子 <code>(children)</code>  兄 <code>(previousElementSibling)</code>    ( <code>nextElementSibling)</code>   提倡</p><h4 id="属性操作"><a class="markdownIt-Anchor" href="#属性操作">#</a> 属性操作 :</h4><p>设置 DOM 的属性值： <code>setAttribute</code> <br> 得到 DOM 的属性值： <code>getAttribute</code> <br> 移除属性： <code>removeAttribute</code></p><h4 id="事件操作-目前学习的是鼠标类事件-经过点击离开移动之类"><a class="markdownIt-Anchor" href="#事件操作-目前学习的是鼠标类事件-经过点击离开移动之类">#</a> 事件操作：目前学习的是鼠标类事件 经过点击离开移动之类</h4><p>事件源。事件类型 = 事件处理程序.</p><h2 id="dom事件高级导读"><a class="markdownIt-Anchor" href="#dom事件高级导读">#</a> DOM 事件高级导读</h2><p>注册事件概述<br>给元素添加事件，称为注册事件或者绑定事件<br>注册事件由两种方式: <code>传统方式</code>    <code>方法监听注册方式</code></p><p><code>传统注册方式</code> ：利用 <code>on开头</code> 的事件   <code>onclick</code> <br> 特点：注册事件的 <code>唯一性</code> <br>同一个元素同一个事件 <code>只能设置一个处理函数</code> ，最后的处理函数会 <code>覆盖</code> 掉前面的处理函数</p><p><code>方法监听注册方式</code> :<br>w3c 标准推荐模式<br> <code>addEventListener()</code>    是一个 <code>方法</code> <br> IE9 之前不支持  可以使用  <code>attachEvent()</code>  代替其兼容性问题<br>特点：同一个元素同一个事件可以注册多个处理函数，并且按照注册顺序 <code>依次执行</code> <br>格式:  <code>eventTarget.addEventListener(type,listener[,useCapture])</code> <br> 接收三个参数:<br> <code>type</code> : 事件类型字符串 比如 click mouseover 不需要带 on<br> <code>listener</code> : 事件处理程序 事件被触发时，调用该函数  就是 function () {}<br> <code>useCapture</code> : 可选参数  <code>布尔值</code>  默认 false</p><p>案例: HTML 代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>传统事件注册方式<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>事件侦听注册事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>传统事件删除方式<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>事件侦听删除事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="传统事件注册方式"><a class="markdownIt-Anchor" href="#传统事件注册方式">#</a> 传统事件注册方式</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> btns = document<span class="hljs-selector-class">.querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>btns<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.onclick</span> = <span class="hljs-built_in">function</span>() &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;这是第一次注册&#x27;</span>)<br>&#125;<br>btns<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.onclick</span> = <span class="hljs-built_in">function</span>() &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;这是第二次注册&#x27;</span>)<br>&#125;<br><span class="hljs-comment">//后注册的事件会将第一次注册的事件覆盖掉</span><br></code></pre></td></tr></table></figure><p><code>alert('这是第一次注册')</code>  会被直接覆盖掉，无法显示<br><img src="https://image.dcaoao.com/image/202211252046325.png" alt=""></p><h3 id="事件侦听注册事件"><a class="markdownIt-Anchor" href="#事件侦听注册事件">#</a> 事件侦听注册事件</h3><p>需要注意的是，事件类型是字符串类型，而且不带 on<br> <code>btns[1].addEventListener('事件类型',function()&#123;&#125;</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">btns<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>() &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;事件侦听注册一次&#x27;</span>)<br>&#125;)<br>btns<span class="hljs-selector-attr">[1]</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>() &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;事件侦听注册二次&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>会依次执行，不会覆盖掉前面的事件<br><img src="https://image.dcaoao.com/image/202211252049374.gif" alt=""></p><h3 id="传统方式删除事件"><a class="markdownIt-Anchor" href="#传统方式删除事件">#</a> 传统方式删除事件</h3><p>使事件直接等于  <code>null</code>  即可</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">btns<span class="hljs-selector-attr">[2]</span><span class="hljs-selector-class">.onclick</span> = function () &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;事件已被删除&#x27;</span>)<br>    btns<span class="hljs-selector-attr">[2]</span><span class="hljs-selector-class">.onclick</span> = null<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件侦听删除事件"><a class="markdownIt-Anchor" href="#事件侦听删除事件">#</a> 事件侦听删除事件</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">btns<span class="hljs-selector-attr">[3]</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span> , fn)  <span class="hljs-comment">//这里注册事件，直接填写函数名</span><br><br>function fn () &#123;<br>    <span class="hljs-built_in">alert</span>(<span class="hljs-string">&#x27;首先注册事件&#x27;</span>)<br>    btns<span class="hljs-selector-attr">[3]</span><span class="hljs-selector-class">.removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn) <span class="hljs-comment">//然后函数内删除事件</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事件对象"><a class="markdownIt-Anchor" href="#事件对象">#</a> 事件对象</h3><p>1.e 就是一个事件对象 写到侦听函数的小括号内 当形参来看<br> 2. 事件对象只有存在事件后才会存在，是系统自动创建的，不需要传递参数<br> 3. 事件对象是事件一系列相关数据的集合，跟事件相关的，比如鼠标点击 鼠标坐标 如果是键盘事件则就包含键盘事件的信息，比如判断按下了哪个键<br> 4. 事件对象可以自己命名 event evt e 都可以 随便写<br> 5. 当然，也有兼容性问题 IE678 只能通过 windows.event 来获取 可以使用 e = e || windows.event 来解决兼容性问题</p><p>事件对象<br> <code>document.onclick = function(事件对象名) &#123;&#125;</code> <br> 传统方式获取事件对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> div = document.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div.onclick = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    e = e || windows.event  <span class="hljs-comment">//解决IE678的兼容性问题</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e)   <span class="hljs-comment">//返回的是一个对象  事件对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用事件监听方法进行获取事件对象</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e)<br>&#125;) <br></code></pre></td></tr></table></figure><h4 id="常见事件对象的属性和方法"><a class="markdownIt-Anchor" href="#常见事件对象的属性和方法">#</a> 常见事件对象的属性和方法</h4><p>1. <code>e.target</code>   返回的是触发事件的对象 (元素)    <code>this</code>  返回的是绑定事件的元素<br> 2. e.srcElement  也是返回触发事件的对象 但是为非标准 IE678 使用 一般不使用<br>两者的区别在于  <code>e.target</code>  只会谁触发就返回谁   <code>this</code>  只能返回绑定了事件的元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> ul = document.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>)<br><span class="hljs-comment">//此处给ul绑定了事件</span><br>ul.onclick = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    e = e || windows.event<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.target)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this)<br>&#125;<br><span class="hljs-comment">//输出可以看到 点击li, e.target会返回 li元素  this只能返回绑定了事件的 ul</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211252100544.gif" alt=""></p><h4 id="返回事件类型"><a class="markdownIt-Anchor" href="#返回事件类型">#</a> 返回事件类型</h4><p><code>e.type</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">ol</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>)<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span> , fn)<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span> , fn)<br><span class="hljs-selector-tag">ol</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span> , fn)<br><br>function fn (e) &#123;<br>    console<span class="hljs-selector-class">.log</span>(e.type)  <span class="hljs-comment">//会返回事件触发对象类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211252101483.png" alt=""></p><h4 id="阻止默认行为事件"><a class="markdownIt-Anchor" href="#阻止默认行为事件">#</a> 阻止默认行为 (事件)</h4><p>比如说链接不跳转  按钮不提交</p><p>事件监听写法阻止默认事件:<br>1. <code>preventDefault()</code></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 阻止默认行为(事件)  比如说链接不跳转  按钮不提交 --&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span>跳转链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><br><br>var a =<span class="hljs-built_in"> document</span>.querySelector(<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>//为a标签注册事件<br>a.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(e)&#123;<br>    //然后阻止其默认行为,也就是跳转<br>    e.preventDefault()<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>传统注册方式阻止默认事件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br>button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>   <span class="hljs-comment">//普通浏览器</span><br>   e.<span class="hljs-title function_">preventDefault</span>()<br>   <span class="hljs-comment">//低版本浏览器 兼容性问题 IE678</span><br>   e.<span class="hljs-property">returnValue</span>;<br>   <span class="hljs-comment">//最简单的写法,无需考虑兼容性问题  但是其后方的代码就无法执行了,需要注意</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>preventDefault () 还有其他用法:<br> 比如禁用右键菜单 contextmenu ，禁止选中文字 selectstart</p> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-comment">//禁用右键菜单contextmenu</span><br>document.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">contextmenu</span>&#x27;,<span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    e.prevent<span class="hljs-constructor">Default()</span><br>&#125;)<br><span class="hljs-comment">//禁止选中文字selectstart</span><br>document.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">selectstart</span>&#x27;,<span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>    e.prevent<span class="hljs-constructor">Default()</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="阻止冒泡冒泡排序"><a class="markdownIt-Anchor" href="#阻止冒泡冒泡排序">#</a> 阻止冒泡 &amp; 冒泡排序</h3><p>冒泡排序:<br> 当 addEventListener 的第三个参数为  <code>true</code>  时，事件会按照 <code>捕获顺序</code> 进行执行 document &gt; father &gt; son  其平时默认为 false<br> 在其值为 false 时 在父，子元素都拥有事件的时候，程序会按照 <code>冒泡排序</code> 进行依次传递执行 son &gt; father &gt; document</p><p>因为有冒泡排序的存在，点击 son 后，father 与 document 都被执行了<br><img src="https://image.dcaoao.com/image/202211252108377.gif" alt=""></p><p>这时候就需要阻止冒泡排序 使用  <code>e.stopPropagation()</code>  或者  <code>e.cancelBubble = true</code> <br> <code>e.stopPropagation()</code>  IE678 无法使用，这时候就需要使用   <code>e.cancelBubble = true</code>  来解决兼容性问题</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>father<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>son<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"> <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>)</span><br><span class="language-javascript"> son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>)</span><br><span class="language-javascript">    e.<span class="hljs-title function_">stopPropagation</span>()  <span class="hljs-comment">//在son处阻止冒泡排序</span></span><br><span class="language-javascript">    <span class="hljs-comment">// e.cancelBubble = true</span></span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>)</span><br><span class="language-javascript"> father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>)</span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;document&#x27;</span>)</span><br><span class="language-javascript"> &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 son 处阻止冒泡排序后，如果点击其父元素，发现冒泡排序操作还可以继续进行，如果需要继续阻止，则在父元素添加  <code>e.stopPropagation</code>  即可</p><h3 id="事件委托代理-委派"><a class="markdownIt-Anchor" href="#事件委托代理-委派">#</a> 事件委托 (代理 委派)</h3><p>要求点击任意一个 li 就可以出现弹窗，如果一个个的为 li 单独设置事件监听器就很麻烦，可以利用冒泡排序，在其父元素上设置节点，然后利用冒泡排序影响每个子节点<br>给 ul 注册点击事件，然后利用事件对象的 <code>target</code>  获取当前点击的 li, 因为点击了 li 事件会冒泡到 ul 上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;weituo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我弹框呢9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> weituo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.weituo&#x27;</span>)</span><br><span class="language-javascript">weituo.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;弹窗&#x27;</span>)  <span class="hljs-comment">//不管点击哪个li，都会出现弹窗</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>)  <span class="hljs-comment">//获取当前点击的li的内容 输出到控制台</span></span><br><span class="language-javascript">    e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;red&#x27;</span>   <span class="hljs-comment">//点击谁就将谁变为红色</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件委托的作用：只操作了一次 DOM 提高了程序的性能<br><img src="https://image.dcaoao.com/image/202211252113738.gif" alt=""></p><h3 id="鼠标事件对象"><a class="markdownIt-Anchor" href="#鼠标事件对象">#</a> 鼠标事件对象</h3><p>获取鼠标在可视区的 X Y 轴坐标: <code>e.clientX</code>   <code>e.clientY</code> <br> 获取鼠标在页面文档的 x 和 y 轴坐标:  <code>e.pageX</code>   <code>e.pageY</code> <br> 获取鼠标相对于电脑屏幕的 X Y 轴坐标 : <code>e.screenX</code>   <code>e.screenY</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">//client 获取鼠标在可视区的X Y 轴坐标  可视区是指浏览器可见页面</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.clientX)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.clientY)<br>    <span class="hljs-comment">//page  获取鼠标在页面文档的x和y轴坐标 IE9+支持</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.pageX)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.pageY)<br>    <span class="hljs-comment">//screen  获取鼠标相对于电脑屏幕的X Y轴坐标  从屏幕最边处开始计算</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.screenX)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.screenY)<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>MouseEvent</code>   只要鼠标移动就会被触发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202211261535451.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;X坐标为:&#x27;</span> + e.<span class="hljs-property">pageX</span> + <span class="hljs-string">&#x27;Y坐标为:&#x27;</span> + e.<span class="hljs-property">pageY</span>)</span><br><span class="language-javascript">        img.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">pageY</span> + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">        img.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">pageX</span> + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211262211812.gif" alt=""></p><h3 id="键盘事件对象"><a class="markdownIt-Anchor" href="#键盘事件对象">#</a> 键盘事件对象</h3><p><code>onkeyup</code>  任意按键被松开时触发   <code>不区分大小写</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.onkeyup = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;被松开了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>onkeydown</code>  任意按键被按下时触发  只要不松开就会被一直触发 不区分大小写</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.onkeydown = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;被按下了&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>onkeypress</code>  按键被按下时触发  只要不松开就会被一直触发  但是不识别功能键 ctrl shift 之类</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.onkeypress = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;被按下了-&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>这三个事件如果都存在，则执行的顺序是  <code>keydown</code>  -&gt;  <code>keypress</code>  -&gt;  <code>keyup</code></p><p>获取按键的 ASCII 码 并且区分大小写<br> <code>onkeypress</code>  可以获取键盘按下事件，并且区分大小写<br> <code>keyCode</code>  可以输出被按下键的 ASCII 值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">document.onkeypress = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e.keyCode)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-当按下键盘s键时输入框获得焦点-并且在输入框下方显示放大输入的内容"><a class="markdownIt-Anchor" href="#案例-当按下键盘s键时输入框获得焦点-并且在输入框下方显示放大输入的内容">#</a> 案例 当按下键盘 s 键时，输入框获得焦点 并且在输入框下方显示放大输入的内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* display:inline-block; */</span></span><br><span class="language-css">        <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0.2px</span> <span class="hljs-number">0.2px</span> <span class="hljs-number">15px</span> <span class="hljs-number">#666</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//使文本框获得焦点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">83</span>) &#123;</span><br><span class="language-javascript">            input.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//当输入框内有键盘事件 则显示放大框 </span></span><br><span class="language-javascript">        div.<span class="hljs-property">innerText</span> = input.<span class="hljs-property">value</span></span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">// 文本框失去焦点时,隐藏放大框</span></span><br><span class="language-javascript">    input.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//判断输入框是否为空,如果为空则不显示放大框,如果已经存在内容,则显示放大框</span></span><br><span class="language-javascript">    input.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (input.<span class="hljs-property">value</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">            div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果:<br><img src="https://image.dcaoao.com/image/202211262216022.gif" alt=""></p><h2 id="bom"><a class="markdownIt-Anchor" href="#bom">#</a> BOM</h2><h3 id="bom的构成"><a class="markdownIt-Anchor" href="#bom的构成">#</a> BOM 的构成</h3><p>window 对象是浏览器最顶级的对象，具有双重角色<br> 1. 他是 JS 中访问浏览器窗口的一个 <code>接口</code> <br> 2. 它是一个全局对象，定义在 <code>全局作用域</code> 中的变量 函数 都会变成 window 对象的属性和方法</p><p>在调用的时候可以省略 window, 比如  <code>alert()  prpompt()</code>  等  也可以写成 <code>window.alert()  window.prpompt()</code>    效果相同<br> window 下有一个特殊属性  <code>window.name</code>   一般变量命名不要使用</p><h3 id="window的常见事件"><a class="markdownIt-Anchor" href="#window的常见事件">#</a> window 的常见事件</h3><p>1. 窗口加载事件  <code>onload</code>   当文档内容完全加载完成后会被触发 包括图片 脚本 css 等<br> <code>window.onload</code>  可以把 JS 代码写到页面元素的上方 因为 onload 是页面 <code>全部加载完毕</code> 再去执行处理函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//传统方式注册 只能写一次，后面的onload会覆盖掉前面的  使用事件监听方式注册即可</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="language-javascript">            button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span> ,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;加载完毕1&#x27;</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//事件监听方式注册</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="language-javascript">            button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span> ,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;加载完毕2&#x27;</span>)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.DOM 加载事件  <code>DOMContentLoaded</code>  是 DOM 加载完毕 不包含图片 falsh css 等就可以执行 比 load 更快一些</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span> ,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;DOM加载完毕&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>3. 调整窗口大小事件查询</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//onresize 当窗口大小改变时就会被触发  一般用来使用响应式布局 配合window.innerWidth获取当前屏幕宽度</span><br>        window<span class="hljs-selector-class">.onresize</span> = function () &#123;&#125;<br>        window<span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;&#125;)<br><br>        window<span class="hljs-selector-class">.onresize</span> = function () &#123;<br>            console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;窗口大小改变&#x27;</span>)<br>            console<span class="hljs-selector-class">.log</span>(window.innerWidth)<br><br>            <span class="hljs-comment">//搭配window.innerWidth来响应式布局 </span><br>            <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>            <span class="hljs-comment">// 当窗口宽度小于800px,则隐藏div元素  反之则显示</span><br>            <span class="hljs-built_in">if</span>(window<span class="hljs-selector-class">.innerWidth</span> &lt; <span class="hljs-number">800</span>) &#123;<br>                <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.display</span> = <span class="hljs-string">&#x27;none&#x27;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.display</span> = <span class="hljs-string">&#x27;block&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="定时器"><a class="markdownIt-Anchor" href="#定时器">#</a> 定时器</h3><p>1. <code>setTimeout()</code>  一次性定时器<br>语法：  <code>windows.setTimeout(调用函数,延迟的毫秒数)</code> <br> 延时单位是毫秒 可以省略 省略默认为 0<br> 调用函数可以直接写函数  也可以直接写函数名 也可以  <code>'函数名()'</code> <br> 页面中有很多的定时器时 可以给定时器命名<br> setTimeout () 其中的函数被称为回调函数  <code>callback</code> <br> 普通函数式按照代码顺序直接调用，而回调函数，需要等待时间到了之后才会被执行<br>意思就是由前置条件 前置条件完成才会调用执行这个函数<br> <code>element.onclick = function()&#123;&#125;</code>   或者  <code>element.addEventListener('click',fn)</code>  里面的函数也是回调函数.</p><p>定时器内直接写函数:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> time1 = setTimeout(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;延迟函数被执行&#x27;</span>)<br>&#125;,<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>定时器调用外置函数:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//创建一个函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;外置函数调用&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">//调用函数</span><br>    <span class="hljs-keyword">var</span> time2 = setTimeout(say,<span class="hljs-number">6000</span>)<br></code></pre></td></tr></table></figure><p>1.1 停止定时器  <code>clearTimeout(停止的定时器名称)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timeout = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.timeout&#x27;</span>)<br>timeout.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(time2)<br>&#125;)<br></code></pre></td></tr></table></figure><p>2. <code>setInterval()</code>  重复调用函数定时器<br>语法：  <code>setInterval(调用函数，延时时间)</code> <br> 语法与 <code>setTimeout</code>  相同，时间到了之后便会去调用函数，重复调用</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> Interval = setInterval(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;setInterval 执行一次&#x27;</span>)<br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>2.1  停止 <code>setInterval</code>  定时器   <code>clearInterval(停止的函数名)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Interval</span>_btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.Interval&#x27;</span>)<br><span class="hljs-title class_">Interval</span>_btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(<span class="hljs-title class_">Interval</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="js执行机制"><a class="markdownIt-Anchor" href="#js执行机制">#</a> JS 执行机制</h3><p>IS 执行的时候，会将任务分为 <code>同步任务</code> 与 <code>异步任务</code> ，同步任务会先被执行，异步任务则等待同步任务执行完毕后才会被执行<br> JS 中异步任务一般是通过 <code>回调函数</code> 来执行<br> 1. 普通事件  <code>click</code>   <code>resize</code>  等<br> 2. 资源加载  <code>load</code>   <code>error</code>  等<br> 3. 定时器  <code>setInterval</code>   <code>SetTimeout</code>  等</p><p><code>同步任务</code> 相当于主线程，会不断的去异步任务线程池查看有没有新的任务，然后执行 这种机制被称为 <code>事件循环</code>  (event loop)</p><p><img src="https://image.dcaoao.com/image/202211271509704.png" alt=""></p><h3 id="location对象的属性"><a class="markdownIt-Anchor" href="#location对象的属性">#</a> location 对象的属性</h3><pre><code class="hljs">    location.href  //获取或者设置整个URL  如果给予一个新的地址，则会跳转到新的页面    location.host  //返回主机域名    location.port //返回端口号 如果未写则返回空字符串    location.pathname  //返回路径    location.search //返回参数    location.hash //返回片段 #后面内容 常见于锚点    location.assign()   //与href一样 可以跳转页面     location.replace()  //替换当前页面 但是不记录历史 因此不能后退页面    location.reload()  //刷新当前页面 相当于F5 如果参数为true则为 ctrl + F5</code></pre><p><code>www.baidu.com:80/index.html?name=1&amp;age=2#nov</code> <br> 主机域名：端口 / 路径？参数 #片段</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">button</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><span class="hljs-selector-tag">button</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>() &#123;<br>    <span class="hljs-comment">// location.assign()  重定向页面 可以后退</span><br>    location<span class="hljs-selector-class">.assign</span>(<span class="hljs-string">&#x27;http://baidu.com&#x27;</span>)<br>    <span class="hljs-comment">// location.replace() 替换页面 不可后退</span><br>    location<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&#x27;http://baidu.com&#x27;</span>)<br>    <span class="hljs-comment">// location.reload()  刷新页面 相当于f5</span><br>    location<span class="hljs-selector-class">.reload</span>(true)<br>&#125;)<br></code></pre></td></tr></table></figure><p>附带  <code>navigator对象</code>  包含了浏览器的相关信息 可以查看 UA</p><h4 id="案例-5秒后自动返回主页"><a class="markdownIt-Anchor" href="#案例-5秒后自动返回主页">#</a> 案例 5 秒后自动返回主页</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//案例 5秒后自动返回主页</span><br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">time</span> = <span class="hljs-number">5</span><br> <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>) <br> <span class="hljs-built_in">setInterval</span>(fn, <span class="hljs-number">1000</span>)<br> function <span class="hljs-built_in">fn</span>() &#123;<br>     time--<br>     <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.innerHTML</span> = <span class="hljs-string">&#x27;您将在&#x27;</span> + <span class="hljs-selector-tag">time</span> + <span class="hljs-string">&#x27;秒后返回主页&#x27;</span><br>     <span class="hljs-keyword">if</span> (<span class="hljs-selector-tag">time</span> == <span class="hljs-number">0</span>) &#123;<br>         location<span class="hljs-selector-class">.href</span> = <span class="hljs-string">&#x27;http://baidu.com&#x27;</span><br>     &#125;<br> &#125; <br></code></pre></td></tr></table></figure><h3 id="history对象"><a class="markdownIt-Anchor" href="#history对象">#</a> history 对象</h3><p><code>history</code>  对象可以为浏览器提供前进 后退 的功能<br> <code>history.back()</code>   // 后退页面<br> <code>history.forward()</code>   // 前进页面<br> <code>history.go(数字)</code>   // 正数前进，负数后退</p><h2 id="pc网页特效"><a class="markdownIt-Anchor" href="#pc网页特效">#</a> PC 网页特效</h2><h3 id="元素偏移量-offset系列"><a class="markdownIt-Anchor" href="#元素偏移量-offset系列">#</a> 元素偏移量 offset 系列</h3><p>offset 用来获取子元素距离父级元素的距离 前提是父级元素带有定位，如果没有父级元素或者没有定位 则以 <code>body为准</code> <br> <code>element.offsetParent</code>   返回该元素带有定位的父级元素 如果找不到则返回 body<br> <code>element.offsetTop</code>     返回带有 <code>定位</code> 的父级元素上方的距离<br> <code>element.offsetLeft</code>     返回带有 <code>定位</code> 的父级元素左方的距离<br> <code>element.offsetWidth</code>    返回包括自身 padding 边框 内容区的宽度 返回值 <code>不带单位</code> <br> <code>element.offsetHeight</code>   返回包括自身 padding 边框 内容区的高度 返回值 <code>不带单位</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.fu</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.zi</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;zi&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> fu = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.fu&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> zi = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.zi&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//offsetTop</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fu.<span class="hljs-property">offsetTop</span>)   <span class="hljs-comment">//因为 fu 的上层父元素是body 所以获取了body距离自己的距离</span></span><br><span class="language-javascript">    <span class="hljs-comment">//offsetLeft</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zi.<span class="hljs-property">offsetLeft</span>)   <span class="hljs-comment">//因为 zi 的上层父元素是fu 还带有定位  获取了fu距离自己的距离</span></span><br><span class="language-javascript">    <span class="hljs-comment">//offsetWidth</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fu.<span class="hljs-property">offsetWidth</span>)  <span class="hljs-comment">//返回 fu 的宽度  220</span></span><br><span class="language-javascript">    <span class="hljs-comment">//offsetHeight</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fu.<span class="hljs-property">offsetHeight</span>)  <span class="hljs-comment">//返回 fu 的高度  320</span></span><br><span class="language-javascript">    <span class="hljs-comment">//offsetParent</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(zi.<span class="hljs-property">offsetParent</span>)  <span class="hljs-comment">//zi 的父级元素是 fu 所以返回  fu标签</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>offset</code>  与 <code>style</code>  的区别</p><p><code>offset</code> :<br> <code>offset</code>  可以得到任意样式表中的样式值<br> <code>offset</code>  系列获取到的值没有单位<br> <code>offsetWidth</code>  获取到的值包含 padding+border+width<br> <code>offset</code>  获取到的值是只读属性，只能获取不能赋值<br>所以，获取元素的位置或者大小 使用 <code>offset</code>  更加合适</p><p><code>style</code> :<br> <code>style</code>  只能获取行内样式表的值<br> <code>style.width</code>  获得的是带有单位的字符串<br> <code>style.width</code>  获取到的值不包含 padding+border<br> <code>style.width</code>  是可读可写  可以取值也可以赋值<br>所以给元素更改数值 使用 <code>style</code>  更加合适</p><h3 id="案例-鼠标拖拽"><a class="markdownIt-Anchor" href="#案例-鼠标拖拽">#</a> 案例 鼠标拖拽</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">form</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            账号:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>            密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>)</span><br><span class="language-javascript">    form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//获取当前鼠标在移动框的坐标</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span> - form.<span class="hljs-property">offsetLeft</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span> - form.<span class="hljs-property">offsetTop</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//开始设置盒子坐标</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">XY</span> =  form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, shubiaoXY)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">shubiaoXY</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//使用鼠标距离页面的坐标减去鼠标在移动框中的坐标，获取到的是盒子的坐标，进而附加设置</span></span><br><span class="language-javascript">            form.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">pageX</span> - x + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">            form.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">pageY</span> - y + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//鼠标弹起,移除，也就是停止设置盒子坐标</span></span><br><span class="language-javascript">        <span class="hljs-comment">//鼠标弹起后执行</span></span><br><span class="language-javascript">        form.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//鼠标弹起后，只要鼠标移动，就移除设置盒子坐标函数</span></span><br><span class="language-javascript">            form.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,shubiaoXY)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211282058979.gif" alt=""></p><h3 id="元素可视区-client-系列"><a class="markdownIt-Anchor" href="#元素可视区-client-系列">#</a> 元素可视区 client 系列</h3><p><code>client</code>  翻译过来就是客户端 使用 client 系列来获取元素可视区的相关信息 可以动态获取到该元素的相关属性 边框大小 元素大小<br> <code>element.clientTop</code>    获取元素上边框的大小<br> <code>element.clientLeft</code>   获取元素左边框的大小<br> <code>clcmcnt.clientWidth</code>   获取自身包括 padding 内容区的宽度 不包含边框 不带单位<br> <code>clcmcnt.clientHeight</code>   获取自身包括 padding 内容区的高度 不包含边框 不带单位</p><h3 id="元素scroll-属性"><a class="markdownIt-Anchor" href="#元素scroll-属性">#</a> 元素 scroll 属性</h3><p><code>Element.scroll</code>  属性可以获取或设置一个元素的内容垂直滚动的像素数。<br> <code>scroll</code>  可以获取元素的大小 滚动间距等<br> <code>scrollY </code>   返回文档在垂直方向已滚动的像素值<br> <code>element.scrollTop</code>   获取元素被卷上去的上侧距离 返回值不带单位<br> <code>element.scrollLeft</code>  获取元素被卷去左侧的距离 返回值不带单位<br> <code>element.scrollWidth</code>  获取元素自身实际的宽度 不含边框 不带单位<br> <code>element.scrollHeight</code>  获取元素自身实际的高度 不包含边框 不带单位  实际高度是指内容的高度，而不是容器的高度</p><p><code>scroll</code>  是滚动事件，只要有滚动条就会被触发</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> = document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>scroll是滚动事件，只要有滚动条就会被触发<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br><span class="hljs-comment">//获取被滚动上去的距离</span><br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;获取被滚动上去的距离&#x27;</span> + <span class="hljs-selector-tag">div</span>.scrollTop)<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&#x27;获取实际高度&#x27;</span> + <span class="hljs-selector-tag">div</span>.scrollHeight)<br>                &#125;)<br></code></pre></td></tr></table></figure><h3 id="三大系列总结"><a class="markdownIt-Anchor" href="#三大系列总结">#</a> 三大系列总结</h3><p><code>element.offsetWidth</code>   返回自身包括 padding 边框 内容区的宽度 不带单位      常用于获取元素位置<br> <code>element.clientWidth</code>   返回自身包括 padding 内容区的宽度 不含边框 不带单位  常用于获取元素大小<br> <code>element.scrollWidth</code>   返回自身职级宽度 不含边框 不带单位                  常用于获取滚动距离<br>页面的滚动可以使用 <code>window.pageXOffset</code>  或者  <code>scrollY</code></p><p><img src="https://image.dcaoao.com/image/202211291948201.png" alt=""></p><h3 id="案例-淘宝侧边栏"><a class="markdownIt-Anchor" href="#案例-淘宝侧边栏">#</a> 案例 淘宝侧边栏</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.a1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.a2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: steelblue;</span><br><span class="language-css">    &#125; </span><br><span class="language-css">    <span class="hljs-selector-class">.a3</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.a5</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: royalblue;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">103px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.a6</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">103px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 页面内容 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a6&quot;</span>&gt;</span>返回顶部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取页面被卷去的头部大小</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a1&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a5 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a5&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a6 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.a6&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a5.<span class="hljs-property">offsetTop</span> - a1.<span class="hljs-property">scrollHeight</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//使用侧边栏距离顶部的距离 减去第一栏的高度  获取变化定位变化时的数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> fixedTop = a5.<span class="hljs-property">offsetTop</span> - a1.<span class="hljs-property">scrollHeight</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span>)   <span class="hljs-comment">//window.pageYOffset 获取页面被卷上去的高度  同等于 scrollY </span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span> &gt;= a1.<span class="hljs-property">scrollHeight</span>) &#123;</span><br><span class="language-javascript">            a5.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 设置下拉时参数变化</span></span><br><span class="language-javascript">            a5.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = fixedTop + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">            <span class="hljs-comment">// 返回顶部框显示</span></span><br><span class="language-javascript">            a6.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span></span><br><span class="language-javascript">            a6.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span></span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            a5.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;absolute&#x27;</span></span><br><span class="language-javascript">            a5.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">&#x27;150px&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 返回顶部框恢复</span></span><br><span class="language-javascript">            a6.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span></span><br><span class="language-javascript">            a6.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;absolute&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211292001305.gif" alt=""></p><h3 id="立即执行函数"><a class="markdownIt-Anchor" href="#立即执行函数">#</a> 立即执行函数</h3><p>立即执行函数有两种</p><ol><li><code>(function()&#123;&#125;)()</code>   可以看做一个小括号包含了匿名函数，然后最外部的一个小括号可以看做是调用了函数 可以写实参</li><li><code>(function()&#123;&#125;())</code>   一个小括号包含了匿名函数 花括号 小括号 最后一个小括号看做调用 可以写实参</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 第一种写法</span><br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">name1</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a + b)  <span class="hljs-comment">//结果为3</span><br>&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//传入实参  如果有多个立即执行函数 需要结尾处写分号来结束，不然会报错</span><br>    <br><span class="hljs-comment">// 第二种写法</span><br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">name2</span>(<span class="hljs-params">z,x</span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(z * x)<br>&#125;(<span class="hljs-number">6</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>立即执行函数的最大作用是 创建了第一独立的作用域 里面所有的变量都是局部变量 不会有命名冲突的情况，也是页面加载后第一个加载的函数</p><h3 id="动画的原理"><a class="markdownIt-Anchor" href="#动画的原理">#</a> 动画的原理</h3><p>1. 获取当前盒子位置 offset<br>2. 让盒子在当前位置加移动距离<br> 3. 使用定时器重复这个流程<br> 4. 添加一个定时器结束条件<br> 5. 元素记得定位<br> 6. 封装动画函数前，首先结束一次这个函数，防止多次触发<br> 7. 顺便为了避免小数的出现 使用向上取整 Math.ceil  与向下取整 Math.floor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d500&quot;</span>&gt;</span>按钮到500<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d800&quot;</span>&gt;</span>按钮到800<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> d500 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.d500&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> d800 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.d800&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">//动画函数封装</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yidong</span>(<span class="hljs-params">name, zhi ,huidiao</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//封装动画函数前，首先结束一次这个函数，防止多次触发</span></span><br><span class="language-javascript">        <span class="hljs-built_in">clearInterval</span>(name.<span class="hljs-property">gif</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用定时器重复这个流程，并且利用函数 给不同对象添加不同定时器</span></span><br><span class="language-javascript">        name.<span class="hljs-property">gif</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取当前盒子位置 offset  让盒子在当前位置加移动距离</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 匀速动画</span></span><br><span class="language-javascript">            <span class="hljs-comment">// name.style.left = name.offsetLeft + 3 + &#x27;px&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 缓动动画:</span></span><br><span class="language-javascript">            <span class="hljs-comment">//如果需要缓动动画，公式 ： （目标值 - 现在的位置） / 10   意义是先快后慢，到地方后停止</span></span><br><span class="language-javascript">            <span class="hljs-comment">//顺便为了避免小数的出现 使用向上取整Math.ceil  与向下取整 Math.floor</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//首先确定缓动动画的的变化值</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> bianhuazhi = (zhi - name.<span class="hljs-property">offsetLeft</span>) / <span class="hljs-number">10</span></span><br><span class="language-javascript">            <span class="hljs-comment">//查清是正数还是负数，正数向上取整 负数向下取整</span></span><br><span class="language-javascript">            bianhuazhi = bianhuazhi &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(bianhuazhi) : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(bianhuazhi)</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//然后赋值给缓动动画</span></span><br><span class="language-javascript">            name.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = name.<span class="hljs-property">offsetLeft</span> + bianhuazhi + <span class="hljs-string">&#x27;px&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//添加一个定时器结束条件</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (name.<span class="hljs-property">offsetLeft</span> == zhi) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">clearInterval</span>(name.<span class="hljs-property">gif</span>)</span><br><span class="language-javascript">                <span class="hljs-comment">//回调函数一般写在定时器结束条件内</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(huidiao) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">huidiao</span>()</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">50</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 动画函数调用</span></span><br><span class="language-javascript">    <span class="hljs-title function_">yidong</span>(div, <span class="hljs-number">300</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    d500.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">yidong</span>(span, <span class="hljs-number">500</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    d800.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">yidong</span>(span, <span class="hljs-number">800</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//封装的动画函数添加 回调函数  可以看做是第三个参数内直接添加了一个匿名函数</span></span><br><span class="language-javascript">    <span class="hljs-title function_">yidong</span>(span, <span class="hljs-number">800</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        span.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;blue&#x27;</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">//匀速动画:盒子当前位置 + 固定的值</span></span><br><span class="language-javascript">    <span class="hljs-comment">//缓动动画:盒子当前位置 + 变化的值   (目标值 - 当前位置) / 10</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>window.scroll(x,y)  用于返回顶部使用 添加点击事件,返回x,y坐标 不带单位<br></code></pre></td></tr></table></figure><h2 id="移动端特效"><a class="markdownIt-Anchor" href="#移动端特效">#</a> 移动端特效</h2><h3 id="classlist的使用"><a class="markdownIt-Anchor" href="#classlist的使用">#</a> classList 的使用</h3><p><code>classList</code>  可以为元素 追加类名 删除类型 以及切换类名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">div</span> =  document<span class="hljs-selector-class">.querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-comment">//追加类名</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.add</span>(<span class="hljs-string">&#x27;one&#x27;</span>)<br><span class="hljs-comment">//删除类名</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.remove</span>(<span class="hljs-string">&#x27;one&#x27;</span>)<br><span class="hljs-comment">//切换类名 如果元素没有这个类名 则为其添加 如果有，则删除</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.classList</span><span class="hljs-selector-class">.toggle</span>(<span class="hljs-string">&#x27;one&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="移动端触摸事件"><a class="markdownIt-Anchor" href="#移动端触摸事件">#</a> 移动端触摸事件</h3><p>1. 点击事件  <code>touchstart</code> <br> 只要手指点击了屏幕，动作就会被触发</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">div.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;点击事件触发&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212022004185.gif" alt=""><br>2. 移动事件  <code>touchmove</code></p><p>手指点击了屏幕不放，并且在移动，就会被触发</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">div.addEventListener(<span class="hljs-string">&#x27;touchmove&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;移动事件触发&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212022004284.gif" alt=""></p><p>3. 离开事件  <code>touchend</code> <br> 手指离开屏幕即可被触发</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">div.addEventListener(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;离开事件触发&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212022006691.gif" alt=""></p><h3 id="获取移动端元素事件"><a class="markdownIt-Anchor" href="#获取移动端元素事件">#</a> 获取移动端元素事件</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">div.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(e)  <span class="hljs-comment">//获取元素事件</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>其拥有以下属性<br><img src="https://image.dcaoao.com/image/202212022008866.png" alt=""><br> <code>touches</code>  获取正在触摸屏幕的手指列表的相关信息<br><img src="https://image.dcaoao.com/image/202212022010573.png" alt=""><br> <code>targetTouches</code>  正在触摸 DOM 元素的手指列表的相关信息<br><img src="https://image.dcaoao.com/image/202212022011214.png" alt=""><br> <code>changedTouches</code>  手指状态发生了改变的列表 从点击到离开 或者点击后移动的信息<br><img src="https://image.dcaoao.com/image/202212022012701.png" alt=""><br>一般都是触摸元素 使用的最多的是 <code>targetTouches</code></p><h3 id="案例-拖动盒子"><a class="markdownIt-Anchor" href="#案例-拖动盒子">#</a> 案例 拖动盒子</h3><p>拖动元素三部曲<br> 1. 触摸元素：获取手指初始坐标 获取盒子当前位置<br> 2. 移动手指：获取手指移动的距离 用当前坐标减去初始坐标 并且将值赋给盒子进行移动   盒子初始坐标 + 手指移动距离<br> 3. 离开手指</p><p>第一步，在点击事件中，获取点击的初始值以及盒子的初始位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//点击事件 touchstart</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, function (e) &#123;<br>    <span class="hljs-comment">//获取正在触摸dom元素的第一个点击坐标的相关信息</span><br>    x = e<span class="hljs-selector-class">.targetTouches</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.pageX</span><br>    y = e<span class="hljs-selector-class">.targetTouches</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.pageY</span><br>    <span class="hljs-comment">//获取初始盒子位置</span><br>    boxX = <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.offsetLeft</span><br>    boxY = <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.offsetTop</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>第二步，在移动事件中，获取移动中的坐标，减去点击事件中的初始坐标，就是移动的距离</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//移动事件 touchmove</span><br>    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>, function (e) &#123;<br><span class="hljs-comment">//获取手指移动的距离 使用移动坐标减去初始坐标,求出移动距离</span><br>        x1 = e<span class="hljs-selector-class">.targetTouches</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.pageX</span> - x<br>        y2 = e<span class="hljs-selector-class">.targetTouches</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.pageY</span> - y<br><br><br><span class="hljs-comment">//更改盒子位置   盒子原来的位置 + 手指移动的距离 = 盒子移动至当前距离</span><br>        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.left</span> = boxX + x1 + <span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.top</span> = boxY +  y2  + <span class="hljs-string">&#x27;px&#x27;</span><br><span class="hljs-comment">//最后阻止屏幕滚动的默认行为</span><br>    e<span class="hljs-selector-class">.preventDefault</span>()<br>    &#125;)<br></code></pre></td></tr></table></figure><p>效果图:<br><img src="https://image.dcaoao.com/image/202212022019953.gif" alt=""></p><h3 id="css3的图片过渡效果"><a class="markdownIt-Anchor" href="#css3的图片过渡效果">#</a> css3 的图片过渡效果</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">document</span>.style.transition = &#x27;<span class="hljs-literal">all</span> <span class="hljs-number">0</span>.<span class="hljs-number">3</span>s&#x27;<br></code></pre></td></tr></table></figure><h3 id="解决移动端click的300毫秒延迟"><a class="markdownIt-Anchor" href="#解决移动端click的300毫秒延迟">#</a> 解决移动端 click 的 300 毫秒延迟</h3><p>第一个解决办法<br>禁止缩放<br>第二个解决办法 使用 fastclick 插件<br>插件地址 <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a><br> 直接引入该 js，然后正常写即可</p><p>禁止缩放:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="轮播图的神-swipe插件使用"><a class="markdownIt-Anchor" href="#轮播图的神-swipe插件使用">#</a> 轮播图的神 Swipe 插件使用</h3><p>Swipe 插件可以快速创建轮播图，并且有许多样式可选<br>下载地址 <a href="https://www.swiper.com.cn/download/index.html">https://www.swiper.com.cn/download/index.html</a></p><p>第一步 ，引入相关样式:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;css/swiper-bundle.min.css&quot;</span>&gt;<br>&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;js/swiper-bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>第二步，去 demo 文件夹里的案例 中，挑选轮播图 并复制其 HTML 结构 也就是 Swiper  其下面的<br><img src="https://image.dcaoao.com/image/202212032213995.png" alt=""></p><p><img src="https://image.dcaoao.com/image/202212032213701.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!-- Swiper --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper mySwiper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-wrapper&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第三步。拷贝  <code>swiper</code>  类名的 CSS 样式至页面 CSS 样式表</p><p><img src="https://image.dcaoao.com/image/202212032214828.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.swiper</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-class">.swiper-slide</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>第四步，拷贝其 <code>JS</code>  代码，可以写进 js 文件内</p><p><img src="https://image.dcaoao.com/image/202212032215603.png" alt=""></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">var <span class="hljs-attr">swiper</span> <span class="hljs-operator">=</span> new Swiper(<span class="hljs-string">&quot;.mySwiper&quot;</span>, <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">  zoom:</span> true,<br><span class="hljs-symbol">  navigation:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    nextEl:</span> <span class="hljs-string">&quot;.swiper-button-next&quot;</span>,<br><span class="hljs-symbol">    prevEl:</span> <span class="hljs-string">&quot;.swiper-button-prev&quot;</span>,<br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-symbol">  pagination:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">    el:</span> <span class="hljs-string">&quot;.swiper-pagination&quot;</span>,<br><span class="hljs-symbol">    clickable:</span> true,<br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>效果图:<br><img src="https://image.dcaoao.com/image/202212032224994.gif" alt=""></p><h3 id="bootstrap轮播图"><a class="markdownIt-Anchor" href="#bootstrap轮播图">#</a> bootstrap 轮播图</h3><p>bootstrap 是一个 JS 框架，其拥有很多功能<br>轮播图功能是其其中一个<br>地址:<a href="https://v3.bootcss.com/javascript/#carousel">https://v3.bootcss.com/javascript/#carousel</a></p><p>引入相关文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">//引入jquery js  因为bootstrap依赖它<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//引入 bootstrap js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202212032156066.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//引入 bootstrap css<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后直接复制其 HTML 结构，到轮播图内<br><img src="https://image.dcaoao.com/image/202212032221073.png" alt=""><br><img src="https://image.dcaoao.com/image/202212032222388.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.lunbo</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css"></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lunbo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;carousel-example-generic&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel slide&quot;</span> <span class="hljs-attr">data-ride</span>=<span class="hljs-string">&quot;carousel&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Indicators --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-indicators&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">data-slide-to</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- Wrapper for slides --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;listbox&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item active&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202212032145174.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>                        ...<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202212032145207.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>                        ...<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://image.dcaoao.com/image/202212032146306.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-caption&quot;</span>&gt;</span><br>                        ...<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                ...<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- Controls --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left carousel-control&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-slide</span>=<span class="hljs-string">&quot;prev&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right carousel-control&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#carousel-example-generic&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">data-slide</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图:<br><img src="https://image.dcaoao.com/image/202212032226920.gif" alt=""></p><h2 id="本地存储"><a class="markdownIt-Anchor" href="#本地存储">#</a> 本地存储</h2><h3 id="本地存储-sessionstorage"><a class="markdownIt-Anchor" href="#本地存储-sessionstorage">#</a> 本地存储    <code>sessionStorage</code></h3><p>生命周期为关闭浏览器窗口<br>在同一个页面下 数据可以共享<br>使用键值对的形式存储</p><p>前提数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ipt1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ipt2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span>存储数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>清空数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ipt1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ipt1&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ipt2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ipt2&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> set = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.set&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> get = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.get&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> remove = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.remove&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> del = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.del&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>sessionStorage.setItem('数据名',数据值)</code>  存储数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">set<span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br>    <span class="hljs-selector-tag">var</span> va1 = ipt1<span class="hljs-selector-class">.value</span><br>    <span class="hljs-selector-tag">var</span> va2 = ipt2<span class="hljs-selector-class">.value</span><br>    <span class="hljs-comment">// sessionStorage.setItem(&#x27;数据名&#x27;,数据值)</span><br>    sessionStorage<span class="hljs-selector-class">.setItem</span>(<span class="hljs-string">&#x27;value1&#x27;</span>,va1)<br>    sessionStorage<span class="hljs-selector-class">.setItem</span>(<span class="hljs-string">&#x27;value2&#x27;</span>,va2)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052002455.gif" alt=""></p><p><code>sessionStorage.setItem('数据名')</code>  读取数据</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">get.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// sessionStorage.setItem(&#x27;数据名&#x27;)</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sessionStorage.getItem(<span class="hljs-string">&#x27;value1&#x27;</span>))<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(sessionStorage.getItem(<span class="hljs-string">&#x27;value2&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052003414.gif" alt=""><br> <code>sessionStorage.setItem('数据名')</code>  清除数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">remove.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">click</span>&#x27;,<span class="hljs-params">function</span>()</span>&#123;<br>    <span class="hljs-comment">// sessionStorage.removeItem(&#x27;数据名&#x27;)</span><br>    sessionStorage.remove<span class="hljs-constructor">Item(&#x27;<span class="hljs-params">value1</span>&#x27;)</span><br>    sessionStorage.remove<span class="hljs-constructor">Item(&#x27;<span class="hljs-params">value2</span>&#x27;)</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052004272.gif" alt=""></p><p><code>sessionStorage.clear()</code>  清除全部数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">del</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br>    <span class="hljs-comment">// sessionStorage.clear()</span><br>    sessionStorage<span class="hljs-selector-class">.clear</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052004906.gif" alt=""></p><h3 id="本地存储-localstorage"><a class="markdownIt-Anchor" href="#本地存储-localstorage">#</a> 本地存储    <code>localStorage</code></h3><p>生命周期永久生效 除非手动删除 否则关闭页面也会存在<br>可以多窗口共享 同一浏览器<br>使用键值对的形式存储</p><p>前提数据:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ipt1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ipt2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span>存储数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;remove&quot;</span>&gt;</span>删除数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>清空数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//生命周期永久生效 除非手动删除 否则关闭页面也会存在</span></span><br><span class="language-javascript">    <span class="hljs-comment">//可以多窗口共享 同一浏览器</span></span><br><span class="language-javascript">    <span class="hljs-comment">//使用键值对的形式存储</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ipt1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ipt1&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ipt2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ipt2&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> set = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.set&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> get = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.get&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> remove = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.remove&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> del = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.del&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>localStorage..setItem('数据名',数据值)</code>  存储数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">set<span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br>    <span class="hljs-selector-tag">var</span> va1 = ipt1<span class="hljs-selector-class">.value</span><br>    <span class="hljs-selector-tag">var</span> va2 = ipt2<span class="hljs-selector-class">.value</span><br>    <span class="hljs-comment">// localStorage..setItem(&#x27;数据名&#x27;,数据值)</span><br>    localStorage<span class="hljs-selector-class">.setItem</span>(<span class="hljs-string">&#x27;value1&#x27;</span>,va1)<br>    localStorage<span class="hljs-selector-class">.setItem</span>(<span class="hljs-string">&#x27;value2&#x27;</span>,va2)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052010421.gif" alt=""><br> <code>localStorage..setItem('数据名')</code>  读取数据</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">get.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// localStorage..setItem(&#x27;数据名&#x27;)</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(localStorage.getItem(<span class="hljs-string">&#x27;value1&#x27;</span>))<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(localStorage.getItem(<span class="hljs-string">&#x27;value2&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052011764.gif" alt=""><br> <code>localStorage.removeItem('数据名')</code>  清除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">remove.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// localStorage.removeItem(&#x27;数据名&#x27;)</span><br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;value1&#x27;</span>)<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;value2&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052011430.gif" alt=""><br> <code>localStorage.clear()</code>  清除全部数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">del</span><span class="hljs-selector-class">.addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-built_in">function</span>()&#123;<br>    <span class="hljs-comment">// localStorage.clear()</span><br>    localStorage<span class="hljs-selector-class">.clear</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052012152.gif" alt=""></p><h3 id="本地存储案例-记住用户名"><a class="markdownIt-Anchor" href="#本地存储案例-记住用户名">#</a> 本地存储案例 记住用户名</h3><p>如果本地存储内有数据，则直接取出给输入框<br>如果记住密码变为了勾选状态，则写入本地存储并且将值赋值输入框<br>如果未被选中，则清除本地数据</p><p><img src="https://image.dcaoao.com/image/202212052015499.gif" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;remember&quot;</span>&gt;</span> 记住用户名<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取元素 </span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.uname&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> remember = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.remember&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//如果本地存储内有数据，则直接取出来赋值给输入框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>)) &#123;</span><br><span class="language-javascript">        uname.<span class="hljs-property">value</span> = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//同时将复选框改为选中状态</span></span><br><span class="language-javascript">        remember.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    remember.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">//change 为状态发生改变就会被触发</span></span><br><span class="language-javascript">        <span class="hljs-comment">//如果复选框为选中 则将本地存储的值赋值给复选框</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(remember.<span class="hljs-property">checked</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>,uname.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//如果未被选中，则删除本地数据</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是:  <code>change</code>  为状态发生改变时就会被触发，这里用作于复选框被勾选触发事件</p><h2 id="数据可视化"><a class="markdownIt-Anchor" href="#数据可视化">#</a> 数据可视化</h2><p>常见的数据可视化库<br> <code>D3.js</code>    目前 Web 端评价最高的 Javascript 可视化工具 上手难<br> <code>ECharts.js</code>   百度出品的一个 Javascript 数据化可视库<br> <code>Highcharts.js</code>   国外的前端数据可视化库 商用免费<br> <code>AntV</code>  蚂蚁金服新一代数据可视化解决方案</p><p>数据可视化的目的：借助于图形化手段 清洗有效的传达与沟通信息<br>在互联网公司中经常用于通用数据报表 移动端图标 大屏可视化 图编辑等</p><h3 id="数据可视化-echarts-插件"><a class="markdownIt-Anchor" href="#数据可视化-echarts-插件">#</a> 数据可视化 ECharts 插件</h3><p>ECharts 插件可以快速生成各种数据可视化表单</p><p>官网链接: <a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><p>使用分五步:</p><p>1. 下载并引入 echarts.js<br>2. 准备一个具备大小的 Dom 容器<br> 3. 初始化 echart 示例对象<br> 4. 指定配置项和数据<br> 5. 将配置项设置给 echarts 实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- 1.下载并引入echarts.js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 2.准备一个具备大小的Dom容器 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 3.初始化echart示例对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> mychart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-comment">//   4. 指定配置项和数据</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;哇去，牛逼&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">tooltip</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;axis&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Email&#x27;</span>, <span class="hljs-string">&#x27;Union Ads&#x27;</span>, <span class="hljs-string">&#x27;Video Ads&#x27;</span>, <span class="hljs-string">&#x27;Direct&#x27;</span>, <span class="hljs-string">&#x27;Search Engine&#x27;</span>]</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">grid</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">right</span>: <span class="hljs-string">&#x27;4%&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">containLabel</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">toolbox</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">feature</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">saveAsImage</span>: &#123;&#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">boundaryGap</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>]</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Email&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: [<span class="hljs-number">120</span>, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Union Ads&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Video Ads&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: [<span class="hljs-number">150</span>, <span class="hljs-number">232</span>, <span class="hljs-number">201</span>, <span class="hljs-number">154</span>, <span class="hljs-number">190</span>, <span class="hljs-number">330</span>, <span class="hljs-number">410</span>]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Direct&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: [<span class="hljs-number">320</span>, <span class="hljs-number">332</span>, <span class="hljs-number">301</span>, <span class="hljs-number">334</span>, <span class="hljs-number">390</span>, <span class="hljs-number">330</span>, <span class="hljs-number">320</span>]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Search Engine&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">stack</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>, <span class="hljs-number">1320</span>]</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  ]</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">//5.将配置项设置给echarts</span></span><br><span class="language-javascript">    mychart.<span class="hljs-title function_">setOption</span>(option)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图:<br><img src="https://image.dcaoao.com/image/202212052020561.png" alt=""></p><p>其中，指定配置项和数据可以从 <a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a> 处获取<br> ECharts 官网提供了非常多的案例，可以直接获取使用</p><p>其中的配置和数据也不相同，可以查阅文档获知其作用<br><a href="https://echarts.apache.org/zh/option.html"> https://echarts.apache.org/zh/option.html</a></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">title</span>  标题组件<br>tooltip 提示框组件<br><span class="hljs-built_in">legend</span> 图例组件<br>toolbox 工具栏<br><span class="hljs-built_in">grid</span> 直角坐标系内绘图网格<br>xAxis <span class="hljs-built_in">grid</span>中的x轴<br>yAxis <span class="hljs-built_in">grid</span>中的y轴<br>series 系列列表 通过type决定使用什么图标 <br><span class="hljs-built_in">color</span> 数组形式 控制颜色  <span class="hljs-built_in">color</span>:[red,blue,ye]<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202212052024703.png" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录Hexo更换文章链接</title>
    <link href="/2551217376.html"/>
    <url>/2551217376.html</url>
    
    <content type="html"><![CDATA[<h2>前言</h2>hexo的文章链接，长且繁琐，如果文章标题带有中文，复制出来及其不美观<p>百度搜索之后找到一个插件 <span class="label label-success">hexo-abbrlink</span> 可以直接 NPM 命令安装</p><h2>安装</h2>安装指令：<p class="note note-info">npm install hexo-abbrlink --save</p><h2>更改配置文件</h2>安装过后直接打开博客根目录下的 `_config.yml` 替换`permalink`为 ：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">permalink:</span> posts/:abbrlink.html <br><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">    alg:</span> crc32  <br><span class="hljs-symbol">    rep:</span> hex   <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/strawdc/img/master/img/202210271209666.webp" alt=""></p><p>即可成功更改永久链接</p><p>其中 <code>alg</code>  与 <code>rep</code>  的值可以更改，下面附官方文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo-abbrlink官方文档 https://github.com/Rozbo/hexo-abbrlink">[1]</span></a></sup></p><blockquote><p>crc16 &amp; hex <a href="https://post.zz173.com/posts/66c8.html">https://post.zz173.com/posts/66c8.html</a></p><p>crc16 &amp; dec <a href="https://post.zz173.com/posts/65535.html">https://post.zz173.com/posts/65535.html</a></p><p>crc32 &amp; hex <a href="https://post.zz173.com/posts/8ddf18fb.html">https://post.zz173.com/posts/8ddf18fb.html</a></p><p>crc32 &amp; dec <a href="https://post.zz173.com/posts/1690090958.html">https://post.zz173.com/posts/1690090958.html</a></p></blockquote><h2>应用插件</h2>生成后需要先`hexo clean`清除一下Hexo的缓存，然后再`Hexo s`进行本地预览<p>插件应用后会在站点根目录 <code>\source\_posts\</code>  路径内的.md 文件，标题头内生成一个 <code>abbrlink: xxxxx</code>  的数据，这就是这篇文章的唯一链接</p><p>笔者对照文档修改：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">permalink:</span> :abbrlink.html  <span class="hljs-meta"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">    alg:</span> crc32   <span class="hljs-meta">#算法： crc16(default) and crc32</span><br><span class="hljs-symbol">    rep:</span> dec     <span class="hljs-meta">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>hexo-abbrlink 官方文档 <a href="https://github.com/Rozbo/hexo-abbrlink">https://github.com/Rozbo/hexo-abbrlink</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记，更换Hexo</title>
    <link href="/62868007.html"/>
    <url>/62868007.html</url>
    
    <content type="html"><![CDATA[<h1 id="记更换hexo"><a class="markdownIt-Anchor" href="#记更换hexo">#</a> 记，更换 Hexo</h1><p>搭建了 Hexo，也是不想维护服务器了，博客部署在 GitHub pages</p><p>博客来来回回更换了好几次，先是 WordPress，又换成了 Typecho，再是 Gridea，发现同步到 Github 不合适，又换成了现在的 Hexo，之前的博文也不想同步了，来来回回的折腾，也没正经弄过</p><p>也是打算当成博客写的</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271410191.webp" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时隔8个月更新一下博文</title>
    <link href="/999193260.html"/>
    <url>/999193260.html</url>
    
    <content type="html"><![CDATA[<p>8 个月没写博客，今天重新部署了一下系统环境，终于能重新连接上了</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
