<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>随身WIFI刷机记录</title>
    <link href="/717525190.html"/>
    <url>/717525190.html</url>
    
    <content type="html"><![CDATA[<p>来折腾一下这个随身 WIFI, 买到的没有卡槽，上一下全图 买到的型号是  <code>UFI1003_MB_VO2</code></p><p><img src="https://image.dcaoao.com/image/202211021808013.webp" alt=""></p><h2 id="连接设备"><a class="markdownIt-Anchor" href="#连接设备">#</a> 连接设备</h2><p>接下来，按住这个按钮不放手，将板子插入电脑 USB 接口内后，电脑提示音响起后，松开按钮<br><img src="https://image.dcaoao.com/image/202211021813908.webp" alt=""></p><p>电脑打开设备管理器 - 端口 查看是否有 9008<br><img src="https://image.dcaoao.com/image/202211021816756.webp" alt=""></p><p>有的话则进行下一步操作，没有则 <code>安装驱动</code></p><p>接下来打开 <code>miko</code>  按照下图依次点击 软件下载等则会在文尾<br><img src="https://image.dcaoao.com/image/202211021821906.webp" alt=""></p><p>输入下图所示的信息就代表已经链接上了<br><img src="https://image.dcaoao.com/image/202211021822598.webp" alt=""></p><h2 id="备份文件"><a class="markdownIt-Anchor" href="#备份文件">#</a> 备份文件</h2><p>折腾最重要的是留好后路，备份原始文件<br>点击下图所示开始备份<br><img src="https://image.dcaoao.com/image/202211021823168.webp" alt=""></p><p>进度条跑到 100% 就代表备份完成<br><img src="https://image.dcaoao.com/image/202211021824048.webp" alt=""></p><h2 id="开始刷机"><a class="markdownIt-Anchor" href="#开始刷机">#</a> 开始刷机</h2><p>这里我已经备份完成，开始折腾吧那就</p><p>打开 <code>MiFlash_x64.exe</code> , 点击刷新<br><img src="https://image.dcaoao.com/image/202211021832370.webp" alt=""></p><p>点击 <code>浏览</code> 选择刷机包，直接选择整个文件夹<br><img src="https://image.dcaoao.com/image/202211021914008.webp" alt=""></p><p>直接刷入<br><img src="https://image.dcaoao.com/image/202211021849383.webp" alt=""></p><p>这样就是完成了<br><img src="https://image.dcaoao.com/image/202211021854472.webp" alt=""></p><p>接着设备会自动重启，打开网络适配器选项，会发现有一个 NDIS 的网络<br><img src="https://image.dcaoao.com/image/202211021855743.webp" alt=""></p><h2 id="结束"><a class="markdownIt-Anchor" href="#结束">#</a> 结束</h2><p>浏览器内输入 <code>192.168.100.1</code>  键入密码 <code>admin</code>  即可进入管理<br>打开 <code>ARDC投屏</code> 即可查看设备，默认已经刷好了面具<br><img src="https://image.dcaoao.com/image/202211021858682.webp" alt=""></p><h2 id="另外折腾-刷机debian系统"><a class="markdownIt-Anchor" href="#另外折腾-刷机debian系统">#</a> 另外折腾 刷机 debian 系统</h2><p>首先下载刷机包<a class="btn" href="https://6l1ww5-my.sharepoint.com/:f:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EtHqVpUsMiJHiN-9VmVHjRMB86qpfYWnXHJsT2HNMRRcUQ?e=fSBFh5" title="title">下载地址</a>   <code>随身WiFi刷debian系统.zip</code></p><p>接着，继续按住文章开头的按钮，插入电脑，将设备进入到 fastboot 模式</p><p>由于我是 <code>UFI003</code>  型号，所以就解压这一版</p><p>点击文件夹内的 <code>flash.bat</code>  即可<br><img src="https://image.dcaoao.com/image/202211021928859.webp" alt=""></p><h2 id="软件下载链接"><a class="markdownIt-Anchor" href="#软件下载链接">#</a> 软件下载链接</h2><p><a class="btn" href="https://6l1ww5-my.sharepoint.com/:f:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EtHqVpUsMiJHiN-9VmVHjRMB86qpfYWnXHJsT2HNMRRcUQ?e=fSBFh5" title="title">下载地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redmi K50修补面具记录</title>
    <link href="/903904135.html"/>
    <url>/903904135.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>今天吃饱了没事干，手贱把已经修补面具了的手机加了几个模块，重启后没想到给我更新了系统版本，导致 ROOT 失效<br>那就再修补一次<br>发现从 13.0.22 的系统版本更新到了 13.0.24, 酷安内说这几个版本的 boot 好像都一样，我这是失效了，重新修补一遍</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作">#</a> 准备工作</h2><p>查看当前系统版本 去小米社区下载对应的线刷包</p><p><a class="btn" href="https://s.xiaomi.cn/c/x4QZppFE?channel=Share" title="title">传送门</a></p><p><img src="https://image.dcaoao.com/image/202210301845664.webp" alt=""></p><p>下载完成后里边还嵌套着一层压缩包，再次解压</p><p><img src="https://image.dcaoao.com/image/202210301912654.webp" alt=""></p><p><img src="https://image.dcaoao.com/image/202210301914553.webp" alt=""></p><p>进入 <code>images</code>  文件夹，找到 boot.img 把它单独揪出来</p><p>下一步将它传到手机里面，电脑再下载下面的一键修补工具</p><p class="note note-success"><a href="https://6l1ww5-my.sharepoint.com/:u:/g/personal/dcaoao_6l1ww5_onmicrosoft_com/EemLfT4c0stNuyWl9I5OpQ8Bs8HRNbSdJbWlVa9MLhTrmQ?e=auUFkO" title="title">下载地址</a></p><p>手机安装修补包内的 <code>magisk_v25.1.apk</code></p><p>打开刚刚安装的面具，点击安装<br><img src="https://image.dcaoao.com/image/202210301921860.webp" alt=""></p><p>选择并修补一个文件<br><img src="https://image.dcaoao.com/image/202210301921145.webp" alt=""></p><p>找到刚刚传入手机的 boot.img 修补它</p><p>这样就是修补成功了，红框圈出的是修补后的文件所在地<br><img src="https://image.dcaoao.com/image/202210301923319.webp" alt=""></p><p>再将修补后的 boot 文件回传到电脑，打开刚刚下载的修补包，进入其中的 <code>image</code>  文件夹，将修补后的文件拷贝进去</p><p><img src="https://image.dcaoao.com/image/202210301929235.webp" alt=""></p><p>包内有有一个 13.0.22 系统版本的 magisk.img, 如果不是这个版本的系统，将其移动出当前文件夹，再将刚刚修补的 boot 文件重命 <code>magisk.img</code></p><p>至此，准备工作就算是完成了</p><h2 id="准备刷入修补"><a class="markdownIt-Anchor" href="#准备刷入修补">#</a> 准备刷入修补</h2><p>手机打开开发者以及 USB 调试 USB 安装模式，原厂线连接上电脑，在此就不再赘述</p><p>管理员运行修补包内的  <code>Root工具箱.bat</code>  如果没装过驱动，那就先运行里边的安装驱动</p><p>然后使用重启选项进入 FASTBOOT 模式</p><p>进入 FASTBOOT 模式后 选择 <code>刷入面具</code></p><p><img src="https://image.dcaoao.com/image/202210301933745.webp" alt=""></p><p>刷入完成<br><img src="https://image.dcaoao.com/image/202210301939251.webp" alt=""></p><p>现在重启设备看看<br><img src="https://image.dcaoao.com/image/202210301944581.webp" alt=""></p><p>成功</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结">#</a> 总结</h2><p>这种方式适合不用清除数据，但是前提必须已经解开了 BL 锁</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid启用Giscus评论系统</title>
    <link href="/2131702785.html"/>
    <url>/2131702785.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>想给 Hexo 博客加一个 Giscus 评论系统，使用的 Fluid 主题又刚好集成了该评论系统，水一篇博文</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作">#</a> 准备工作</h2><p>Giscus 评论系统需要一个 Github 仓库才能使用，无需自建服务，轻量化系统</p><p>首先进入仓库，点击设置<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271443147.webp" alt=""></p><p>下滑，找到  <code>Discussions </code>  将其打钩选中</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271445349.webp" alt=""></p><p>然后在 Github 内安装 Giscus 插件<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Giscus插件安装 https://github.com/apps/giscus">[2]</span></a></sup>  <a href="https://github.com/apps/giscus">插件安装</a></p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271446184.webp" alt=""></p><h2 id="官方页面生成配置信息"><a class="markdownIt-Anchor" href="#官方页面生成配置信息">#</a> 官方页面生成配置信息</h2><p>打开<a href="https://giscus.app/zh-CN"> Giscus 官方页面</a>，开始配置仓库地址：Giscus<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Giscus https://giscus.app/zh-CN">[1]</span></a></sup></p><p>在仓库选项下，输入要使用的仓库路径： <code>github用户名/仓库名</code> <br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271449711.webp" alt=""></p><p>页面 ↔️ discussion 映射关系这个按需选择最适合自己的那个，这里笔者选择了第二个<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271451880.webp" alt=""></p><p>Discussion 分类则按照官方推荐即可<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271454342.webp" alt=""></p><p>剩下的默认或者按需选择即可</p><p>此刻，giscus 已经按照你填写的内容生成了配置文件</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271457472.webp" alt=""></p><p>将其填入 fluid 配置文件即可开启使用</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271507488.webp" alt=""></p><p>评论后还有邮件通知<br><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271508089.webp" alt=""></p><h2 id="启用效果"><a class="markdownIt-Anchor" href="#启用效果">#</a> 启用效果:</h2><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271509444.webp" alt=""></p><h2 id="收尾"><a class="markdownIt-Anchor" href="#收尾">#</a> 收尾</h2><p>Giscus 评论系统有一个优点，但也是一个小缺点<br>评论只能登录授权 Github 后才能进行评论，无法匿名评论之类，适合开发者使用<br>而且支持 Markdown 语法，评论存储在 Github，无需服务器维护，属于是用上了就不用管了系列</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Giscus <a href="https://giscus.app/zh-CN">https://giscus.app/zh-CN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Giscus 插件安装 <a href="https://github.com/apps/giscus">https://github.com/apps/giscus</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习记录</title>
    <link href="/902688608.html"/>
    <url>/902688608.html</url>
    
    <content type="html"><![CDATA[<h2 id="10月27号-交换两个变量值笔记"><a class="markdownIt-Anchor" href="#10月27号-交换两个变量值笔记">#</a> 10 月 27 号 交换两个变量值笔记</h2><h2 id="交换思路"><a class="markdownIt-Anchor" href="#交换思路">#</a> 交换思路</h2><p>首先是交换前的思路：需要把 A1 变量值交换到 A2 变量值，A2 变量值交换到 A1 内，那就需要有个第三者来辅助这俩交换</p><h2 id="实际操作"><a class="markdownIt-Anchor" href="#实际操作">#</a> 实际操作</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#首先声明三个变量：A1,A2,kong</span><br><span class="hljs-comment"># kong变量只声明 不赋值</span><br>var <span class="hljs-built_in">A1</span> = <span class="hljs-number">1</span>,<br><span class="hljs-built_in">A2</span> = <span class="hljs-number">2</span>;<br>var kong;<br><br><br><span class="hljs-comment">#然后将A1内的值，先交换到kong内</span><br>kong = <span class="hljs-built_in">A1</span><br><span class="hljs-comment">#此时A1是空出来的状态，那就把A2塞到A1里边去</span><br><span class="hljs-built_in">A2</span> = <span class="hljs-built_in">A1</span><br><span class="hljs-comment">#现在A2空出来了 kong里边还蹲着原先A1的值，把他送进A2里边</span><br><span class="hljs-built_in">A2</span> = kong<br><br><span class="hljs-comment">#最后输出到控制台看看</span><br><br>console.log(<span class="hljs-built_in">A1</span>)<br>console.log(<span class="hljs-built_in">A2</span>)<br></code></pre></td></tr></table></figure><h2 id="结果"><a class="markdownIt-Anchor" href="#结果">#</a> 结果</h2><p>结果图：<br><img src="http://image.dcaoao.com/image/202210281458332.webp" alt=""></p><h2 id="笔记-变量名命名规范"><a class="markdownIt-Anchor" href="#笔记-变量名命名规范">#</a> 笔记 变量名命名规范:</h2><pre><code class="hljs"> 严格区分大小写 不能以数字开头 只能大写小写下划线和$ 不能是关键词或者保留字 var for之类 变量名必须有意义 实在不行用翻译网站吧 遵循驼峰命名法 首字母小写 后边的统统大写 nameTopRight name有特殊含义，尽量不要使用为什么需要变量：因为有数据需要保存变量是什么：变量是一个容器，存放数据，方便调用变量的本质是什么：申请内存中的一块空间变量怎么使用：先声明，再赋值什么是变量的初始化：声明并赋值就是初始化变量命名规范？：看上边交换两个变量的思路？，需要一个空变量来辅助，1交换到2 3交换到1 最后2交换到3来实现1和3的变量值互换</code></pre><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#JS的变量数据类型，只有在程序运行中才可以确定类型，根据变量值来确定的</span><br><br><span class="hljs-built_in">var</span> A1 = <span class="hljs-number">10</span>；  <span class="hljs-meta">#这是一个数字型</span><br><span class="hljs-built_in">var</span> A2 = <span class="hljs-string">&#x27;阿巴阿巴&#x27;</span>; <span class="hljs-meta">#这是一个字符串类型</span><br></code></pre></td></tr></table></figure><p>但是，在 JS 中，JS 是动态语言，变量的数据类型是可以变化的</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> A1 = <span class="hljs-number">10</span>；  <span class="hljs-meta">#这是一个数字型</span><br>A1 = <span class="hljs-string">&#x27;阿巴阿巴&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这样 A1 变量就会更改为字符串类型</p><h2 id="1029号笔记"><a class="markdownIt-Anchor" href="#1029号笔记">#</a> 10.29 号笔记</h2><h2 id="字符串拼接和检测字符串长度"><a class="markdownIt-Anchor" href="#字符串拼接和检测字符串长度">#</a> 字符串拼接和检测字符串长度</h2><p>首先是检测字符串的长度，使用的是  <code>length</code>  变量</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#首先声明并赋值一个变量</span><br>var my1 = <span class="hljs-string">&#x27;我的天哪,看看这句话&#x27;</span><br><span class="hljs-comment">#然后检测变量长度并输出</span><br>console.<span class="hljs-built_in">log</span> (my1.<span class="hljs-built_in">length</span>)<br><span class="hljs-comment">#这样会把这句话的字符串长度输出至控制台</span><br></code></pre></td></tr></table></figure><h2 id="字符串拼接"><a class="markdownIt-Anchor" href="#字符串拼接">#</a> 字符串拼接</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(&#x27;1&#x27; + &#x27;1&#x27;)  <span class="hljs-meta">#字符串与字符串相加,还是字符串  结果为11</span><br>console.<span class="hljs-built_in">log</span>(&#x27;1&#x27; + <span class="hljs-number">1</span>)  <span class="hljs-meta">#字符串与数字相加,还是字符串  结果为11</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)  <span class="hljs-meta">#两者都是数值型 数值型相加   结果为2</span><br>console.<span class="hljs-built_in">log</span>(&#x27;学习&#x27; + &#x27;JS&#x27;)  <span class="hljs-meta">#字符串与字符串相加 结果为学习JS</span><br>console.<span class="hljs-built_in">log</span>(&#x27;学习&#x27; + <span class="hljs-number">66</span>)  <span class="hljs-meta">#字符串与数值型数据相加,还是字符串类型 结果为 学习66</span><br></code></pre></td></tr></table></figure><p>字符串拼接小结：字符串与任何类型数据拼接，结果都是字符串类型</p><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#首先是八进制在JS中的写法,八进制在JS中默认为0开头的就是八进制数值</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">010</span>;<br>console.log(my1)   <span class="hljs-comment">#这样输出的结果为8</span><br><br><br><span class="hljs-comment">#十六进制的写法和八进制稍有不同  只要变量值为0x开头的,默认就是十六进制</span><br><span class="hljs-keyword">var</span> my2 = <span class="hljs-number">0xa</span><br>console.log(my2)  <span class="hljs-comment">#这样输出的结果为10</span><br><br><span class="hljs-comment">#JS中最大值与最小值 仅做了解</span><br>console.log(<span class="hljs-built_in">Number</span>.MAX_VALUE)  <span class="hljs-comment">#最大值</span><br>console.log(<span class="hljs-built_in">Number</span>.MIN_VALUE)  <span class="hljs-comment">#最大值</span><br><br><span class="hljs-comment">#无穷大与无穷小  Infinity</span><br>console.log(<span class="hljs-literal">Infinity</span>)  <span class="hljs-comment">#无穷大</span><br>console.log(-<span class="hljs-literal">Infinity</span>)  <span class="hljs-comment">#无穷小</span><br>console.log(<span class="hljs-string">&#x27;字符串类型&#x27;</span> - <span class="hljs-number">100</span>)  <span class="hljs-comment">#需要注意的是字符串类型与数值型数据进行计算,会得到结果 NaN 代表非数值</span><br><br><span class="hljs-comment">#判断是否非数字 isNaN</span><br>console.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">12</span>))  <span class="hljs-comment">#如果发现是数字,那就返回值false</span><br>console.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;12&#x27;</span>))  <span class="hljs-comment">#如果发现不是是数字,那就返回值true</span><br><br><span class="hljs-comment">#字符串类型</span><br><br><span class="hljs-keyword">var</span> my3 = <span class="hljs-string">&#x27;这是一个字符串类型 \n 的文字&#x27;</span>   <span class="hljs-comment">#字符串类型的文字一般使用单引号 &#x27;  或者双引号 &quot; 来包裹</span><br>                                    <span class="hljs-comment">#可以使用换行符等转义符,引号包裹内单外双,或者外双内单</span><br><br><span class="hljs-comment">#转义符：</span><br>    <span class="hljs-comment">#换行符：\n</span><br>    <span class="hljs-comment">#斜杠：\\</span><br>    <span class="hljs-comment">#单引号：\&#x27;</span><br>    <span class="hljs-comment">#双引号:\&quot;</span><br>    <span class="hljs-comment">#TAB缩进：\t</span><br>    <span class="hljs-comment">#空格:\b </span><br><br><span class="hljs-comment">#一个小案例</span><br> alert(<span class="hljs-string">&#x27;酷热难耐\n 审视四周\n豪气冲天\n“收狗，收大狗，收大猫&quot;\n&quot;收鸡，收鸭，收鹅，收扁嘴&quot;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>案例结果:<br><img src="https://image.dcaoao.com/image/202210292014727.webp" alt=""></p> <figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">##接下来就是true和false</span><br>var my1 = <span class="hljs-literal">true</span>  <span class="hljs-meta">#声明true和false两个变量值</span><br>var my2 = <span class="hljs-literal">false</span><br><br><span class="hljs-meta">#在JS计算当中,true的值默认为1 false的值默认为0</span><br>console.<span class="hljs-built_in">log</span>(my1+ <span class="hljs-number">1</span>)  <span class="hljs-meta">#结果为2</span><br>console.<span class="hljs-built_in">log</span>(my2+ <span class="hljs-number">1</span>)  <span class="hljs-meta">#结果为1</span><br><br><span class="hljs-meta">#null 存储为空</span><br>var my3 = <span class="hljs-literal">null</span><span class="hljs-comment">;</span><br>console.<span class="hljs-built_in">log</span> (my3 + <span class="hljs-number">1</span>)   <span class="hljs-meta">#空值与+相加 结果为1</span><br><span class="hljs-meta">#如果是字符串与空值相加,那还是字符串</span><br><span class="hljs-meta">#同理,与上方true相加的话,结果为2</span><br><br><span class="hljs-meta">#只声明 不赋值 也是空值</span><br>var my5<span class="hljs-comment">;</span><br>console.<span class="hljs-built_in">log</span>(my5)  <span class="hljs-meta">#这样输出的结果为undefined</span><br>console.<span class="hljs-built_in">log</span>(my5 + <span class="hljs-string">&#x27;拼接&#x27;</span>)  <span class="hljs-meta">#这样输出的结果为 undefined拼接 因为是字符串与空值拼接</span><br>console.<span class="hljs-built_in">log</span>(my5 + <span class="hljs-number">1</span>)  <span class="hljs-meta">#至于空值与数值型数据相加 那就会返回结果为 NaN 非数值</span><br></code></pre></td></tr></table></figure><h2 id="获取变量的数据类型-typeof"><a class="markdownIt-Anchor" href="#获取变量的数据类型-typeof">#</a> 获取变量的数据类型 typeof</h2><p>使用 <code>typeof</code>  来判断数据类型</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">10</span> ) <span class="hljs-comment">#输出 number 数值型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;10&#x27;</span>) <span class="hljs-comment">#输出 string 字符串类型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>) <span class="hljs-comment">#输出 boolean 布尔型</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) <span class="hljs-comment"># 空值还是输出空值 undefined</span><br>console.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>)  <span class="hljs-regexp">//</span>输出 objest  这个<span class="hljs-literal">null</span>比较特殊<br></code></pre></td></tr></table></figure><p>结果:<br><img src="https://image.dcaoao.com/image/202210292114372.webp" alt=""></p><p>需要注意的是  <code>prompt</code>  输入过来的数据，默认是字符串类型的</p><p>控制台输出的数据颜色代表着不同的数据类型，可以通过控制台数据不同颜色来判断数据的类型<br>控制台输出的颜色<br>浅蓝色：数值型<br>黑色：字符串型<br>蓝色：布尔型<br>灰色：空值<br><img src="https://image.dcaoao.com/image/202210292118055.webp" alt=""></p><h2 id="变量数据的类型转换"><a class="markdownIt-Anchor" href="#变量数据的类型转换">#</a> 变量数据的类型转换</h2><h3 id="数值型转换为字符串"><a class="markdownIt-Anchor" href="#数值型转换为字符串">#</a> 数值型转换为字符串</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta"># 使用变量 .toString  需要严格遵守大小写</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">1</span>;  <span class="hljs-meta">#现在它是数值型</span><br><span class="hljs-keyword">var</span> my1 = my1.toString();   <span class="hljs-meta">#现在就不是了,被残忍的更改为了字符串类型</span><br><br><span class="hljs-meta">#或者使用 String();  可强制转换为字符串类型</span><br>console.log(<span class="hljs-keyword">String</span>(my1))<br><br><span class="hljs-meta">#再或者使用拼接字符串的特性,字符串与任何数据拼接都是字符串类型</span><br>console.log(my1 + <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-meta">#直接拼接一个空的字符串</span><br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202210292126988.webp" alt=""><br>之前学习过，数值型在控制台的颜色是浅蓝色，现在是灰色，证明是字符串类型</p><h3 id="将字符串转换为数值型"><a class="markdownIt-Anchor" href="#将字符串转换为数值型">#</a> 将字符串转换为数值型</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#1.使用变量parseInt</span><br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;<span class="hljs-number">123</span>px阿巴阿巴&#x27;)) #输出<span class="hljs-number">120</span>,只能取整数<br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27;)) #如果带有小数,则只输出<span class="hljs-number">123</span> 小数直接舍弃,不四舍五入<br><span class="hljs-attribute">console</span>.log(parseInt(&#x27;a123.<span class="hljs-number">6</span>&#x27;)) #如果是字母开头那就拉胯了,不会取值 直接输出结果为 NaN 非数值<br><br><span class="hljs-comment">#2.使用变量parseFloat 也是需要注意大小写</span><br><span class="hljs-attribute">console</span>.log(parseFloat(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27;))  #输出结果<span class="hljs-number">123</span>.<span class="hljs-number">6</span><br><span class="hljs-comment">#使用结果与parseInt几乎相同,不同的地方就是可以输出小数 浮点数</span><br><br><span class="hljs-comment">#3.使用Number() </span><br><span class="hljs-attribute">console</span>.log(Number(<span class="hljs-number">123</span>.<span class="hljs-number">6</span>))  #可以完整输出小数浮点数<br><br><span class="hljs-comment">#4.使用算数运算符来隐形更改为数值型</span><br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; - <span class="hljs-number">0</span>)    #添加运算符后,会被转换为数值型<br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; * <span class="hljs-number">1</span>)    #减法使用<span class="hljs-number">0</span>即可,乘法和除法使用<span class="hljs-number">1</span><br><span class="hljs-attribute">console</span>.log(&#x27;<span class="hljs-number">123</span>.<span class="hljs-number">6</span>&#x27; / <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="1030号笔记"><a class="markdownIt-Anchor" href="#1030号笔记">#</a> 10.30 号笔记</h2><h3 id="将字符串转换为布尔型"><a class="markdownIt-Anchor" href="#将字符串转换为布尔型">#</a> 将字符串转换为布尔型</h3><p>使用函数 Boolean () 代表空的值 否定的值都会被转换为 false 其他的都会被转换为 true</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#空值会被输出为false<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(NaN))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(null))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(undefined))<br><br>#只要有数据,就会被转换为true<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>))<br>console<span class="hljs-selector-class">.log</span>(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;123&#x27;</span>))<br><br>#小案例<br><br><span class="hljs-selector-tag">var</span> my2 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的姓名&#x27;</span>)<br><span class="hljs-selector-tag">var</span> my3 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的性别&#x27;</span>)<br><span class="hljs-selector-tag">var</span> my5 = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">( <span class="hljs-string">&#x27;您的姓名是:&#x27;</span> + my2 + <span class="hljs-string">&quot;\n您的年龄是:&quot;</span> + my5 + <span class="hljs-string">&quot;\n您的性别是:&quot;</span> + my3 )</span></span><br>    <br></code></pre></td></tr></table></figure><h2 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符">#</a> 算数运算符</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#算数运算符 遵循先乘除 后加减,优先括号内的原则</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 2</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> - <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 0</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> * <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 1</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> / <span class="hljs-number">1</span>)   <span class="hljs-meta">#结果 1</span><br><br><span class="hljs-meta">#取余操作  除法运算后余下的数</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">8</span> % <span class="hljs-number">4</span>)  <span class="hljs-meta">#0</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">8</span> % <span class="hljs-number">7</span>)  <span class="hljs-meta">#1</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">7</span> % <span class="hljs-number">8</span>)  <span class="hljs-meta">#7</span><br><br><span class="hljs-comment">// 浮点数 算数运算中的小数奇数运算会有问题 JS中小数最高精度为17位</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>)  <span class="hljs-comment">//0.30000000000000004</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>) <span class="hljs-comment">//7.000000000000001</span><br><br><span class="hljs-comment">//比较  不能拿浮点数进行比较 尽量避免</span><br>var my1 = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;<br>console.<span class="hljs-built_in">log</span>(my1 ==<span class="hljs-number">0.3</span>)  <span class="hljs-comment">//询问my1是否等于0.3  答案是false</span><br><br></code></pre></td></tr></table></figure><h3 id="表达式和返回值"><a class="markdownIt-Anchor" href="#表达式和返回值">#</a> 表达式和返回值</h3><p>表达式就是由数字 运算符 变量等组成的式子叫表达式<br>在程序中，结果在左，表达式在右</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>)<br><span class="hljs-comment">//在程序中，结果在左，表达式在右</span><br><span class="hljs-keyword">var</span> my2 = <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="前置自增运算符"><a class="markdownIt-Anchor" href="#前置自增运算符">#</a> 前置自增运算符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先是传统的做法</span><br><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">1</span><br>my1 = my1 + <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my1)  <span class="hljs-comment">//结果等于2</span><br><br></code></pre></td></tr></table></figure><p>这样的写法不仅麻烦还繁琐</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 前置自增运算符   先自加1，后出结果</span><br><span class="hljs-keyword">var</span> my5 = <span class="hljs-number">1</span><br>++my5;  <span class="hljs-comment">//与上方的my1 = my1+1效果相同   这里等于my5 = my5 + 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my5)  <span class="hljs-comment">//结果为2</span><br>--my5;   <span class="hljs-comment">//这是前置递减用法，用法与前置递增相同</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my5)<br><br><span class="hljs-comment">//小例子</span><br><span class="hljs-keyword">var</span> my6 = <span class="hljs-number">1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(++my6 + <span class="hljs-number">10</span>)  <span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h3 id="后置自增运算符"><a class="markdownIt-Anchor" href="#后置自增运算符">#</a> 后置自增运算符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//后置自增运算符 先返回原值，在自加1</span><br><span class="hljs-keyword">var</span> my7 = <span class="hljs-number">1</span><br>my7++;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my7)  <span class="hljs-comment">//此时,结果为2</span><br><br><span class="hljs-comment">//但是如果参与了运算</span><br><br>    <span class="hljs-keyword">var</span> my8 = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my8++ + <span class="hljs-number">10</span>)  <span class="hljs-comment">//这样的结果为11 因为先返回了原值 1</span><br></code></pre></td></tr></table></figure><p>自增运算符案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//前置自增案例</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>++a;      <span class="hljs-comment">//前置自增,当前a等于11</span><br><span class="hljs-keyword">var</span> b = ++a + <span class="hljs-number">2</span>  <span class="hljs-comment">//a再次自增  ++a当前为 12   12+2=14</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b)    <span class="hljs-comment">//结果为14</span><br><br><span class="hljs-comment">//后置自增案例</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">10</span>;<br>c++;        <span class="hljs-comment">//后置自增 ,当前值为11</span><br><span class="hljs-keyword">var</span> d = c++ + <span class="hljs-number">2</span>;   <span class="hljs-comment">//再次后置自增  先输出原值:11  11+2 结果为13</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(d)      <span class="hljs-comment">//13</span><br><br><br><span class="hljs-comment">//综合案例</span><br><span class="hljs-keyword">var</span> e = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> f = e++ + ++e;  <span class="hljs-comment">//先后置自增, e++输出原值:10 加上前置自增,到++e时原值已经变为11 再次+1   ++e输出值为12</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(f)      <span class="hljs-comment">//输出结果 10+12=22</span><br><br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符">#</a> 比较运算符</h2><p>比较运算符只会输出布尔值 true 与 false</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">大于 &gt;<br>小于 &lt;<br>大于等于 &gt;=<br>小于等于 &lt;=<br>不等于 !=<br>等于 ==      <span class="hljs-comment">//有隐形转换,会将字符串类型转换为数值型</span><br>全等于 ===   <span class="hljs-comment">//意思是数据类型与数值需要完全相等</span><br><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &gt;= <span class="hljs-number">5</span>)  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &lt;= <span class="hljs-number">5</span>)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-number">3</span>)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-number">5</span>)  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> == <span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">//true  判断是否相等有隐形转换 将字符串类型转换为数值型</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> != <span class="hljs-number">3</span>)  <span class="hljs-comment">//判断3是否不等于3 返回false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> === <span class="hljs-number">3</span>)  <span class="hljs-comment">//全等于 要求数据类型 数值完全相同</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> === <span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;吴彦祖&#x27;</span> == <span class="hljs-string">&#x27;刘德华&#x27;</span>) <span class="hljs-comment">//false</span><br><br><br><span class="hljs-comment">//案例</span><br><span class="hljs-keyword">var</span> num1 =<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> res1 = num1 &gt; num2;   <span class="hljs-comment">//输出false</span><br><span class="hljs-keyword">var</span> res2 = num1 == <span class="hljs-number">11</span>;    <span class="hljs-comment">//输出false</span><br><span class="hljs-keyword">var</span> res3 = num1 != num2;   <span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h2><p>逻辑运算符与比较运算符一样，只会输出布尔值</p><h3 id="逻辑与"><a class="markdownIt-Anchor" href="#逻辑与">#</a> 逻辑与</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">//逻辑与  &amp;&amp;  一假全假，全真为真<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">false</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="逻辑或"><a class="markdownIt-Anchor" href="#逻辑或">#</a> 逻辑或</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">//逻辑或 ||  一真全真 全假则假<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> || <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> || <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">true</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> || <span class="hljs-number">0</span> &gt; <span class="hljs-number">1</span>) //<span class="hljs-literal">false</span> || <span class="hljs-literal">true</span>  结果为<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="逻辑非"><a class="markdownIt-Anchor" href="#逻辑非">#</a> 逻辑非</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//逻辑非 not ！   取反符，布尔值的</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(!<span class="hljs-literal">true</span>);    <span class="hljs-comment">//不是true  输出结果为false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(!<span class="hljs-literal">false</span>);    <span class="hljs-comment">//同理 不是false 输出true</span><br></code></pre></td></tr></table></figure><h2 id="1031笔记"><a class="markdownIt-Anchor" href="#1031笔记">#</a> 10.31 笔记</h2><h2 id="短路运算-逻辑中断"><a class="markdownIt-Anchor" href="#短路运算-逻辑中断">#</a> 短路运算 逻辑中断</h2><h3 id="短路运算-逻辑与"><a class="markdownIt-Anchor" href="#短路运算-逻辑与">#</a> 短路运算 逻辑与</h3><p>在逻辑与的短路运算中，如果表达式 1 为真，则返回表达式 2</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>)  <span class="hljs-comment">//这样的结果是false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>)  <span class="hljs-comment">//这样的结果是456</span><br></code></pre></td></tr></table></figure><p>如果表达式 1 为假，则返回表达式 1，空值同理</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span>)  //返回<span class="hljs-number">0</span><br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">132</span> * <span class="hljs-number">456</span> - <span class="hljs-number">789</span>)  //这样的结果也是<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="短路运算-逻辑或"><a class="markdownIt-Anchor" href="#短路运算-逻辑或">#</a> 短路运算 逻辑或</h3><p>逻辑或的短路运算  如果表达式 1 为真，则直接返回表达式 1，后面的表达式不参与运算<br>如果表达式 1 为假，那后面的表达式则参与运算，返回表达式 2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">123</span> || <span class="hljs-number">456</span>)  //结果<span class="hljs-number">123</span><br><span class="hljs-attribute">console</span>.log(<span class="hljs-number">0</span> || <span class="hljs-number">456</span> + <span class="hljs-number">1</span>)  //结果<span class="hljs-number">457</span><br></code></pre></td></tr></table></figure><p>逻辑或短路运算案例</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> my1 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span> || my1++)  <span class="hljs-comment">//因为表达式1为真，则表达式2直接不参与运算，此时输出123</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(my1)            <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符">#</a> 赋值运算符</h2><p>自增运算符，每次自增只能自增 1<br>my1++   ++my1 之类</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var my1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;  #这个叫直接赋值</span><br></code></pre></td></tr></table></figure><p>设定赋值运算符，可以做到每次 + - * / 后再赋值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> my2 = <span class="hljs-number">1</span>;<br><br><span class="hljs-attribute">my2</span> += <span class="hljs-number">5</span>;         #自增<span class="hljs-number">5</span>   my2 = my2 + <span class="hljs-number">5</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">6</span><br><span class="hljs-attribute">my2</span> -= <span class="hljs-number">5</span>          #自减<span class="hljs-number">5</span>  my2 = my2 -<span class="hljs-number">5</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">1</span><br><span class="hljs-attribute">my2</span> *= <span class="hljs-number">6</span>;         #每次乘<span class="hljs-number">6</span>后赋值 my2 = my2 * <span class="hljs-number">6</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">6</span><br><span class="hljs-attribute">my2</span> /=<span class="hljs-number">2</span>;          #每次除<span class="hljs-number">2</span>   my2 = my2 / <span class="hljs-number">2</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">3</span><br><span class="hljs-attribute">my2</span> %=<span class="hljs-number">2</span>;          #以<span class="hljs-number">2</span>取余  my2 = my2 % <span class="hljs-number">2</span><br><span class="hljs-attribute">console</span>.log(my2)  #结果为<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h2 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级">#</a> 运算符优先级</h2><p>简单来说还是先乘除 后加减 括号优先 逻辑与在前 逻辑或在后</p><p><img src="https://image.dcaoao.com/image/202210311303456.webp" alt=""></p><p>运算符优先级</p><ol><li>小括号  <code>()</code> <br> 2. 一元运算符   <code>++ -- !</code> <br>3. 算数运算符  先  <code>* / % </code> 后  <code>+ -</code> <br>4. 关系运算符   <code>&gt; &gt;= &lt; &lt;=num</code> <br>5. 相等运算符   <code>== != === !==</code> <br>6. 逻辑运算符  先  <code>&amp;&amp;</code>  后 <code> ||</code> <br>7. 赋值运算符   <code>=</code> <br>8. 逗号运算符   <code>, </code></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 运算符优先级案例</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">false</span> ||         <span class="hljs-literal">true</span>     &amp;&amp;         <span class="hljs-literal">true</span>    &amp;&amp; <span class="hljs-literal">true</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span> &gt;= <span class="hljs-number">6</span> || <span class="hljs-string">&#x27;人&#x27;</span> != <span class="hljs-string">&#x27;阿凡达&#x27;</span> &amp;&amp; !(<span class="hljs-number">12</span> * <span class="hljs-number">2</span> ==<span class="hljs-number">144</span>) &amp;&amp; <span class="hljs-literal">true</span>)  <span class="hljs-comment">//结果为true，因为逻辑与优先级比逻辑或高</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">5</span> == num / <span class="hljs-number">2</span> &amp;&amp; (<span class="hljs-number">2</span> + <span class="hljs-number">2</span> * num).toString() === <span class="hljs-string">&#x27;22&#x27;</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(   <span class="hljs-literal">true</span>      &amp;&amp;             <span class="hljs-literal">true</span>                 )      <span class="hljs-comment">//结果为true</span><br></code></pre></td></tr></table></figure><h2 id="if语法的结构"><a class="markdownIt-Anchor" href="#if语法的结构">#</a> IF 语法的结构</h2><p>if 语句中 如果表达式为真，则运行 if 大括号内的语句<br>如果表达式为假，则直接跳过该 if 语句内的表达式运行<br> if 语句后面可以跟一个 else 语句，意思是 if 表达式为否时，改语句执行</p><h3 id="if与else"><a class="markdownIt-Anchor" href="#if与else">#</a> if 与 else</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">var</span> <span class="hljs-variable">age</span> = <span class="hljs-function"><span class="hljs-title">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-variable">age</span> &gt;= <span class="hljs-number">18</span>) &#123;    <span class="hljs-comment">//如果 age大于等于18</span><br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;恭喜您,允许进入网吧&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> &#123;        <span class="hljs-comment">//else的意思是 否则</span><br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;未成年不准进入网吧&#x27;</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1101笔记"><a class="markdownIt-Anchor" href="#1101笔记">#</a> 11.01 笔记</h2><h3 id="if-else-if"><a class="markdownIt-Anchor" href="#if-else-if">#</a> if else if</h3><p>如果第一个 if 没有满足条件，则跳过这个 if 语句，去执行下一个，如果还是不满足，则继续下一个 if</p><p>多选一的关系<br>如果条件表达式 1 不满足，则检查条件表达式 2, 如果条件表达式 2 也不满足，则执行条件表达式 3</p><p>如果所有条件表达式都不满足，那执行结尾的 else</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-number">1</span> == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;1不等于2&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> <span class="hljs-variable"><span class="hljs-keyword">if</span></span> (<span class="hljs-number">2</span> == <span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;2等于2&#x27;</span>)</span><br>&#125; <span class="hljs-variable"><span class="hljs-keyword">else</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;都不满足&#x27;</span>)</span><br>&#125; <br><br></code></pre></td></tr></table></figure><h2 id="三元表达式"><a class="markdownIt-Anchor" href="#三元表达式">#</a> 三元表达式</h2><p>三元表达式中的条件判断如果为 true 则返回表达式 1 , 如果判断为 false 则返回表达式 2<br> 也是多选一的关系</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> res <span class="hljs-built_in">num</span> &gt; <span class="hljs-number">5</span> ? <span class="hljs-string">&#x27;是的&#x27;</span> : <span class="hljs-string">&#x27;不是&#x27;</span><br>alert (res)    <span class="hljs-comment">//因为num大于10,结果为true 所以返回  是的</span><br><br></code></pre></td></tr></table></figure><h2 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句">#</a> Switch 语句</h2><p>Switch 语句也是多选一的关系，但是适合条件比较多的时候<br>如果 switch 中的值与 case 后的结果符合，则执行符合的那一条表达式<br>如果都不符合，则执行最后的 default<br>switch 表达式的值与 case 的值为全等的关系 === 也就是说数据类型和内容必须完全相等才可以<br>如果没有写 break 来进行结束，则会连带执行下一条表达式，不管符不符合<br>在实际开发中，switch 表达式一般单独写成一个值</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> my1 = prompt(<span class="hljs-string">&#x27;请输入水果名称&#x27;</span>)<br><span class="hljs-keyword">switch</span> (my1) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;苹果&#x27;</span>:<br>        alert (<span class="hljs-string">&#x27;苹果一块大批发啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;香蕉&#x27;</span>: <br>        alert(<span class="hljs-string">&#x27;香蕉包邮到家门口啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;菠萝&#x27;</span>:<br>        alert(<span class="hljs-string">&#x27;菠萝白送啦&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> a1:<br>        alert(<span class="hljs-string">&#x27;这是一个al&#x27;</span>)<br>    <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:alert(<span class="hljs-string">&#x27;没有符合条件的,下次一定&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行效果<br><img src="https://image.dcaoao.com/image/202211012203507.gif" alt=""></p><h2 id="for循环"><a class="markdownIt-Anchor" href="#for循环">#</a> for 循环</h2><p 循环体="">循环分为四大部分<br> for (初始化变量；条件表达式；操作表达式)</p><p>初始化变量：在循环中只会执行一次，使用 var 声明的一个普通变量 一般作为计数器使用<br>条件表达式：决定每一次循环后，循环是否会继续执行，也就是结束条件<br>操作表达式：每次循环都会执行一次，注意是每次循环，配合初始化变量进行更新 (一般递增或递减)</p><p>执行顺序:<br>1. 首先执行一次 <code>初始化变量</code> <br> 2. 检查 <code>条件表达式</code> 来确定是否要执行循环<br> 3. 如果 <code>条件表达式</code> 符合条件，则执行一次 <code>循环体</code> <br> 4. 执行过 <code>循环体</code> 后，再去执行一次 <code>操作表达式</code> <br> 5. 一套循环已经完成，接下来继续检查 <code>条件表达式</code> 是否满足条件，满足条件则继续循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//解析 执行i等于1 然后检查i是否小于等于100</span><br><span class="hljs-comment">//如果小于100 执行一次控制台输出123 </span><br><span class="hljs-comment">//然后再为i变量后置自增一次 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>;i++) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for循环案例"><a class="markdownIt-Anchor" href="#for循环案例">#</a> for 循环案例</h3><p>做一个学生成绩查询的案例，需要最后输出班级人数，班级总分数，班级平均分</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先要求用户输入班级总人数</span><br><span class="hljs-keyword">var</span> total = prompt (<span class="hljs-string">&#x27;请输入班级总人数&#x27;</span>)<br><span class="hljs-comment">//然后使用for循环弹出相应的输入框要求输出每个人的成绩</span><br><span class="hljs-comment">//然后声明一个总成绩空值</span><br><span class="hljs-keyword">var</span> totalresults = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= total ;i++) &#123;<br>    <span class="hljs-keyword">var</span> results = prompt (<span class="hljs-string">&#x27;请输入第&#x27;</span> + i +<span class="hljs-string">&#x27;个学生的成绩&#x27;</span>)<br>    <span class="hljs-comment">//然后总成绩将每次循环的成绩相加保存,但是prompt输入过来的字符是字符串格式,还需要转换为数值</span><br>    totalresults += <span class="hljs-built_in">Number</span>(results)<br>&#125; <br><br><span class="hljs-comment">// 然后输出平均分,总成绩,班级人数</span><br>alert(<span class="hljs-string">&#x27;班级的总人数是&#x27;</span> + total + <span class="hljs-string">&#x27;人&#x27;</span>)<br>alert(<span class="hljs-string">&#x27;班级的总成绩是&#x27;</span> + totalresults + <span class="hljs-string">&#x27;分&#x27;</span>)<br>alert(<span class="hljs-string">&#x27;班级的平均分是&#x27;</span> + totalresults / total + <span class="hljs-string">&#x27;分&#x27;</span>)<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://image.dcaoao.com/image/202211082124607.gif" alt=""></p><h2 id="1107记录"><a class="markdownIt-Anchor" href="#1107记录">#</a> 11.07 记录</h2><h2 id="for循环执行不同的代码"><a class="markdownIt-Anchor" href="#for循环执行不同的代码">#</a> for 循环执行不同的代码</h2><p>for 循环可以使用 if else 来执行不同的代码，输出不同的值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">100</span> ; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是第1圈循环&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;这是第100圈循环&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;循环次数&#x27;</span> + i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双重for循环"><a class="markdownIt-Anchor" href="#双重for循环">#</a> 双重 for 循环</h2><p>for 循环可以嵌套，外层循环一次，内层循环全部</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">10</span> ;i++) &#123; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span> ;k &lt;= <span class="hljs-number">10</span> ; k++) ( <br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;内层的输出&#x27;</span>)<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>结果就是，内层循环先在控制台输出十遍 <code>内层的输出</code> ，然后再回到外循环，然后再输出十遍 <code>内层的输出</code> ，往返 10 次，直到外层循环完成</p><h3 id="双重for循环案例"><a class="markdownIt-Anchor" href="#双重for循环案例">#</a> 双重 for 循环案例</h3><h4 id="案例输出五行五列的星星符号"><a class="markdownIt-Anchor" href="#案例输出五行五列的星星符号">#</a> 案例，输出五行五列的星星符号</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//首先定义一个空值</span><br><span class="hljs-keyword">var</span> xing = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">//外循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span> ;i++) &#123;<br>    <span class="hljs-comment">//内循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span>;k &lt;= <span class="hljs-number">5</span> ; k++ ) &#123;<br>        xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>    &#125;<br>    xing += <span class="hljs-string">&#x27;\n&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(xing)<br><br></code></pre></td></tr></table></figure><p>解读：首先看内循环，内循环因为 for 双重循环的特性，外循环执行一次，内循环就要执行五次<br>现在内循环给出的是一颗 <code>☆</code> , 循环五次过后变为  <code>☆☆☆☆☆</code>  也就是一行<br>那继续执行下去，外循环执行五次后，得到了 25 颗星星，但是效果不对<br><img src="https://image.dcaoao.com/image/202211082041137.webp" alt=""><br>要求的是五行五列，但是现在为一列，说明缺少换行符号<br>那就在内循环出五颗星星后，在其后方添加一个换行符<br> <code>xing = xing + '\n'</code> <br> <code>xing += '\n'</code> <br> 两者皆可，最后在循环外输出结果，得到想要的答案<br><img src="https://image.dcaoao.com/image/202211082044473.webp" alt=""></p><h4 id="案例输出倒三角的星星图案"><a class="markdownIt-Anchor" href="#案例输出倒三角的星星图案">#</a> 案例，输出倒三角的星星图案</h4><p>首先是示例图<br><img src="https://image.dcaoao.com/image/202211082046226.webp" alt=""><br>第一层十颗星星，第二层九颗星星，以此类推</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//声明空值,方便调用</span><br><span class="hljs-keyword">var</span> xing = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ;i &lt;= <span class="hljs-number">10</span> ;i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = i ;k &lt;= <span class="hljs-number">10</span>; k++) &#123;<br>                    xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>                &#125;<br>                xing += <span class="hljs-string">&#x27;\n&#x27;</span><br>            &#125;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (xing)<br></code></pre></td></tr></table></figure><p>解读：第一层需要十颗星，那就叫内层循环首次循环直接输出一排十颗的星星，所以 <code>k &lt;= 10</code> <br> 内层循环的 <code>k</code>  值是取外层循环的 <code>i</code>  值，也就是说，外层第一次循环，内层会循环十遍，也就输出一排 10 颗星，在内循环其后面添加一句 <code>xing += '\n'</code>  达到每次内循环完成后换行的目的</p><p>外层第二次循环后，i 值变为了 2, 那内循环的 <code>k</code>  值是取的 <code>i</code> , 则内循环这次会循环九次，输出九颗 <code>☆</code> , 再次换行，以此类推</p><p>至于正三角的话更简单，首次内循环只可循环一次，然后按照循环次数增加<br>将内循环更改为</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span> ;k &lt;= i; k++) &#123;<br>    xing += <span class="hljs-string">&#x27;☆&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样内循环首次循环时，一次便会停止，外循环第二次循环后，内循环便会循环两次，以此类推<br><img src="https://image.dcaoao.com/image/202211082108719.webp" alt=""></p><h2 id="1110记录"><a class="markdownIt-Anchor" href="#1110记录">#</a> 11.10 记录</h2><h2 id="while循环-与-do-while循环"><a class="markdownIt-Anchor" href="#while循环-与-do-while循环">#</a> while 循环 与 do while 循环</h2><h3 id="while循环"><a class="markdownIt-Anchor" href="#while循环">#</a> while 循环</h3><p><code>while</code>  循环与 for 循环稍有不同<br> <code>while</code>  的循环，先声明一个 <code>计数器</code> ，循环停止条件在小括号内，计数器循环写在循环内<br>当条件表达式为 <code>true</code> , 则执行循环，如果为 <code>false</code> , 则退出循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;输出语句&#x27;</span>)<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>while 循环案例，可以执行判断条件比较复杂的语句</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入前端二字&#x27;</span>)<br>while (<span class="hljs-selector-tag">a</span> !== <span class="hljs-string">&#x27;前端&#x27;</span>) &#123;<br>    <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">prompt</span>(<span class="hljs-string">&#x27;请输入前端二字&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#x27;好滴很&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h3 id="do-while循环"><a class="markdownIt-Anchor" href="#do-while循环">#</a> do while 循环</h3><p><code>do while</code>  会先执行一次循环体，然后再判断条件表达式，<br> 如果为 <code>true</code> , 则继续循环，如果为 <code>false</code> , 则退出循环<br>格式:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (<span class="hljs-string">&#x27;这是循环体&#x27;</span>)<br>    a++<br>&#125; <span class="hljs-keyword">while</span> (a &lt;= <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>do while 案例 打印 1-100 的整数和</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span><br><span class="hljs-keyword">do</span> &#123;<br>   c += b<br>   b++;<br>&#125; <span class="hljs-keyword">while</span> (b &lt;= <span class="hljs-number">100</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (c)<br></code></pre></td></tr></table></figure><h2 id="continue跳出当前循环"><a class="markdownIt-Anchor" href="#continue跳出当前循环">#</a> continue 跳出当前循环</h2><p>continue, 只要出现，则跳过本次循环，执行下一次循环</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span> ) &#123;  <span class="hljs-comment">//使用IF语句，表明只要i等于3的时候，就跳出当前循环</span><br>        continue;   <span class="hljs-comment">//跳出当前循环，执行下一次循环</span><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span> (<span class="hljs-string">&#x27;这是第&#x27;</span> + i + <span class="hljs-string">&#x27;次循环&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：第三次循环被跳过，直接执行第四次循环<br><img src="https://image.dcaoao.com/image/202211111913091.webp" alt=""></p><h3 id="continue-跳出循环案例"><a class="markdownIt-Anchor" href="#continue-跳出循环案例">#</a> continue 跳出循环案例</h3><p>案例，求 1-100 之间，除了能被 7 整除以外的整数和<br>使用 if 语句，如果取余 7 结果后为 0 的，一律跳过当前循环</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">1</span>;k &lt;= <span class="hljs-number">100</span>;k++) &#123;<br>    <span class="hljs-keyword">if</span> (k % <span class="hljs-number">7</span> ==<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">num</span> += k;<br>&#125;<br>console.log(<span class="hljs-built_in">num</span>)<br></code></pre></td></tr></table></figure><h2 id="break-跳出整个循环"><a class="markdownIt-Anchor" href="#break-跳出整个循环">#</a> break 跳出整个循环 ##</h2><p>直接跳出整个循环，不在执行下一次的循环，整个循环直接结束</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;a &lt;= <span class="hljs-number">5</span> ;a++) &#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//当a等于3,直接退出整个循环,不再执行循环任务</span><br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;循环&#x27;</span> + a + <span class="hljs-string">&#x27;次&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：只循环了两次<br><img src="https://image.dcaoao.com/image/202211111916830.webp" alt=""></p><h2 id="数组的使用"><a class="markdownIt-Anchor" href="#数组的使用">#</a> 数组的使用</h2><p>数组，是一组数据的集合，可将多个数据储存在单个变量下<br>创建数组有两种方式 new 与数组字面量</p><h3 id="创建数组"><a class="markdownIt-Anchor" href="#创建数组">#</a> 创建数组</h3><p>使用 new 创建数组</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();  <span class="hljs-comment">//创建一个空数组,A要大写,使用Array</span><br></code></pre></td></tr></table></figure><p>使用数组字面量创建数组</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var abb <span class="hljs-operator">=</span> []<span class="hljs-comment">;  //使用方括号</span><br></code></pre></td></tr></table></figure><p>声明数组并赋值被称为数组的初始化</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> abb = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;字符串类型&#x27;</span>,<span class="hljs-literal">true</span>];  <span class="hljs-comment">//数组内和存在多个不同的值，被称为数组元素，使用逗号分隔</span><br></code></pre></td></tr></table></figure><h3 id="获取数组内的元素"><a class="markdownIt-Anchor" href="#获取数组内的元素">#</a> 获取数组内的元素</h3><p>格式  <code>console.log(数组名[数组索引号])</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">0</span>])  <span class="hljs-comment">//会输出数组内第一个值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">1</span>])  <span class="hljs-comment">//会输出数组内第二个值，以此类推，索引号从0开始</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">3</span>])  <span class="hljs-comment">//会输出数组内第三个值，以此类推，索引号从0开始</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(abb[<span class="hljs-number">5</span>])  <span class="hljs-comment">//因为没有这个值，所以会输出空值</span><br></code></pre></td></tr></table></figure><h3 id="遍历数组将数组内的元素全部输出出来"><a class="markdownIt-Anchor" href="#遍历数组将数组内的元素全部输出出来">#</a> 遍历数组，将数组内的元素全部输出出来</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> acc = [<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-string">&#x27;张飞&#x27;</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-string">&#x27;马超&#x27;</span>,<span class="hljs-string">&#x27;赵云&#x27;</span>,<span class="hljs-string">&#x27;诸葛亮&#x27;</span>,<span class="hljs-string">&#x27;吕蒙&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ;i &lt; <span class="hljs-number">7</span> ; i++)&#123;  <span class="hljs-comment">//因为数组索引从0开始，所以i = 0，因为从0开始，输出小于7的，所以 &lt; 7 </span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(acc[i])<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111934846.webp" alt=""></p><h3 id="动态获取数组内的元素长度个数"><a class="markdownIt-Anchor" href="#动态获取数组内的元素长度个数">#</a> 动态获取数组内的元素长度 / 个数</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> add = [<span class="hljs-string">&#x27;刘备&#x27;</span>,<span class="hljs-string">&#x27;张飞&#x27;</span>,<span class="hljs-string">&#x27;关羽&#x27;</span>,<span class="hljs-string">&#x27;马超&#x27;</span>,<span class="hljs-string">&#x27;赵云&#x27;</span>,<span class="hljs-string">&#x27;诸葛亮&#x27;</span>,<span class="hljs-string">&#x27;吕蒙&#x27;</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(add.<span class="hljs-built_in">length</span>)  <span class="hljs-comment">//输出为7</span><br><span class="hljs-comment">//数组的长度是元素格式，并非元素索引号，而且可以动态检测数组的元素个数</span><br></code></pre></td></tr></table></figure><h3 id="案例求数组元素的和及其平均值"><a class="markdownIt-Anchor" href="#案例求数组元素的和及其平均值">#</a> 案例，求数组元素的和及其平均值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> aee = [<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;a &lt; aee.<span class="hljs-built_in">length</span> ;a++) &#123;<br>    num += aee[a]<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组和:&#x27;</span> + num)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组平均值:&#x27;</span> + num / aee.<span class="hljs-built_in">length</span>) <br><span class="hljs-comment">//如果想要输出多个变量，使用逗号分隔即可</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num,num / aee.<span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935787.webp" alt=""></p><h3 id="案例求数组中的最大值"><a class="markdownIt-Anchor" href="#案例求数组中的最大值">#</a> 案例，求数组中的最大值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> aff = [<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">66</span>,<span class="hljs-number">33</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">69</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">max</span> = aff[<span class="hljs-number">0</span>] <span class="hljs-comment">//首先声明数组内第一个值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>; b &lt; aff.<span class="hljs-built_in">length</span> ; b++) &#123;<br>    <span class="hljs-keyword">if</span> (aff[b] &gt; <span class="hljs-built_in">max</span> ) &#123;<br>        <span class="hljs-built_in">max</span> = aff[b]<br>    &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;数组内最大值为&#x27;</span> + <span class="hljs-built_in">max</span>)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935706.webp" alt=""></p><h3 id="案例将数组转换为字符串类型并且使用-符号分隔"><a class="markdownIt-Anchor" href="#案例将数组转换为字符串类型并且使用-符号分隔">#</a> 案例，将数组转换为字符串类型，并且使用 | 符号分隔</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">//首先声明一个空值用来存储</span><br><span class="hljs-keyword">var</span> aee = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;skyblue&#x27;</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>;c &lt; aee.<span class="hljs-built_in">length</span> ;c++) &#123;<br>str += aee[c]  + <span class="hljs-string">&#x27;|&#x27;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str)<br></code></pre></td></tr></table></figure><p><img src="https://image.dcaoao.com/image/202211111935583.webp" alt=""></p><h3 id="新增数组元素"><a class="markdownIt-Anchor" href="#新增数组元素">#</a> 新增数组元素</h3><p>有两种方法 修改 length 的长度与修改索引号<br> 1. 修改 length 长度</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> agg = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>]</span><br>agg<span class="hljs-selector-class">.length</span> = <span class="hljs-number">5</span><br>console<span class="hljs-selector-class">.log</span>(agg<span class="hljs-selector-attr">[3]</span>)  <span class="hljs-comment">//会输出空值 undefined</span><br></code></pre></td></tr></table></figure><p>2. 修改索引号</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> ahh = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;刘&#x27;</span>,<span class="hljs-string">&#x27;关&#x27;</span>,<span class="hljs-string">&#x27;张&#x27;</span>]</span><br>ahh<span class="hljs-selector-attr">[3]</span> = <span class="hljs-string">&#x27;李&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(ahh<span class="hljs-selector-attr">[3]</span>)   <span class="hljs-comment">//数组内没有索引号为3的，追加过后出现了</span><br><br><span class="hljs-comment">//注意，如果直接给数组或者已有的数组索引赋值，则原有数据会被覆盖</span><br>ahh<span class="hljs-selector-attr">[3]</span> = <span class="hljs-string">&#x27;秦&#x27;</span><br>console<span class="hljs-selector-class">.log</span>(ahh<span class="hljs-selector-attr">[3]</span>)  <span class="hljs-comment">//输出：秦</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录Hexo更换文章链接</title>
    <link href="/2551217376.html"/>
    <url>/2551217376.html</url>
    
    <content type="html"><![CDATA[<h2>前言</h2>hexo的文章链接，长且繁琐，如果文章标题带有中文，复制出来及其不美观<p>百度搜索之后找到一个插件 <span class="label label-success">hexo-abbrlink</span> 可以直接 NPM 命令安装</p><h2>安装</h2>安装指令：<p class="note note-info">npm install hexo-abbrlink --save</p><h2>更改配置文件</h2>安装过后直接打开博客根目录下的 `_config.yml` 替换`permalink`为 ：<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">permalink:</span> posts/:abbrlink.html <br><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">    alg:</span> crc32  <br><span class="hljs-symbol">    rep:</span> hex   <br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/strawdc/img/master/img/202210271209666.webp" alt=""></p><p>即可成功更改永久链接</p><p>其中 <code>alg</code>  与 <code>rep</code>  的值可以更改，下面附官方文档<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo-abbrlink官方文档 https://github.com/Rozbo/hexo-abbrlink">[1]</span></a></sup></p><blockquote><p>crc16 &amp; hex <a href="https://post.zz173.com/posts/66c8.html">https://post.zz173.com/posts/66c8.html</a></p><p>crc16 &amp; dec <a href="https://post.zz173.com/posts/65535.html">https://post.zz173.com/posts/65535.html</a></p><p>crc32 &amp; hex <a href="https://post.zz173.com/posts/8ddf18fb.html">https://post.zz173.com/posts/8ddf18fb.html</a></p><p>crc32 &amp; dec <a href="https://post.zz173.com/posts/1690090958.html">https://post.zz173.com/posts/1690090958.html</a></p></blockquote><h2>应用插件</h2>生成后需要先`hexo clean`清除一下Hexo的缓存，然后再`Hexo s`进行本地预览<p>插件应用后会在站点根目录 <code>\source\_posts\</code>  路径内的.md 文件，标题头内生成一个 <code>abbrlink: xxxxx</code>  的数据，这就是这篇文章的唯一链接</p><p>笔者对照文档修改：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">permalink:</span> :abbrlink.html  <span class="hljs-meta"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">    alg:</span> crc32   <span class="hljs-meta">#算法： crc16(default) and crc32</span><br><span class="hljs-symbol">    rep:</span> dec     <span class="hljs-meta">#进制： dec(default) and hex</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考">#</a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>hexo-abbrlink 官方文档 <a href="https://github.com/Rozbo/hexo-abbrlink">https://github.com/Rozbo/hexo-abbrlink</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记，更换Hexo</title>
    <link href="/62868007.html"/>
    <url>/62868007.html</url>
    
    <content type="html"><![CDATA[<h1 id="记更换hexo"><a class="markdownIt-Anchor" href="#记更换hexo">#</a> 记，更换 Hexo</h1><p>搭建了 Hexo，也是不想维护服务器了，博客部署在 GitHub pages</p><p>博客来来回回更换了好几次，先是 WordPress，又换成了 Typecho，再是 Gridea，发现同步到 Github 不合适，又换成了现在的 Hexo，之前的博文也不想同步了，来来回回的折腾，也没正经弄过</p><p>也是打算当成博客写的</p><p><img src="https://raw.githubusercontent.com/zreo09/zreo09.github.io/main/image/202210271410191.webp" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时隔8个月更新一下博文</title>
    <link href="/999193260.html"/>
    <url>/999193260.html</url>
    
    <content type="html"><![CDATA[<p>8 个月没写博客，今天重新部署了一下系统环境，终于能重新连接上了</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
